[ROS]
; Relevant topic names:
dense_mesh_path_topic = /dense_mesh_env
target_mesh_path_topic = /target_mesh
clean_mesh_path_topic = /clean_mesh_env
part_mesh_path_topic = /part_mesh_env
perch_loc_topic = /perch_targets

[ENVIRONMENT]
; non-mesh environments are deprecated
mesh_env = True
;mesh_dir = /home/simon/Documents/SLAM_Datasets/Bundle_Fusion_Dataset/office3_data/
;full_mesh_path = /home/simon/Documents/SLAM_Datasets/Bundle_Fusion_Dataset/office3_data/office3_125.ply
;segmented_mesh_path = /home/simon/Documents/SLAM_Datasets/Bundle_Fusion_Dataset/office3_data/office3_125_c2000-2000.ply
;; use MATLAB0like strings for arrays (e.g. "1 2; 2 1" would make the matrix [[1, 2],[2, 1]]


# OFFICE3
;mesh_dir = /home/simon/Documents/SLAM_Datasets/Bundle_Fusion_Dataset/office3_data/
;segmented_mesh_path=/home/simon/Documents/SLAM_Datasets/Bundle_Fusion_Dataset/office3_data/office3_red_c2000.ply
;full_mesh_path=/home/simon/Documents/SLAM_Datasets/Bundle_Fusion_Dataset/office3_data/office3_red.ply
;env_file_base_name = office3_red_cluster
;target_file_base_name = target1
;world_frame = 1, 0, 0; 0, 1, 0; 0, 0, 1


# MIT_32
mesh_dir = /home/simon/Documents/SLAM_Datasets/Bundle_Fusion_Dataset/top_test/
full_mesh_path = /home/simon/Documents/SLAM_Datasets/Bundle_Fusion_Dataset/top_test/mit_32_d507_2_quad_simplified.ply
segmented_mesh_path = /home/simon/Documents/SLAM_Datasets/Bundle_Fusion_Dataset/top_test/mit_32-2000.ply
env_file_base_name = toptest
target_file_base_name = target
; use MATLAB like strings for arrays (e.g. "1 2; 2 1" would make the matrix [[1, 2],[2, 1]]
world_frame = 0.01444469, -0.29103776,  0.95660251; -0.99877062, -0.04957064,  0.; 0.0474194,  -0.95542649, -0.291396

env_file_suffix = .ply
target_file_suffix = .ply

; necessary if +z is not the upward direction in the imported meshes
reorient_mesh = False

; thresholds for merging boundary (floor, ceiling) planes into single meshes
angle_threshold = 15
dist_threshold = 0.25
min_room_height = 1.5
target_volume_height = 2

min_obstacle_radius = 0.5
enable_nearest_neighbor_restriction = True

; Used to eliminate regions which do not meet the minimum perch_window; [pixels per meter]
erosion_raster_density = 50

[CAMERA] ; Future work: move camera parameters into a separate config file, for each individual camera
variable_pan = True
variable_tilt = True
gimbal_limit = [90, 90]
variable_zoom = False
cam_fov = [90, 57]
cam_resolution = [1920, 1080]
cam_range = [0.2, 10]

; deprecated
cam_alphas = [0.95, 0.7]

max_zoom = 1
limit_range_by_minimum_feature = True
; approximate golf ball diameter as a quick rule of thumb limit
minimum_feature_size_m = 0.04
; rough approximate based on cai_how_2003 https://link.springer.com/content/pdf/10.1007/3-540-44863-2_105.pdf
minimum_feature_size_px = 10

[DRONE]
; whether or not the drone can perch on walls (vertical surfaces) or horizontal downward (ceiling) or horizontal upward
; (floor) surfaces
perch_on_walls = True
perch_on_ceiling = True
land_on_floor = False
; whether surfaces which cannot be classified as walls, floors, or ceilings (within specified 'angle_threshold') should
; be included in the set of perchable surfaces
perch_on_intermediate_angles = False
min_perch_window = .3, .3

; the minimum height required for a drone to successfully recover after a failed perching attempt
min_recovery_height = 0.60

; rectangle or ellipse
perch_window_shape = rectangle

; deprecated
variable_height = False
frame_rad = 0.33
prop_rad = 0.08
camera_offset = 0,0,0.1
; use MATLAB like strings for arrays (e.g. "1 2; 2 1" would make the matrix [[1, 2],[2, 1]]
camera_rotation = 1, 0, 0; 0, 1, 0; 0, 0, 1

[SEARCH]
n_cams = 5
greedy_search = True
angle_mode = GIMBAL_LIMITED_TARGETING
target_deviation = 40.0, 40.0

; deprecated
min_vertices = 0

individual_surface_opt = False
map_to_flat_surface = True
vary_position_over_face = False
N_iterations = 50
N_particles = 40
N_points = 100
local_search = True

; issue with pickling OBB tree... revisit later. There wasn't a huge performance increase
multi_threading = False

inside_out_search = True

# Future work Tune the stopping conditions...
minimum_score_deviation = -1.0
; Only implement this one for continuous PSO:
minimum_particle_deviation = -0.1

; can be nearest random shrink reflective or intermediate
boundary_handling = reflective
# for velocity update:
# 'w' is velocity decay aka inertia,
pso_w = 0.7
# 'c1' is "cognitive parameter", e.g. attraction to particle best,
pso_c1 = 0.5
# 'c2' is "social parameter", e.g. attraction to local/global best
pso_c2 = 0.4
# 'k' = number of neighbors to consider
pso_k = 5
# 'p' = the Minkowski p-norm. 1 for absolute val dist, 2 for norm dist
pso_p = 2

# if this value (N) is greater than 0, the top N particles will be re-evaluated, each iteration with
noise_resistant_particles = -3
# the number of points to be searched; to be effective, this should be larger than
noise_resistant_sample_size = 777