!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
A	mesh_visibility/glm/glm/gtx/simd_vec4.hpp	/^		A = 3,$/;"	e	enum:glm::comp
ABS	mesh_partition/heap/stdmix.h	47;"	d
APIENTRY	mesh_visibility/glfw/glfw3.h	85;"	d
APIENTRY	mesh_visibility/glfw/glfw3.h	87;"	d
APIENTRY	mesh_visibility/glfw/glfw3native.h	77;"	d
ARRAY_ALLOC_INPLACE	mesh_partition/heap/MxBlock.h	/^    ARRAY_ALLOC_INPLACE$/;"	e	enum:_array_alloc_policy
ARRAY_SIZE_IN_ELEMENTS	mesh_visibility/gl_util.h	32;"	d
A_	mesh_partition/qemquadrics.h	/^    Matrix3d A_;$/;"	m	class:QEMQuadrics
AssertBound	mesh_partition/heap/stdmix.h	101;"	d
AssertBound	mesh_partition/heap/stdmix.h	104;"	d
Axis	mesh_partition/heap/stdmix.h	/^enum Axis {X=0, Y=1, Z=2, W=3};$/;"	g
B	mesh_visibility/glm/glm/gtx/simd_vec4.hpp	/^		B = 2,$/;"	e	enum:glm::comp
BLUR_ESTIMATION_H	blur_estimation/blur_estimation.h	15;"	d
BlurEstimation	blur_estimation/blur_estimation.cpp	/^BlurEstimation::BlurEstimation(const cv::Mat &input)$/;"	f	class:BlurEstimation
BlurEstimation	blur_estimation/blur_estimation.h	/^class BlurEstimation$/;"	c
CALLBACK	mesh_visibility/glfw/glfw3.h	101;"	d
CALLBACK	mesh_visibility/glfw/glfw3.h	3346;"	d
CAREFUL	mesh_partition/heap/stdmix.h	86;"	d
CAREFUL	mesh_partition/heap/stdmix.h	89;"	d
COVARIANCE_H	common/covariance.h	12;"	d
CalibrationParams	mesh_texture_opt/mesh_opt.h	/^        CalibrationParams()$/;"	f	struct:RGBDMeshOpt::CalibrationParams
CalibrationParams	mesh_texture_opt/mesh_opt.h	/^        CalibrationParams(int w, int h) : width(w), height(h) { clearParams(); }$/;"	f	struct:RGBDMeshOpt::CalibrationParams
CalibrationParams	mesh_texture_opt/mesh_opt.h	/^    struct CalibrationParams$/;"	s	class:RGBDMeshOpt
Cluster	mesh_partition/partition.h	/^        Cluster() : energy(0) {}$/;"	f	struct:Partition::Cluster
Cluster	mesh_partition/partition.h	/^    struct Cluster$/;"	s	class:Partition
Cluster	mesh_texture_opt/mesh_opt.h	/^        Cluster() : is_valid(false), is_visible(false), is_optimized(false) {}$/;"	f	struct:RGBDMeshOpt::Cluster
Cluster	mesh_texture_opt/mesh_opt.h	/^    struct Cluster$/;"	s	class:RGBDMeshOpt
CovObj	common/covariance.cpp	/^CovObj::CovObj()$/;"	f	class:CovObj
CovObj	common/covariance.cpp	/^CovObj::CovObj(const Vector3d &v1, const Vector3d &v2, const Vector3d &v3)$/;"	f	class:CovObj
CovObj	common/covariance.h	/^class CovObj$/;"	c
EBO_	mesh_visibility/mesh_visibility.h	/^	unsigned int VAO_, VBO_, EBO_;$/;"	m	class:MeshVisibility
Edge	mesh_partition/partition.h	/^        Edge(int a, int b) : v1(a), v2(b) {}$/;"	f	struct:Partition::Edge
Edge	mesh_partition/partition.h	/^    struct Edge : public MxHeapable$/;"	s	class:Partition
FEQ	mesh_partition/heap/gfx.h	/^inline bool  FEQ(double a, double b, double e=FEQ_EPS)  {return fabs(a-b)<e;}$/;"	f
FEQ2	mesh_partition/heap/gfx.h	/^inline bool FEQ2(double a, double b, double e=FEQ_EPS2) {return fabs(a-b)<e;}$/;"	f
FEQ_EPS	mesh_partition/heap/gfx.h	/^const double FEQ_EPS = 1e-6;$/;"	v
FEQ_EPS2	mesh_partition/heap/gfx.h	/^const double FEQ_EPS2 = 1e-12;$/;"	v
Face	mesh_partition/partition.h	/^        Face() : cluster_id(-1), is_visited(false), is_valid(true) {}$/;"	f	struct:Partition::Face
Face	mesh_partition/partition.h	/^    struct Face$/;"	s	class:Partition
Face	mesh_texture_opt/mesh_opt.h	/^        Face() : cluster_id(-1), is_visited(false), is_visible(false) {}$/;"	f	struct:RGBDMeshOpt::Face
Face	mesh_texture_opt/mesh_opt.h	/^    struct Face$/;"	s	class:RGBDMeshOpt
Frame	mesh_texture_opt/mesh_opt.h	/^        Frame() : is_optimized(false) {}$/;"	f	struct:RGBDMeshOpt::Frame
Frame	mesh_texture_opt/mesh_opt.h	/^    struct Frame$/;"	s	class:RGBDMeshOpt
G	mesh_visibility/glm/glm/gtx/simd_vec4.hpp	/^		G = 1,$/;"	e	enum:glm::comp
GBUFFER_DEPTH_TEXTURE_UNIT	mesh_visibility/gbuffer.h	6;"	d
GBUFFER_H	mesh_visibility/gbuffer.h	2;"	d
GBUFFER_NUM_TEXTURES	mesh_visibility/gbuffer.h	/^		GBUFFER_NUM_TEXTURES$/;"	e	enum:GBuffer::GBUFFER_TEXTURE_TYPE
GBUFFER_POSITION_TEXTURE_UNIT	mesh_visibility/gbuffer.h	7;"	d
GBUFFER_TEXTURE_TYPE	mesh_visibility/gbuffer.h	/^	enum GBUFFER_TEXTURE_TYPE {$/;"	g	class:GBuffer
GBUFFER_TEXTURE_TYPE_COLOR	mesh_visibility/gbuffer.h	/^		GBUFFER_TEXTURE_TYPE_COLOR,$/;"	e	enum:GBuffer::GBUFFER_TEXTURE_TYPE
GBUFFER_TEXTURE_TYPE_DEPTH	mesh_visibility/gbuffer.h	/^		GBUFFER_TEXTURE_TYPE_DEPTH,$/;"	e	enum:GBuffer::GBUFFER_TEXTURE_TYPE
GBuffer	mesh_visibility/gbuffer.cpp	/^GBuffer::GBuffer()$/;"	f	class:GBuffer
GBuffer	mesh_visibility/gbuffer.h	/^class GBuffer$/;"	c
GFX_INCLUDED	mesh_partition/heap/gfx.h	2;"	d
GLCheckError	mesh_visibility/gl_util.h	57;"	d
GLExitIfError	mesh_visibility/gl_util.h	47;"	d
GLFWAPI	mesh_visibility/glfw/glfw3.h	176;"	d
GLFWAPI	mesh_visibility/glfw/glfw3.h	179;"	d
GLFWAPI	mesh_visibility/glfw/glfw3.h	182;"	d
GLFWAPI	mesh_visibility/glfw/glfw3.h	185;"	d
GLFW_ACCUM_ALPHA_BITS	mesh_visibility/glfw/glfw3.h	609;"	d
GLFW_ACCUM_BLUE_BITS	mesh_visibility/glfw/glfw3.h	608;"	d
GLFW_ACCUM_GREEN_BITS	mesh_visibility/glfw/glfw3.h	607;"	d
GLFW_ACCUM_RED_BITS	mesh_visibility/glfw/glfw3.h	606;"	d
GLFW_ALPHA_BITS	mesh_visibility/glfw/glfw3.h	603;"	d
GLFW_ANY_RELEASE_BEHAVIOR	mesh_visibility/glfw/glfw3.h	646;"	d
GLFW_API_UNAVAILABLE	mesh_visibility/glfw/glfw3.h	539;"	d
GLFW_ARROW_CURSOR	mesh_visibility/glfw/glfw3.h	661;"	d
GLFW_AUTO_ICONIFY	mesh_visibility/glfw/glfw3.h	597;"	d
GLFW_AUX_BUFFERS	mesh_visibility/glfw/glfw3.h	610;"	d
GLFW_BLUE_BITS	mesh_visibility/glfw/glfw3.h	602;"	d
GLFW_CALLBACK_DEFINED	mesh_visibility/glfw/glfw3.h	102;"	d
GLFW_CALLBACK_DEFINED	mesh_visibility/glfw/glfw3.h	3347;"	d
GLFW_CLIENT_API	mesh_visibility/glfw/glfw3.h	617;"	d
GLFW_CONNECTED	mesh_visibility/glfw/glfw3.h	689;"	d
GLFW_CONTEXT_RELEASE_BEHAVIOR	mesh_visibility/glfw/glfw3.h	625;"	d
GLFW_CONTEXT_REVISION	mesh_visibility/glfw/glfw3.h	620;"	d
GLFW_CONTEXT_ROBUSTNESS	mesh_visibility/glfw/glfw3.h	621;"	d
GLFW_CONTEXT_VERSION_MAJOR	mesh_visibility/glfw/glfw3.h	618;"	d
GLFW_CONTEXT_VERSION_MINOR	mesh_visibility/glfw/glfw3.h	619;"	d
GLFW_CROSSHAIR_CURSOR	mesh_visibility/glfw/glfw3.h	671;"	d
GLFW_CURSOR	mesh_visibility/glfw/glfw3.h	638;"	d
GLFW_CURSOR_DISABLED	mesh_visibility/glfw/glfw3.h	644;"	d
GLFW_CURSOR_HIDDEN	mesh_visibility/glfw/glfw3.h	643;"	d
GLFW_CURSOR_NORMAL	mesh_visibility/glfw/glfw3.h	642;"	d
GLFW_DECORATED	mesh_visibility/glfw/glfw3.h	596;"	d
GLFW_DEPTH_BITS	mesh_visibility/glfw/glfw3.h	604;"	d
GLFW_DISCONNECTED	mesh_visibility/glfw/glfw3.h	690;"	d
GLFW_DONT_CARE	mesh_visibility/glfw/glfw3.h	692;"	d
GLFW_DOUBLEBUFFER	mesh_visibility/glfw/glfw3.h	615;"	d
GLFW_FLOATING	mesh_visibility/glfw/glfw3.h	598;"	d
GLFW_FOCUSED	mesh_visibility/glfw/glfw3.h	592;"	d
GLFW_FORMAT_UNAVAILABLE	mesh_visibility/glfw/glfw3.h	589;"	d
GLFW_GREEN_BITS	mesh_visibility/glfw/glfw3.h	601;"	d
GLFW_HAND_CURSOR	mesh_visibility/glfw/glfw3.h	676;"	d
GLFW_HRESIZE_CURSOR	mesh_visibility/glfw/glfw3.h	681;"	d
GLFW_IBEAM_CURSOR	mesh_visibility/glfw/glfw3.h	666;"	d
GLFW_ICONIFIED	mesh_visibility/glfw/glfw3.h	593;"	d
GLFW_INVALID_ENUM	mesh_visibility/glfw/glfw3.h	498;"	d
GLFW_INVALID_VALUE	mesh_visibility/glfw/glfw3.h	510;"	d
GLFW_JOYSTICK_1	mesh_visibility/glfw/glfw3.h	443;"	d
GLFW_JOYSTICK_10	mesh_visibility/glfw/glfw3.h	452;"	d
GLFW_JOYSTICK_11	mesh_visibility/glfw/glfw3.h	453;"	d
GLFW_JOYSTICK_12	mesh_visibility/glfw/glfw3.h	454;"	d
GLFW_JOYSTICK_13	mesh_visibility/glfw/glfw3.h	455;"	d
GLFW_JOYSTICK_14	mesh_visibility/glfw/glfw3.h	456;"	d
GLFW_JOYSTICK_15	mesh_visibility/glfw/glfw3.h	457;"	d
GLFW_JOYSTICK_16	mesh_visibility/glfw/glfw3.h	458;"	d
GLFW_JOYSTICK_2	mesh_visibility/glfw/glfw3.h	444;"	d
GLFW_JOYSTICK_3	mesh_visibility/glfw/glfw3.h	445;"	d
GLFW_JOYSTICK_4	mesh_visibility/glfw/glfw3.h	446;"	d
GLFW_JOYSTICK_5	mesh_visibility/glfw/glfw3.h	447;"	d
GLFW_JOYSTICK_6	mesh_visibility/glfw/glfw3.h	448;"	d
GLFW_JOYSTICK_7	mesh_visibility/glfw/glfw3.h	449;"	d
GLFW_JOYSTICK_8	mesh_visibility/glfw/glfw3.h	450;"	d
GLFW_JOYSTICK_9	mesh_visibility/glfw/glfw3.h	451;"	d
GLFW_JOYSTICK_LAST	mesh_visibility/glfw/glfw3.h	459;"	d
GLFW_KEY_0	mesh_visibility/glfw/glfw3.h	275;"	d
GLFW_KEY_1	mesh_visibility/glfw/glfw3.h	276;"	d
GLFW_KEY_2	mesh_visibility/glfw/glfw3.h	277;"	d
GLFW_KEY_3	mesh_visibility/glfw/glfw3.h	278;"	d
GLFW_KEY_4	mesh_visibility/glfw/glfw3.h	279;"	d
GLFW_KEY_5	mesh_visibility/glfw/glfw3.h	280;"	d
GLFW_KEY_6	mesh_visibility/glfw/glfw3.h	281;"	d
GLFW_KEY_7	mesh_visibility/glfw/glfw3.h	282;"	d
GLFW_KEY_8	mesh_visibility/glfw/glfw3.h	283;"	d
GLFW_KEY_9	mesh_visibility/glfw/glfw3.h	284;"	d
GLFW_KEY_A	mesh_visibility/glfw/glfw3.h	287;"	d
GLFW_KEY_APOSTROPHE	mesh_visibility/glfw/glfw3.h	270;"	d
GLFW_KEY_B	mesh_visibility/glfw/glfw3.h	288;"	d
GLFW_KEY_BACKSLASH	mesh_visibility/glfw/glfw3.h	314;"	d
GLFW_KEY_BACKSPACE	mesh_visibility/glfw/glfw3.h	324;"	d
GLFW_KEY_C	mesh_visibility/glfw/glfw3.h	289;"	d
GLFW_KEY_CAPS_LOCK	mesh_visibility/glfw/glfw3.h	335;"	d
GLFW_KEY_COMMA	mesh_visibility/glfw/glfw3.h	271;"	d
GLFW_KEY_D	mesh_visibility/glfw/glfw3.h	290;"	d
GLFW_KEY_DELETE	mesh_visibility/glfw/glfw3.h	326;"	d
GLFW_KEY_DOWN	mesh_visibility/glfw/glfw3.h	329;"	d
GLFW_KEY_E	mesh_visibility/glfw/glfw3.h	291;"	d
GLFW_KEY_END	mesh_visibility/glfw/glfw3.h	334;"	d
GLFW_KEY_ENTER	mesh_visibility/glfw/glfw3.h	322;"	d
GLFW_KEY_EQUAL	mesh_visibility/glfw/glfw3.h	286;"	d
GLFW_KEY_ESCAPE	mesh_visibility/glfw/glfw3.h	321;"	d
GLFW_KEY_F	mesh_visibility/glfw/glfw3.h	292;"	d
GLFW_KEY_F1	mesh_visibility/glfw/glfw3.h	340;"	d
GLFW_KEY_F10	mesh_visibility/glfw/glfw3.h	349;"	d
GLFW_KEY_F11	mesh_visibility/glfw/glfw3.h	350;"	d
GLFW_KEY_F12	mesh_visibility/glfw/glfw3.h	351;"	d
GLFW_KEY_F13	mesh_visibility/glfw/glfw3.h	352;"	d
GLFW_KEY_F14	mesh_visibility/glfw/glfw3.h	353;"	d
GLFW_KEY_F15	mesh_visibility/glfw/glfw3.h	354;"	d
GLFW_KEY_F16	mesh_visibility/glfw/glfw3.h	355;"	d
GLFW_KEY_F17	mesh_visibility/glfw/glfw3.h	356;"	d
GLFW_KEY_F18	mesh_visibility/glfw/glfw3.h	357;"	d
GLFW_KEY_F19	mesh_visibility/glfw/glfw3.h	358;"	d
GLFW_KEY_F2	mesh_visibility/glfw/glfw3.h	341;"	d
GLFW_KEY_F20	mesh_visibility/glfw/glfw3.h	359;"	d
GLFW_KEY_F21	mesh_visibility/glfw/glfw3.h	360;"	d
GLFW_KEY_F22	mesh_visibility/glfw/glfw3.h	361;"	d
GLFW_KEY_F23	mesh_visibility/glfw/glfw3.h	362;"	d
GLFW_KEY_F24	mesh_visibility/glfw/glfw3.h	363;"	d
GLFW_KEY_F25	mesh_visibility/glfw/glfw3.h	364;"	d
GLFW_KEY_F3	mesh_visibility/glfw/glfw3.h	342;"	d
GLFW_KEY_F4	mesh_visibility/glfw/glfw3.h	343;"	d
GLFW_KEY_F5	mesh_visibility/glfw/glfw3.h	344;"	d
GLFW_KEY_F6	mesh_visibility/glfw/glfw3.h	345;"	d
GLFW_KEY_F7	mesh_visibility/glfw/glfw3.h	346;"	d
GLFW_KEY_F8	mesh_visibility/glfw/glfw3.h	347;"	d
GLFW_KEY_F9	mesh_visibility/glfw/glfw3.h	348;"	d
GLFW_KEY_G	mesh_visibility/glfw/glfw3.h	293;"	d
GLFW_KEY_GRAVE_ACCENT	mesh_visibility/glfw/glfw3.h	316;"	d
GLFW_KEY_H	mesh_visibility/glfw/glfw3.h	294;"	d
GLFW_KEY_HOME	mesh_visibility/glfw/glfw3.h	333;"	d
GLFW_KEY_I	mesh_visibility/glfw/glfw3.h	295;"	d
GLFW_KEY_INSERT	mesh_visibility/glfw/glfw3.h	325;"	d
GLFW_KEY_J	mesh_visibility/glfw/glfw3.h	296;"	d
GLFW_KEY_K	mesh_visibility/glfw/glfw3.h	297;"	d
GLFW_KEY_KP_0	mesh_visibility/glfw/glfw3.h	365;"	d
GLFW_KEY_KP_1	mesh_visibility/glfw/glfw3.h	366;"	d
GLFW_KEY_KP_2	mesh_visibility/glfw/glfw3.h	367;"	d
GLFW_KEY_KP_3	mesh_visibility/glfw/glfw3.h	368;"	d
GLFW_KEY_KP_4	mesh_visibility/glfw/glfw3.h	369;"	d
GLFW_KEY_KP_5	mesh_visibility/glfw/glfw3.h	370;"	d
GLFW_KEY_KP_6	mesh_visibility/glfw/glfw3.h	371;"	d
GLFW_KEY_KP_7	mesh_visibility/glfw/glfw3.h	372;"	d
GLFW_KEY_KP_8	mesh_visibility/glfw/glfw3.h	373;"	d
GLFW_KEY_KP_9	mesh_visibility/glfw/glfw3.h	374;"	d
GLFW_KEY_KP_ADD	mesh_visibility/glfw/glfw3.h	379;"	d
GLFW_KEY_KP_DECIMAL	mesh_visibility/glfw/glfw3.h	375;"	d
GLFW_KEY_KP_DIVIDE	mesh_visibility/glfw/glfw3.h	376;"	d
GLFW_KEY_KP_ENTER	mesh_visibility/glfw/glfw3.h	380;"	d
GLFW_KEY_KP_EQUAL	mesh_visibility/glfw/glfw3.h	381;"	d
GLFW_KEY_KP_MULTIPLY	mesh_visibility/glfw/glfw3.h	377;"	d
GLFW_KEY_KP_SUBTRACT	mesh_visibility/glfw/glfw3.h	378;"	d
GLFW_KEY_L	mesh_visibility/glfw/glfw3.h	298;"	d
GLFW_KEY_LAST	mesh_visibility/glfw/glfw3.h	391;"	d
GLFW_KEY_LEFT	mesh_visibility/glfw/glfw3.h	328;"	d
GLFW_KEY_LEFT_ALT	mesh_visibility/glfw/glfw3.h	384;"	d
GLFW_KEY_LEFT_BRACKET	mesh_visibility/glfw/glfw3.h	313;"	d
GLFW_KEY_LEFT_CONTROL	mesh_visibility/glfw/glfw3.h	383;"	d
GLFW_KEY_LEFT_SHIFT	mesh_visibility/glfw/glfw3.h	382;"	d
GLFW_KEY_LEFT_SUPER	mesh_visibility/glfw/glfw3.h	385;"	d
GLFW_KEY_M	mesh_visibility/glfw/glfw3.h	299;"	d
GLFW_KEY_MENU	mesh_visibility/glfw/glfw3.h	390;"	d
GLFW_KEY_MINUS	mesh_visibility/glfw/glfw3.h	272;"	d
GLFW_KEY_N	mesh_visibility/glfw/glfw3.h	300;"	d
GLFW_KEY_NUM_LOCK	mesh_visibility/glfw/glfw3.h	337;"	d
GLFW_KEY_O	mesh_visibility/glfw/glfw3.h	301;"	d
GLFW_KEY_P	mesh_visibility/glfw/glfw3.h	302;"	d
GLFW_KEY_PAGE_DOWN	mesh_visibility/glfw/glfw3.h	332;"	d
GLFW_KEY_PAGE_UP	mesh_visibility/glfw/glfw3.h	331;"	d
GLFW_KEY_PAUSE	mesh_visibility/glfw/glfw3.h	339;"	d
GLFW_KEY_PERIOD	mesh_visibility/glfw/glfw3.h	273;"	d
GLFW_KEY_PRINT_SCREEN	mesh_visibility/glfw/glfw3.h	338;"	d
GLFW_KEY_Q	mesh_visibility/glfw/glfw3.h	303;"	d
GLFW_KEY_R	mesh_visibility/glfw/glfw3.h	304;"	d
GLFW_KEY_RIGHT	mesh_visibility/glfw/glfw3.h	327;"	d
GLFW_KEY_RIGHT_ALT	mesh_visibility/glfw/glfw3.h	388;"	d
GLFW_KEY_RIGHT_BRACKET	mesh_visibility/glfw/glfw3.h	315;"	d
GLFW_KEY_RIGHT_CONTROL	mesh_visibility/glfw/glfw3.h	387;"	d
GLFW_KEY_RIGHT_SHIFT	mesh_visibility/glfw/glfw3.h	386;"	d
GLFW_KEY_RIGHT_SUPER	mesh_visibility/glfw/glfw3.h	389;"	d
GLFW_KEY_S	mesh_visibility/glfw/glfw3.h	305;"	d
GLFW_KEY_SCROLL_LOCK	mesh_visibility/glfw/glfw3.h	336;"	d
GLFW_KEY_SEMICOLON	mesh_visibility/glfw/glfw3.h	285;"	d
GLFW_KEY_SLASH	mesh_visibility/glfw/glfw3.h	274;"	d
GLFW_KEY_SPACE	mesh_visibility/glfw/glfw3.h	269;"	d
GLFW_KEY_T	mesh_visibility/glfw/glfw3.h	306;"	d
GLFW_KEY_TAB	mesh_visibility/glfw/glfw3.h	323;"	d
GLFW_KEY_U	mesh_visibility/glfw/glfw3.h	307;"	d
GLFW_KEY_UNKNOWN	mesh_visibility/glfw/glfw3.h	266;"	d
GLFW_KEY_UP	mesh_visibility/glfw/glfw3.h	330;"	d
GLFW_KEY_V	mesh_visibility/glfw/glfw3.h	308;"	d
GLFW_KEY_W	mesh_visibility/glfw/glfw3.h	309;"	d
GLFW_KEY_WORLD_1	mesh_visibility/glfw/glfw3.h	317;"	d
GLFW_KEY_WORLD_2	mesh_visibility/glfw/glfw3.h	318;"	d
GLFW_KEY_X	mesh_visibility/glfw/glfw3.h	310;"	d
GLFW_KEY_Y	mesh_visibility/glfw/glfw3.h	311;"	d
GLFW_KEY_Z	mesh_visibility/glfw/glfw3.h	312;"	d
GLFW_LOSE_CONTEXT_ON_RESET	mesh_visibility/glfw/glfw3.h	632;"	d
GLFW_MOD_ALT	mesh_visibility/glfw/glfw3.h	410;"	d
GLFW_MOD_CONTROL	mesh_visibility/glfw/glfw3.h	407;"	d
GLFW_MOD_SHIFT	mesh_visibility/glfw/glfw3.h	404;"	d
GLFW_MOD_SUPER	mesh_visibility/glfw/glfw3.h	413;"	d
GLFW_MOUSE_BUTTON_1	mesh_visibility/glfw/glfw3.h	423;"	d
GLFW_MOUSE_BUTTON_2	mesh_visibility/glfw/glfw3.h	424;"	d
GLFW_MOUSE_BUTTON_3	mesh_visibility/glfw/glfw3.h	425;"	d
GLFW_MOUSE_BUTTON_4	mesh_visibility/glfw/glfw3.h	426;"	d
GLFW_MOUSE_BUTTON_5	mesh_visibility/glfw/glfw3.h	427;"	d
GLFW_MOUSE_BUTTON_6	mesh_visibility/glfw/glfw3.h	428;"	d
GLFW_MOUSE_BUTTON_7	mesh_visibility/glfw/glfw3.h	429;"	d
GLFW_MOUSE_BUTTON_8	mesh_visibility/glfw/glfw3.h	430;"	d
GLFW_MOUSE_BUTTON_LAST	mesh_visibility/glfw/glfw3.h	431;"	d
GLFW_MOUSE_BUTTON_LEFT	mesh_visibility/glfw/glfw3.h	432;"	d
GLFW_MOUSE_BUTTON_MIDDLE	mesh_visibility/glfw/glfw3.h	434;"	d
GLFW_MOUSE_BUTTON_RIGHT	mesh_visibility/glfw/glfw3.h	433;"	d
GLFW_NOT_INITIALIZED	mesh_visibility/glfw/glfw3.h	477;"	d
GLFW_NO_CURRENT_CONTEXT	mesh_visibility/glfw/glfw3.h	488;"	d
GLFW_NO_RESET_NOTIFICATION	mesh_visibility/glfw/glfw3.h	631;"	d
GLFW_NO_ROBUSTNESS	mesh_visibility/glfw/glfw3.h	630;"	d
GLFW_OPENGL_ANY_PROFILE	mesh_visibility/glfw/glfw3.h	634;"	d
GLFW_OPENGL_API	mesh_visibility/glfw/glfw3.h	627;"	d
GLFW_OPENGL_COMPAT_PROFILE	mesh_visibility/glfw/glfw3.h	636;"	d
GLFW_OPENGL_CORE_PROFILE	mesh_visibility/glfw/glfw3.h	635;"	d
GLFW_OPENGL_DEBUG_CONTEXT	mesh_visibility/glfw/glfw3.h	623;"	d
GLFW_OPENGL_ES_API	mesh_visibility/glfw/glfw3.h	628;"	d
GLFW_OPENGL_FORWARD_COMPAT	mesh_visibility/glfw/glfw3.h	622;"	d
GLFW_OPENGL_PROFILE	mesh_visibility/glfw/glfw3.h	624;"	d
GLFW_OUT_OF_MEMORY	mesh_visibility/glfw/glfw3.h	519;"	d
GLFW_PLATFORM_ERROR	mesh_visibility/glfw/glfw3.h	569;"	d
GLFW_PRESS	mesh_visibility/glfw/glfw3.h	232;"	d
GLFW_RED_BITS	mesh_visibility/glfw/glfw3.h	600;"	d
GLFW_REFRESH_RATE	mesh_visibility/glfw/glfw3.h	614;"	d
GLFW_RELEASE	mesh_visibility/glfw/glfw3.h	225;"	d
GLFW_RELEASE_BEHAVIOR_FLUSH	mesh_visibility/glfw/glfw3.h	647;"	d
GLFW_RELEASE_BEHAVIOR_NONE	mesh_visibility/glfw/glfw3.h	648;"	d
GLFW_REPEAT	mesh_visibility/glfw/glfw3.h	239;"	d
GLFW_RESIZABLE	mesh_visibility/glfw/glfw3.h	594;"	d
GLFW_SAMPLES	mesh_visibility/glfw/glfw3.h	612;"	d
GLFW_SRGB_CAPABLE	mesh_visibility/glfw/glfw3.h	613;"	d
GLFW_STENCIL_BITS	mesh_visibility/glfw/glfw3.h	605;"	d
GLFW_STEREO	mesh_visibility/glfw/glfw3.h	611;"	d
GLFW_STICKY_KEYS	mesh_visibility/glfw/glfw3.h	639;"	d
GLFW_STICKY_MOUSE_BUTTONS	mesh_visibility/glfw/glfw3.h	640;"	d
GLFW_VERSION_MAJOR	mesh_visibility/glfw/glfw3.h	200;"	d
GLFW_VERSION_MINOR	mesh_visibility/glfw/glfw3.h	207;"	d
GLFW_VERSION_REVISION	mesh_visibility/glfw/glfw3.h	214;"	d
GLFW_VERSION_UNAVAILABLE	mesh_visibility/glfw/glfw3.h	557;"	d
GLFW_VISIBLE	mesh_visibility/glfw/glfw3.h	595;"	d
GLFW_VRESIZE_CURSOR	mesh_visibility/glfw/glfw3.h	686;"	d
GLFW_WINGDIAPI_DEFINED	mesh_visibility/glfw/glfw3.h	3342;"	d
GLFW_WINGDIAPI_DEFINED	mesh_visibility/glfw/glfw3.h	95;"	d
GLFWcharfun	mesh_visibility/glfw/glfw3.h	/^typedef void (* GLFWcharfun)(GLFWwindow*,unsigned int);$/;"	t
GLFWcharmodsfun	mesh_visibility/glfw/glfw3.h	/^typedef void (* GLFWcharmodsfun)(GLFWwindow*,unsigned int,int);$/;"	t
GLFWcursor	mesh_visibility/glfw/glfw3.h	/^typedef struct GLFWcursor GLFWcursor;$/;"	t	typeref:struct:GLFWcursor
GLFWcursorenterfun	mesh_visibility/glfw/glfw3.h	/^typedef void (* GLFWcursorenterfun)(GLFWwindow*,int);$/;"	t
GLFWcursorposfun	mesh_visibility/glfw/glfw3.h	/^typedef void (* GLFWcursorposfun)(GLFWwindow*,double,double);$/;"	t
GLFWdropfun	mesh_visibility/glfw/glfw3.h	/^typedef void (* GLFWdropfun)(GLFWwindow*,int,const char**);$/;"	t
GLFWerrorfun	mesh_visibility/glfw/glfw3.h	/^typedef void (* GLFWerrorfun)(int,const char*);$/;"	t
GLFWframebuffersizefun	mesh_visibility/glfw/glfw3.h	/^typedef void (* GLFWframebuffersizefun)(GLFWwindow*,int,int);$/;"	t
GLFWgammaramp	mesh_visibility/glfw/glfw3.h	/^typedef struct GLFWgammaramp$/;"	s
GLFWgammaramp	mesh_visibility/glfw/glfw3.h	/^} GLFWgammaramp;$/;"	t	typeref:struct:GLFWgammaramp
GLFWglproc	mesh_visibility/glfw/glfw3.h	/^typedef void (*GLFWglproc)(void);$/;"	t
GLFWimage	mesh_visibility/glfw/glfw3.h	/^typedef struct GLFWimage$/;"	s
GLFWimage	mesh_visibility/glfw/glfw3.h	/^} GLFWimage;$/;"	t	typeref:struct:GLFWimage
GLFWkeyfun	mesh_visibility/glfw/glfw3.h	/^typedef void (* GLFWkeyfun)(GLFWwindow*,int,int,int,int);$/;"	t
GLFWmonitor	mesh_visibility/glfw/glfw3.h	/^typedef struct GLFWmonitor GLFWmonitor;$/;"	t	typeref:struct:GLFWmonitor
GLFWmonitorfun	mesh_visibility/glfw/glfw3.h	/^typedef void (* GLFWmonitorfun)(GLFWmonitor*,int);$/;"	t
GLFWmousebuttonfun	mesh_visibility/glfw/glfw3.h	/^typedef void (* GLFWmousebuttonfun)(GLFWwindow*,int,int,int);$/;"	t
GLFWscrollfun	mesh_visibility/glfw/glfw3.h	/^typedef void (* GLFWscrollfun)(GLFWwindow*,double,double);$/;"	t
GLFWvidmode	mesh_visibility/glfw/glfw3.h	/^typedef struct GLFWvidmode$/;"	s
GLFWvidmode	mesh_visibility/glfw/glfw3.h	/^} GLFWvidmode;$/;"	t	typeref:struct:GLFWvidmode
GLFWwindow	mesh_visibility/glfw/glfw3.h	/^typedef struct GLFWwindow GLFWwindow;$/;"	t	typeref:struct:GLFWwindow
GLFWwindowclosefun	mesh_visibility/glfw/glfw3.h	/^typedef void (* GLFWwindowclosefun)(GLFWwindow*);$/;"	t
GLFWwindowfocusfun	mesh_visibility/glfw/glfw3.h	/^typedef void (* GLFWwindowfocusfun)(GLFWwindow*,int);$/;"	t
GLFWwindowiconifyfun	mesh_visibility/glfw/glfw3.h	/^typedef void (* GLFWwindowiconifyfun)(GLFWwindow*,int);$/;"	t
GLFWwindowposfun	mesh_visibility/glfw/glfw3.h	/^typedef void (* GLFWwindowposfun)(GLFWwindow*,int,int);$/;"	t
GLFWwindowrefreshfun	mesh_visibility/glfw/glfw3.h	/^typedef void (* GLFWwindowrefreshfun)(GLFWwindow*);$/;"	t
GLFWwindowsizefun	mesh_visibility/glfw/glfw3.h	/^typedef void (* GLFWwindowsizefun)(GLFWwindow*,int,int);$/;"	t
GLM_ALIGN	mesh_visibility/glm/glm/detail/setup.hpp	905;"	d
GLM_ALIGN	mesh_visibility/glm/glm/detail/setup.hpp	912;"	d
GLM_ALIGN	mesh_visibility/glm/glm/detail/setup.hpp	919;"	d
GLM_ALIGNED_STRUCT	mesh_visibility/glm/glm/detail/setup.hpp	906;"	d
GLM_ALIGNED_STRUCT	mesh_visibility/glm/glm/detail/setup.hpp	913;"	d
GLM_ALIGNED_STRUCT	mesh_visibility/glm/glm/detail/setup.hpp	920;"	d
GLM_ALIGNED_TYPEDEF	mesh_visibility/glm/glm/detail/setup.hpp	907;"	d
GLM_ALIGNED_TYPEDEF	mesh_visibility/glm/glm/detail/setup.hpp	914;"	d
GLM_ALIGNED_TYPEDEF	mesh_visibility/glm/glm/detail/setup.hpp	921;"	d
GLM_ARCH	mesh_visibility/glm/glm/detail/setup.hpp	384;"	d
GLM_ARCH	mesh_visibility/glm/glm/detail/setup.hpp	386;"	d
GLM_ARCH	mesh_visibility/glm/glm/detail/setup.hpp	388;"	d
GLM_ARCH	mesh_visibility/glm/glm/detail/setup.hpp	390;"	d
GLM_ARCH	mesh_visibility/glm/glm/detail/setup.hpp	392;"	d
GLM_ARCH	mesh_visibility/glm/glm/detail/setup.hpp	394;"	d
GLM_ARCH	mesh_visibility/glm/glm/detail/setup.hpp	397;"	d
GLM_ARCH	mesh_visibility/glm/glm/detail/setup.hpp	399;"	d
GLM_ARCH	mesh_visibility/glm/glm/detail/setup.hpp	401;"	d
GLM_ARCH	mesh_visibility/glm/glm/detail/setup.hpp	403;"	d
GLM_ARCH	mesh_visibility/glm/glm/detail/setup.hpp	405;"	d
GLM_ARCH	mesh_visibility/glm/glm/detail/setup.hpp	409;"	d
GLM_ARCH	mesh_visibility/glm/glm/detail/setup.hpp	411;"	d
GLM_ARCH	mesh_visibility/glm/glm/detail/setup.hpp	413;"	d
GLM_ARCH	mesh_visibility/glm/glm/detail/setup.hpp	415;"	d
GLM_ARCH	mesh_visibility/glm/glm/detail/setup.hpp	417;"	d
GLM_ARCH	mesh_visibility/glm/glm/detail/setup.hpp	421;"	d
GLM_ARCH	mesh_visibility/glm/glm/detail/setup.hpp	423;"	d
GLM_ARCH	mesh_visibility/glm/glm/detail/setup.hpp	425;"	d
GLM_ARCH	mesh_visibility/glm/glm/detail/setup.hpp	427;"	d
GLM_ARCH	mesh_visibility/glm/glm/detail/setup.hpp	429;"	d
GLM_ARCH	mesh_visibility/glm/glm/detail/setup.hpp	431;"	d
GLM_ARCH	mesh_visibility/glm/glm/detail/setup.hpp	434;"	d
GLM_ARCH_ARM	mesh_visibility/glm/glm/detail/setup.hpp	375;"	d
GLM_ARCH_AVX	mesh_visibility/glm/glm/detail/setup.hpp	380;"	d
GLM_ARCH_AVX2	mesh_visibility/glm/glm/detail/setup.hpp	381;"	d
GLM_ARCH_PURE	mesh_visibility/glm/glm/detail/setup.hpp	374;"	d
GLM_ARCH_SSE2	mesh_visibility/glm/glm/detail/setup.hpp	377;"	d
GLM_ARCH_SSE3	mesh_visibility/glm/glm/detail/setup.hpp	378;"	d
GLM_ARCH_SSE4	mesh_visibility/glm/glm/detail/setup.hpp	379;"	d
GLM_ARCH_X86	mesh_visibility/glm/glm/detail/setup.hpp	376;"	d
GLM_COMPILER	mesh_visibility/glm/glm/detail/setup.hpp	191;"	d
GLM_COMPILER	mesh_visibility/glm/glm/detail/setup.hpp	195;"	d
GLM_COMPILER	mesh_visibility/glm/glm/detail/setup.hpp	197;"	d
GLM_COMPILER	mesh_visibility/glm/glm/detail/setup.hpp	199;"	d
GLM_COMPILER	mesh_visibility/glm/glm/detail/setup.hpp	201;"	d
GLM_COMPILER	mesh_visibility/glm/glm/detail/setup.hpp	203;"	d
GLM_COMPILER	mesh_visibility/glm/glm/detail/setup.hpp	205;"	d
GLM_COMPILER	mesh_visibility/glm/glm/detail/setup.hpp	207;"	d
GLM_COMPILER	mesh_visibility/glm/glm/detail/setup.hpp	218;"	d
GLM_COMPILER	mesh_visibility/glm/glm/detail/setup.hpp	226;"	d
GLM_COMPILER	mesh_visibility/glm/glm/detail/setup.hpp	228;"	d
GLM_COMPILER	mesh_visibility/glm/glm/detail/setup.hpp	230;"	d
GLM_COMPILER	mesh_visibility/glm/glm/detail/setup.hpp	232;"	d
GLM_COMPILER	mesh_visibility/glm/glm/detail/setup.hpp	234;"	d
GLM_COMPILER	mesh_visibility/glm/glm/detail/setup.hpp	241;"	d
GLM_COMPILER	mesh_visibility/glm/glm/detail/setup.hpp	243;"	d
GLM_COMPILER	mesh_visibility/glm/glm/detail/setup.hpp	245;"	d
GLM_COMPILER	mesh_visibility/glm/glm/detail/setup.hpp	247;"	d
GLM_COMPILER	mesh_visibility/glm/glm/detail/setup.hpp	249;"	d
GLM_COMPILER	mesh_visibility/glm/glm/detail/setup.hpp	251;"	d
GLM_COMPILER	mesh_visibility/glm/glm/detail/setup.hpp	253;"	d
GLM_COMPILER	mesh_visibility/glm/glm/detail/setup.hpp	255;"	d
GLM_COMPILER	mesh_visibility/glm/glm/detail/setup.hpp	257;"	d
GLM_COMPILER	mesh_visibility/glm/glm/detail/setup.hpp	261;"	d
GLM_COMPILER	mesh_visibility/glm/glm/detail/setup.hpp	263;"	d
GLM_COMPILER	mesh_visibility/glm/glm/detail/setup.hpp	265;"	d
GLM_COMPILER	mesh_visibility/glm/glm/detail/setup.hpp	267;"	d
GLM_COMPILER	mesh_visibility/glm/glm/detail/setup.hpp	269;"	d
GLM_COMPILER	mesh_visibility/glm/glm/detail/setup.hpp	271;"	d
GLM_COMPILER	mesh_visibility/glm/glm/detail/setup.hpp	273;"	d
GLM_COMPILER	mesh_visibility/glm/glm/detail/setup.hpp	275;"	d
GLM_COMPILER	mesh_visibility/glm/glm/detail/setup.hpp	277;"	d
GLM_COMPILER	mesh_visibility/glm/glm/detail/setup.hpp	279;"	d
GLM_COMPILER	mesh_visibility/glm/glm/detail/setup.hpp	281;"	d
GLM_COMPILER	mesh_visibility/glm/glm/detail/setup.hpp	283;"	d
GLM_COMPILER	mesh_visibility/glm/glm/detail/setup.hpp	290;"	d
GLM_COMPILER	mesh_visibility/glm/glm/detail/setup.hpp	292;"	d
GLM_COMPILER	mesh_visibility/glm/glm/detail/setup.hpp	294;"	d
GLM_COMPILER	mesh_visibility/glm/glm/detail/setup.hpp	296;"	d
GLM_COMPILER	mesh_visibility/glm/glm/detail/setup.hpp	298;"	d
GLM_COMPILER	mesh_visibility/glm/glm/detail/setup.hpp	300;"	d
GLM_COMPILER	mesh_visibility/glm/glm/detail/setup.hpp	302;"	d
GLM_COMPILER	mesh_visibility/glm/glm/detail/setup.hpp	304;"	d
GLM_COMPILER	mesh_visibility/glm/glm/detail/setup.hpp	306;"	d
GLM_COMPILER	mesh_visibility/glm/glm/detail/setup.hpp	308;"	d
GLM_COMPILER	mesh_visibility/glm/glm/detail/setup.hpp	310;"	d
GLM_COMPILER	mesh_visibility/glm/glm/detail/setup.hpp	312;"	d
GLM_COMPILER	mesh_visibility/glm/glm/detail/setup.hpp	314;"	d
GLM_COMPILER	mesh_visibility/glm/glm/detail/setup.hpp	318;"	d
GLM_COMPILER_APPLE_CLANG	mesh_visibility/glm/glm/detail/setup.hpp	176;"	d
GLM_COMPILER_APPLE_CLANG40	mesh_visibility/glm/glm/detail/setup.hpp	177;"	d
GLM_COMPILER_APPLE_CLANG41	mesh_visibility/glm/glm/detail/setup.hpp	178;"	d
GLM_COMPILER_APPLE_CLANG42	mesh_visibility/glm/glm/detail/setup.hpp	179;"	d
GLM_COMPILER_APPLE_CLANG50	mesh_visibility/glm/glm/detail/setup.hpp	180;"	d
GLM_COMPILER_APPLE_CLANG51	mesh_visibility/glm/glm/detail/setup.hpp	181;"	d
GLM_COMPILER_APPLE_CLANG60	mesh_visibility/glm/glm/detail/setup.hpp	182;"	d
GLM_COMPILER_APPLE_CLANG61	mesh_visibility/glm/glm/detail/setup.hpp	183;"	d
GLM_COMPILER_CUDA	mesh_visibility/glm/glm/detail/setup.hpp	154;"	d
GLM_COMPILER_CUDA40	mesh_visibility/glm/glm/detail/setup.hpp	155;"	d
GLM_COMPILER_CUDA41	mesh_visibility/glm/glm/detail/setup.hpp	156;"	d
GLM_COMPILER_CUDA42	mesh_visibility/glm/glm/detail/setup.hpp	157;"	d
GLM_COMPILER_CUDA50	mesh_visibility/glm/glm/detail/setup.hpp	158;"	d
GLM_COMPILER_CUDA60	mesh_visibility/glm/glm/detail/setup.hpp	159;"	d
GLM_COMPILER_CUDA65	mesh_visibility/glm/glm/detail/setup.hpp	160;"	d
GLM_COMPILER_CUDA70	mesh_visibility/glm/glm/detail/setup.hpp	161;"	d
GLM_COMPILER_CUDA75	mesh_visibility/glm/glm/detail/setup.hpp	162;"	d
GLM_COMPILER_GCC	mesh_visibility/glm/glm/detail/setup.hpp	141;"	d
GLM_COMPILER_GCC44	mesh_visibility/glm/glm/detail/setup.hpp	142;"	d
GLM_COMPILER_GCC45	mesh_visibility/glm/glm/detail/setup.hpp	143;"	d
GLM_COMPILER_GCC46	mesh_visibility/glm/glm/detail/setup.hpp	144;"	d
GLM_COMPILER_GCC47	mesh_visibility/glm/glm/detail/setup.hpp	145;"	d
GLM_COMPILER_GCC48	mesh_visibility/glm/glm/detail/setup.hpp	146;"	d
GLM_COMPILER_GCC49	mesh_visibility/glm/glm/detail/setup.hpp	147;"	d
GLM_COMPILER_GCC50	mesh_visibility/glm/glm/detail/setup.hpp	148;"	d
GLM_COMPILER_GCC51	mesh_visibility/glm/glm/detail/setup.hpp	149;"	d
GLM_COMPILER_GCC52	mesh_visibility/glm/glm/detail/setup.hpp	150;"	d
GLM_COMPILER_GCC53	mesh_visibility/glm/glm/detail/setup.hpp	151;"	d
GLM_COMPILER_INTEL	mesh_visibility/glm/glm/detail/setup.hpp	125;"	d
GLM_COMPILER_INTEL12	mesh_visibility/glm/glm/detail/setup.hpp	126;"	d
GLM_COMPILER_INTEL12_1	mesh_visibility/glm/glm/detail/setup.hpp	127;"	d
GLM_COMPILER_INTEL13	mesh_visibility/glm/glm/detail/setup.hpp	128;"	d
GLM_COMPILER_INTEL14	mesh_visibility/glm/glm/detail/setup.hpp	129;"	d
GLM_COMPILER_INTEL15	mesh_visibility/glm/glm/detail/setup.hpp	130;"	d
GLM_COMPILER_INTEL16	mesh_visibility/glm/glm/detail/setup.hpp	131;"	d
GLM_COMPILER_LLVM	mesh_visibility/glm/glm/detail/setup.hpp	165;"	d
GLM_COMPILER_LLVM32	mesh_visibility/glm/glm/detail/setup.hpp	166;"	d
GLM_COMPILER_LLVM33	mesh_visibility/glm/glm/detail/setup.hpp	167;"	d
GLM_COMPILER_LLVM34	mesh_visibility/glm/glm/detail/setup.hpp	168;"	d
GLM_COMPILER_LLVM35	mesh_visibility/glm/glm/detail/setup.hpp	169;"	d
GLM_COMPILER_LLVM36	mesh_visibility/glm/glm/detail/setup.hpp	170;"	d
GLM_COMPILER_LLVM37	mesh_visibility/glm/glm/detail/setup.hpp	171;"	d
GLM_COMPILER_LLVM38	mesh_visibility/glm/glm/detail/setup.hpp	172;"	d
GLM_COMPILER_LLVM39	mesh_visibility/glm/glm/detail/setup.hpp	173;"	d
GLM_COMPILER_UNKNOWN	mesh_visibility/glm/glm/detail/setup.hpp	122;"	d
GLM_COMPILER_VC	mesh_visibility/glm/glm/detail/setup.hpp	134;"	d
GLM_COMPILER_VC2010	mesh_visibility/glm/glm/detail/setup.hpp	135;"	d
GLM_COMPILER_VC2012	mesh_visibility/glm/glm/detail/setup.hpp	136;"	d
GLM_COMPILER_VC2013	mesh_visibility/glm/glm/detail/setup.hpp	137;"	d
GLM_COMPILER_VC2015	mesh_visibility/glm/glm/detail/setup.hpp	138;"	d
GLM_CONSTEXPR	mesh_visibility/glm/glm/detail/setup.hpp	939;"	d
GLM_CONSTEXPR	mesh_visibility/glm/glm/detail/setup.hpp	942;"	d
GLM_COUNTOF	mesh_visibility/glm/glm/detail/setup.hpp	1013;"	d
GLM_CUDA_FUNC_DECL	mesh_visibility/glm/glm/detail/setup.hpp	855;"	d
GLM_CUDA_FUNC_DECL	mesh_visibility/glm/glm/detail/setup.hpp	858;"	d
GLM_CUDA_FUNC_DEF	mesh_visibility/glm/glm/detail/setup.hpp	854;"	d
GLM_CUDA_FUNC_DEF	mesh_visibility/glm/glm/detail/setup.hpp	857;"	d
GLM_CXX11_ACCESS_CONTROL_SFINAE	mesh_visibility/glm/glm/detail/_features.hpp	297;"	d
GLM_CXX11_ALIAS_TEMPLATE	mesh_visibility/glm/glm/detail/_features.hpp	301;"	d
GLM_CXX11_ALIGNAS	mesh_visibility/glm/glm/detail/_features.hpp	305;"	d
GLM_CXX11_ATTRIBUTES	mesh_visibility/glm/glm/detail/_features.hpp	309;"	d
GLM_CXX11_AUTO_TYPE	mesh_visibility/glm/glm/detail/_features.hpp	401;"	d
GLM_CXX11_CONSTEXPR	mesh_visibility/glm/glm/detail/_features.hpp	313;"	d
GLM_CXX11_DECLTYPE	mesh_visibility/glm/glm/detail/_features.hpp	317;"	d
GLM_CXX11_DEFAULTED_FUNCTIONS	mesh_visibility/glm/glm/detail/_features.hpp	325;"	d
GLM_CXX11_DEFAULT_FUNCTION_TEMPLATE_ARGS	mesh_visibility/glm/glm/detail/_features.hpp	321;"	d
GLM_CXX11_DELEGATING_CONSTRUCTORS	mesh_visibility/glm/glm/detail/_features.hpp	329;"	d
GLM_CXX11_DELETED_FUNCTIONS	mesh_visibility/glm/glm/detail/_features.hpp	333;"	d
GLM_CXX11_EXPLICIT_CONVERSIONS	mesh_visibility/glm/glm/detail/_features.hpp	337;"	d
GLM_CXX11_GENERALIZED_INITIALIZERS	mesh_visibility/glm/glm/detail/_features.hpp	341;"	d
GLM_CXX11_IMPLICIT_MOVES	mesh_visibility/glm/glm/detail/_features.hpp	345;"	d
GLM_CXX11_INHERITING_CONSTRUCTORS	mesh_visibility/glm/glm/detail/_features.hpp	349;"	d
GLM_CXX11_INLINE_NAMESPACES	mesh_visibility/glm/glm/detail/_features.hpp	353;"	d
GLM_CXX11_LAMBDAS	mesh_visibility/glm/glm/detail/_features.hpp	357;"	d
GLM_CXX11_LOCAL_TYPE_TEMPLATE_ARGS	mesh_visibility/glm/glm/detail/_features.hpp	361;"	d
GLM_CXX11_NOEXCEPT	mesh_visibility/glm/glm/detail/_features.hpp	365;"	d
GLM_CXX11_NONSTATIC_MEMBER_INIT	mesh_visibility/glm/glm/detail/_features.hpp	369;"	d
GLM_CXX11_NULLPTR	mesh_visibility/glm/glm/detail/_features.hpp	373;"	d
GLM_CXX11_OVERRIDE_CONTROL	mesh_visibility/glm/glm/detail/_features.hpp	377;"	d
GLM_CXX11_RANGE_FOR	mesh_visibility/glm/glm/detail/_features.hpp	385;"	d
GLM_CXX11_RAW_STRING_LITERALS	mesh_visibility/glm/glm/detail/_features.hpp	389;"	d
GLM_CXX11_REFERENCE_QUALIFIED_FUNCTIONS	mesh_visibility/glm/glm/detail/_features.hpp	381;"	d
GLM_CXX11_RVALUE_REFERENCES	mesh_visibility/glm/glm/detail/_features.hpp	393;"	d
GLM_CXX11_STATIC_ASSERT	mesh_visibility/glm/glm/detail/_features.hpp	284;"	d
GLM_CXX11_STATIC_ASSERT	mesh_visibility/glm/glm/detail/_features.hpp	397;"	d
GLM_CXX11_STRONG_ENUMS	mesh_visibility/glm/glm/detail/_features.hpp	405;"	d
GLM_CXX11_TRAILING_RETURN	mesh_visibility/glm/glm/detail/_features.hpp	409;"	d
GLM_CXX11_UNICODE_LITERALS	mesh_visibility/glm/glm/detail/_features.hpp	413;"	d
GLM_CXX11_UNRESTRICTED_UNIONS	mesh_visibility/glm/glm/detail/_features.hpp	417;"	d
GLM_CXX11_USER_LITERALS	mesh_visibility/glm/glm/detail/_features.hpp	421;"	d
GLM_CXX11_VARIADIC_TEMPLATES	mesh_visibility/glm/glm/detail/_features.hpp	425;"	d
GLM_CXX98_EXCEPTIONS	mesh_visibility/glm/glm/detail/_features.hpp	289;"	d
GLM_CXX98_RTTI	mesh_visibility/glm/glm/detail/_features.hpp	293;"	d
GLM_DEFAULT	mesh_visibility/glm/glm/detail/setup.hpp	927;"	d
GLM_DEFAULT	mesh_visibility/glm/glm/detail/setup.hpp	934;"	d
GLM_DEFAULT	mesh_visibility/glm/glm/detail/type_mat2x2.hpp	/^		GLM_FUNC_DECL tmat2x2(tmat2x2<T, P> const & m) GLM_DEFAULT;$/;"	m	struct:glm::tmat2x2
GLM_DEFAULT	mesh_visibility/glm/glm/detail/type_mat2x2.hpp	/^		GLM_FUNC_DECL tmat2x2<T, P> & operator=(tmat2x2<T, P> const & v) GLM_DEFAULT;$/;"	m	struct:glm::tmat2x2
GLM_DEFAULT	mesh_visibility/glm/glm/detail/type_mat2x3.hpp	/^		GLM_FUNC_DECL tmat2x3(tmat2x3<T, P> const & m) GLM_DEFAULT;$/;"	m	struct:glm::tmat2x3
GLM_DEFAULT	mesh_visibility/glm/glm/detail/type_mat2x3.hpp	/^		GLM_FUNC_DECL tmat2x3<T, P> & operator=(tmat2x3<T, P> const & m) GLM_DEFAULT;$/;"	m	struct:glm::tmat2x3
GLM_DEFAULT	mesh_visibility/glm/glm/detail/type_mat2x4.hpp	/^		GLM_FUNC_DECL tmat2x4(tmat2x4<T, P> const & m) GLM_DEFAULT;$/;"	m	struct:glm::tmat2x4
GLM_DEFAULT	mesh_visibility/glm/glm/detail/type_mat2x4.hpp	/^		GLM_FUNC_DECL tmat2x4<T, P> & operator=(tmat2x4<T, P> const & m) GLM_DEFAULT;$/;"	m	struct:glm::tmat2x4
GLM_DEFAULT	mesh_visibility/glm/glm/detail/type_mat3x2.hpp	/^		GLM_FUNC_DECL tmat3x2(tmat3x2<T, P> const & m) GLM_DEFAULT;$/;"	m	struct:glm::tmat3x2
GLM_DEFAULT	mesh_visibility/glm/glm/detail/type_mat3x2.hpp	/^		GLM_FUNC_DECL tmat3x2<T, P> & operator=(tmat3x2<T, P> const & m) GLM_DEFAULT;$/;"	m	struct:glm::tmat3x2
GLM_DEFAULT	mesh_visibility/glm/glm/detail/type_mat3x3.hpp	/^		GLM_FUNC_DECL tmat3x3(tmat3x3<T, P> const & m) GLM_DEFAULT;$/;"	m	struct:glm::tmat3x3
GLM_DEFAULT	mesh_visibility/glm/glm/detail/type_mat3x3.hpp	/^		GLM_FUNC_DECL tmat3x3<T, P> & operator=(tmat3x3<T, P> const & m) GLM_DEFAULT;$/;"	m	struct:glm::tmat3x3
GLM_DEFAULT	mesh_visibility/glm/glm/detail/type_mat3x4.hpp	/^		GLM_FUNC_DECL tmat3x4(tmat3x4<T, P> const & m) GLM_DEFAULT;$/;"	m	struct:glm::tmat3x4
GLM_DEFAULT	mesh_visibility/glm/glm/detail/type_mat3x4.hpp	/^		GLM_FUNC_DECL tmat3x4<T, P> & operator=(tmat3x4<T, P> const & m) GLM_DEFAULT;$/;"	m	struct:glm::tmat3x4
GLM_DEFAULT	mesh_visibility/glm/glm/detail/type_mat4x2.hpp	/^		GLM_FUNC_DECL tmat4x2(tmat4x2<T, P> const & m) GLM_DEFAULT;$/;"	m	struct:glm::tmat4x2
GLM_DEFAULT	mesh_visibility/glm/glm/detail/type_mat4x2.hpp	/^		GLM_FUNC_DECL tmat4x2<T, P> & operator=(tmat4x2<T, P> const & m) GLM_DEFAULT;$/;"	m	struct:glm::tmat4x2
GLM_DEFAULT	mesh_visibility/glm/glm/detail/type_mat4x3.hpp	/^		GLM_FUNC_DECL tmat4x3(tmat4x3<T, P> const & m) GLM_DEFAULT;$/;"	m	struct:glm::tmat4x3
GLM_DEFAULT	mesh_visibility/glm/glm/detail/type_mat4x3.hpp	/^		GLM_FUNC_DECL tmat4x3<T, P> & operator=(tmat4x3<T, P> const & m) GLM_DEFAULT;$/;"	m	struct:glm::tmat4x3
GLM_DEFAULT	mesh_visibility/glm/glm/detail/type_mat4x4.hpp	/^		GLM_FUNC_DECL tmat4x4(tmat4x4<T, P> const & m) GLM_DEFAULT;$/;"	m	struct:glm::tmat4x4
GLM_DEFAULT	mesh_visibility/glm/glm/detail/type_mat4x4.hpp	/^		GLM_FUNC_DECL tmat4x4<T, P> & operator=(tmat4x4<T, P> const & m) GLM_DEFAULT;$/;"	m	struct:glm::tmat4x4
GLM_DEFAULT	mesh_visibility/glm/glm/detail/type_vec1.hpp	/^		GLM_FUNC_DECL tvec1(tvec1<T, P> const & v) GLM_DEFAULT;$/;"	m	struct:glm::tvec1
GLM_DEFAULT	mesh_visibility/glm/glm/detail/type_vec1.hpp	/^		GLM_FUNC_DECL tvec1<T, P> & operator=(tvec1<T, P> const & v) GLM_DEFAULT;$/;"	m	struct:glm::tvec1
GLM_DEFAULT	mesh_visibility/glm/glm/detail/type_vec2.hpp	/^		GLM_FUNC_DECL tvec2(tvec2<T, P> const & v) GLM_DEFAULT;$/;"	m	struct:glm::tvec2
GLM_DEFAULT	mesh_visibility/glm/glm/detail/type_vec2.hpp	/^		GLM_FUNC_DECL tvec2<T, P>& operator=(tvec2<T, P> const & v) GLM_DEFAULT;$/;"	m	struct:glm::tvec2
GLM_DEFAULT	mesh_visibility/glm/glm/detail/type_vec3.hpp	/^		GLM_FUNC_DECL tvec3(tvec3<T, P> const & v) GLM_DEFAULT;$/;"	m	struct:glm::tvec3
GLM_DEFAULT	mesh_visibility/glm/glm/detail/type_vec3.hpp	/^		GLM_FUNC_DECL tvec3<T, P> & operator=(tvec3<T, P> const & v) GLM_DEFAULT;$/;"	m	struct:glm::tvec3
GLM_DEFAULT	mesh_visibility/glm/glm/detail/type_vec4.hpp	/^		GLM_FUNC_DECL tvec4(tvec4<T, P> const & v) GLM_DEFAULT;$/;"	m	struct:glm::tvec4
GLM_DEFAULT	mesh_visibility/glm/glm/detail/type_vec4.hpp	/^		GLM_FUNC_DECL tvec4<T, P> & operator=(tvec4<T, P> const & v) GLM_DEFAULT;$/;"	m	struct:glm::tvec4
GLM_DEFAULT	mesh_visibility/glm/glm/gtc/quaternion.hpp	/^		GLM_FUNC_DECL tquat(tquat<T, P> const & q) GLM_DEFAULT;$/;"	m	struct:glm::tquat
GLM_DEFAULT	mesh_visibility/glm/glm/gtc/quaternion.hpp	/^		GLM_FUNC_DECL tquat<T, P> & operator=(tquat<T, P> const & m) GLM_DEFAULT;$/;"	m	struct:glm::tquat
GLM_DEFAULT	mesh_visibility/glm/glm/gtx/dual_quaternion.hpp	/^		GLM_FUNC_DECL tdualquat(tdualquat<T, P> const & d) GLM_DEFAULT;$/;"	m	struct:glm::tdualquat
GLM_DEFAULT	mesh_visibility/glm/glm/gtx/dual_quaternion.hpp	/^		GLM_FUNC_DECL tdualquat<T, P> & operator=(tdualquat<T, P> const & m) GLM_DEFAULT;$/;"	m	struct:glm::tdualquat
GLM_DEFAULT_CTOR	mesh_visibility/glm/glm/detail/setup.hpp	929;"	d
GLM_DEFAULT_CTOR	mesh_visibility/glm/glm/detail/setup.hpp	931;"	d
GLM_DEFAULT_CTOR	mesh_visibility/glm/glm/detail/setup.hpp	935;"	d
GLM_DEFAULT_CTOR	mesh_visibility/glm/glm/detail/type_mat2x2.hpp	/^		GLM_FUNC_DECL tmat2x2() GLM_DEFAULT_CTOR;$/;"	m	struct:glm::tmat2x2
GLM_DEFAULT_CTOR	mesh_visibility/glm/glm/detail/type_mat2x3.hpp	/^		GLM_FUNC_DECL tmat2x3() GLM_DEFAULT_CTOR;$/;"	m	struct:glm::tmat2x3
GLM_DEFAULT_CTOR	mesh_visibility/glm/glm/detail/type_mat2x4.hpp	/^		GLM_FUNC_DECL tmat2x4() GLM_DEFAULT_CTOR;$/;"	m	struct:glm::tmat2x4
GLM_DEFAULT_CTOR	mesh_visibility/glm/glm/detail/type_mat3x2.hpp	/^		GLM_FUNC_DECL tmat3x2() GLM_DEFAULT_CTOR;$/;"	m	struct:glm::tmat3x2
GLM_DEFAULT_CTOR	mesh_visibility/glm/glm/detail/type_mat3x3.hpp	/^		GLM_FUNC_DECL tmat3x3() GLM_DEFAULT_CTOR;$/;"	m	struct:glm::tmat3x3
GLM_DEFAULT_CTOR	mesh_visibility/glm/glm/detail/type_mat3x4.hpp	/^		GLM_FUNC_DECL tmat3x4() GLM_DEFAULT_CTOR;$/;"	m	struct:glm::tmat3x4
GLM_DEFAULT_CTOR	mesh_visibility/glm/glm/detail/type_mat4x2.hpp	/^		GLM_FUNC_DECL tmat4x2() GLM_DEFAULT_CTOR;$/;"	m	struct:glm::tmat4x2
GLM_DEFAULT_CTOR	mesh_visibility/glm/glm/detail/type_mat4x3.hpp	/^		GLM_FUNC_DECL tmat4x3() GLM_DEFAULT_CTOR;$/;"	m	struct:glm::tmat4x3
GLM_DEFAULT_CTOR	mesh_visibility/glm/glm/detail/type_mat4x4.hpp	/^		GLM_FUNC_DECL tmat4x4() GLM_DEFAULT_CTOR;$/;"	m	struct:glm::tmat4x4
GLM_DEFAULT_CTOR	mesh_visibility/glm/glm/detail/type_vec1.hpp	/^		GLM_FUNC_DECL tvec1() GLM_DEFAULT_CTOR;$/;"	m	struct:glm::tvec1
GLM_DEFAULT_CTOR	mesh_visibility/glm/glm/detail/type_vec2.hpp	/^		GLM_FUNC_DECL tvec2() GLM_DEFAULT_CTOR;$/;"	m	struct:glm::tvec2
GLM_DEFAULT_CTOR	mesh_visibility/glm/glm/detail/type_vec3.hpp	/^		GLM_FUNC_DECL tvec3() GLM_DEFAULT_CTOR;$/;"	m	struct:glm::tvec3
GLM_DEFAULT_CTOR	mesh_visibility/glm/glm/detail/type_vec4.hpp	/^		GLM_FUNC_DECL tvec4() GLM_DEFAULT_CTOR;$/;"	m	struct:glm::tvec4
GLM_DEFAULT_CTOR	mesh_visibility/glm/glm/gtc/quaternion.hpp	/^		GLM_FUNC_DECL tquat() GLM_DEFAULT_CTOR;$/;"	m	struct:glm::tquat
GLM_DEFAULT_CTOR	mesh_visibility/glm/glm/gtx/dual_quaternion.hpp	/^		GLM_FUNC_DECL tdualquat() GLM_DEFAULT_CTOR;$/;"	m	struct:glm::tdualquat
GLM_DEPRECATED	mesh_visibility/glm/glm/detail/setup.hpp	904;"	d
GLM_DEPRECATED	mesh_visibility/glm/glm/detail/setup.hpp	911;"	d
GLM_DEPRECATED	mesh_visibility/glm/glm/detail/setup.hpp	918;"	d
GLM_EXPLICIT	mesh_visibility/glm/glm/detail/setup.hpp	947;"	d
GLM_EXPLICIT	mesh_visibility/glm/glm/detail/setup.hpp	949;"	d
GLM_FORCE_CXX03	mesh_visibility/glm/glm/detail/setup.hpp	511;"	d
GLM_FORCE_CXX03	mesh_visibility/glm/glm/detail/setup.hpp	515;"	d
GLM_FORCE_CXX11	mesh_visibility/glm/glm/detail/setup.hpp	510;"	d
GLM_FORCE_CXX98	mesh_visibility/glm/glm/detail/setup.hpp	512;"	d
GLM_FORCE_CXX98	mesh_visibility/glm/glm/detail/setup.hpp	516;"	d
GLM_FORCE_CXX98	mesh_visibility/glm/glm/detail/setup.hpp	519;"	d
GLM_FORCE_PURE	mesh_visibility/glm/glm/detail/setup.hpp	615;"	d
GLM_FUNC_DECL	mesh_visibility/glm/glm/detail/setup.hpp	883;"	d
GLM_FUNC_QUALIFIER	mesh_visibility/glm/glm/detail/setup.hpp	884;"	d
GLM_HAS_ANONYMOUS_UNION	mesh_visibility/glm/glm/detail/setup.hpp	834;"	d
GLM_HAS_ASSIGNABLE	mesh_visibility/glm/glm/detail/setup.hpp	790;"	d
GLM_HAS_ASSIGNABLE	mesh_visibility/glm/glm/detail/setup.hpp	792;"	d
GLM_HAS_BITSCAN_WINDOWS	mesh_visibility/glm/glm/detail/setup.hpp	808;"	d
GLM_HAS_BITSCAN_WINDOWS	mesh_visibility/glm/glm/detail/setup.hpp	810;"	d
GLM_HAS_CONSTEXPR	mesh_visibility/glm/glm/detail/setup.hpp	697;"	d
GLM_HAS_CONSTEXPR	mesh_visibility/glm/glm/detail/setup.hpp	700;"	d
GLM_HAS_CONSTEXPR	mesh_visibility/glm/glm/detail/setup.hpp	703;"	d
GLM_HAS_CONSTEXPR_PARTIAL	mesh_visibility/glm/glm/detail/setup.hpp	698;"	d
GLM_HAS_CONSTEXPR_PARTIAL	mesh_visibility/glm/glm/detail/setup.hpp	701;"	d
GLM_HAS_CONSTEXPR_PARTIAL	mesh_visibility/glm/glm/detail/setup.hpp	705;"	d
GLM_HAS_CXX11_STL	mesh_visibility/glm/glm/detail/setup.hpp	654;"	d
GLM_HAS_CXX11_STL	mesh_visibility/glm/glm/detail/setup.hpp	662;"	d
GLM_HAS_CXX11_STL	mesh_visibility/glm/glm/detail/setup.hpp	664;"	d
GLM_HAS_CXX11_STL	mesh_visibility/glm/glm/detail/setup.hpp	667;"	d
GLM_HAS_DEFAULTED_FUNCTIONS	mesh_visibility/glm/glm/detail/setup.hpp	731;"	d
GLM_HAS_DEFAULTED_FUNCTIONS	mesh_visibility/glm/glm/detail/setup.hpp	733;"	d
GLM_HAS_DEFAULTED_FUNCTIONS	mesh_visibility/glm/glm/detail/setup.hpp	735;"	d
GLM_HAS_EXPLICIT_CONVERSION_OPERATORS	mesh_visibility/glm/glm/detail/setup.hpp	754;"	d
GLM_HAS_EXPLICIT_CONVERSION_OPERATORS	mesh_visibility/glm/glm/detail/setup.hpp	756;"	d
GLM_HAS_EXPLICIT_CONVERSION_OPERATORS	mesh_visibility/glm/glm/detail/setup.hpp	758;"	d
GLM_HAS_EXTENDED_INTEGER_TYPE	mesh_visibility/glm/glm/detail/setup.hpp	686;"	d
GLM_HAS_EXTENDED_INTEGER_TYPE	mesh_visibility/glm/glm/detail/setup.hpp	688;"	d
GLM_HAS_INITIALIZER_LISTS	mesh_visibility/glm/glm/detail/setup.hpp	710;"	d
GLM_HAS_INITIALIZER_LISTS	mesh_visibility/glm/glm/detail/setup.hpp	712;"	d
GLM_HAS_INITIALIZER_LISTS	mesh_visibility/glm/glm/detail/setup.hpp	714;"	d
GLM_HAS_MAKE_SIGNED	mesh_visibility/glm/glm/detail/setup.hpp	801;"	d
GLM_HAS_MAKE_SIGNED	mesh_visibility/glm/glm/detail/setup.hpp	803;"	d
GLM_HAS_OPENMP	mesh_visibility/glm/glm/detail/setup.hpp	818;"	d
GLM_HAS_OPENMP	mesh_visibility/glm/glm/detail/setup.hpp	820;"	d
GLM_HAS_OPENMP	mesh_visibility/glm/glm/detail/setup.hpp	822;"	d
GLM_HAS_OPENMP	mesh_visibility/glm/glm/detail/setup.hpp	828;"	d
GLM_HAS_RANGE_FOR	mesh_visibility/glm/glm/detail/setup.hpp	778;"	d
GLM_HAS_RANGE_FOR	mesh_visibility/glm/glm/detail/setup.hpp	780;"	d
GLM_HAS_RANGE_FOR	mesh_visibility/glm/glm/detail/setup.hpp	782;"	d
GLM_HAS_RVALUE_REFERENCES	mesh_visibility/glm/glm/detail/setup.hpp	743;"	d
GLM_HAS_RVALUE_REFERENCES	mesh_visibility/glm/glm/detail/setup.hpp	745;"	d
GLM_HAS_RVALUE_REFERENCES	mesh_visibility/glm/glm/detail/setup.hpp	747;"	d
GLM_HAS_STATIC_ASSERT	mesh_visibility/glm/glm/detail/setup.hpp	675;"	d
GLM_HAS_STATIC_ASSERT	mesh_visibility/glm/glm/detail/setup.hpp	677;"	d
GLM_HAS_STATIC_ASSERT	mesh_visibility/glm/glm/detail/setup.hpp	679;"	d
GLM_HAS_TEMPLATE_ALIASES	mesh_visibility/glm/glm/detail/setup.hpp	766;"	d
GLM_HAS_TEMPLATE_ALIASES	mesh_visibility/glm/glm/detail/setup.hpp	768;"	d
GLM_HAS_TEMPLATE_ALIASES	mesh_visibility/glm/glm/detail/setup.hpp	770;"	d
GLM_HAS_TRIVIAL_QUERIES	mesh_visibility/glm/glm/detail/setup.hpp	797;"	d
GLM_HAS_UNRESTRICTED_UNIONS	mesh_visibility/glm/glm/detail/setup.hpp	721;"	d
GLM_HAS_UNRESTRICTED_UNIONS	mesh_visibility/glm/glm/detail/setup.hpp	723;"	d
GLM_HAS_UNRESTRICTED_UNIONS	mesh_visibility/glm/glm/detail/setup.hpp	725;"	d
GLM_IMPLEMENT_SCAL_MULT	mesh_visibility/glm/glm/gtx/scalar_multiplication.hpp	64;"	d
GLM_IMPLEMENT_SCAL_MULT	mesh_visibility/glm/glm/gtx/scalar_multiplication.hpp	97;"	d
GLM_INLINE	mesh_visibility/glm/glm/detail/setup.hpp	869;"	d
GLM_INLINE	mesh_visibility/glm/glm/detail/setup.hpp	872;"	d
GLM_INLINE	mesh_visibility/glm/glm/detail/setup.hpp	875;"	d
GLM_INLINE	mesh_visibility/glm/glm/detail/setup.hpp	879;"	d
GLM_LANG	mesh_visibility/glm/glm/detail/setup.hpp	513;"	d
GLM_LANG	mesh_visibility/glm/glm/detail/setup.hpp	517;"	d
GLM_LANG	mesh_visibility/glm/glm/detail/setup.hpp	520;"	d
GLM_LANG	mesh_visibility/glm/glm/detail/setup.hpp	522;"	d
GLM_LANG	mesh_visibility/glm/glm/detail/setup.hpp	526;"	d
GLM_LANG	mesh_visibility/glm/glm/detail/setup.hpp	528;"	d
GLM_LANG	mesh_visibility/glm/glm/detail/setup.hpp	530;"	d
GLM_LANG	mesh_visibility/glm/glm/detail/setup.hpp	532;"	d
GLM_LANG	mesh_visibility/glm/glm/detail/setup.hpp	534;"	d
GLM_LANG	mesh_visibility/glm/glm/detail/setup.hpp	536;"	d
GLM_LANG	mesh_visibility/glm/glm/detail/setup.hpp	540;"	d
GLM_LANG	mesh_visibility/glm/glm/detail/setup.hpp	542;"	d
GLM_LANG	mesh_visibility/glm/glm/detail/setup.hpp	544;"	d
GLM_LANG	mesh_visibility/glm/glm/detail/setup.hpp	546;"	d
GLM_LANG	mesh_visibility/glm/glm/detail/setup.hpp	551;"	d
GLM_LANG	mesh_visibility/glm/glm/detail/setup.hpp	555;"	d
GLM_LANG	mesh_visibility/glm/glm/detail/setup.hpp	557;"	d
GLM_LANG	mesh_visibility/glm/glm/detail/setup.hpp	559;"	d
GLM_LANG	mesh_visibility/glm/glm/detail/setup.hpp	561;"	d
GLM_LANG	mesh_visibility/glm/glm/detail/setup.hpp	565;"	d
GLM_LANG	mesh_visibility/glm/glm/detail/setup.hpp	569;"	d
GLM_LANG	mesh_visibility/glm/glm/detail/setup.hpp	571;"	d
GLM_LANG	mesh_visibility/glm/glm/detail/setup.hpp	573;"	d
GLM_LANG	mesh_visibility/glm/glm/detail/setup.hpp	575;"	d
GLM_LANG	mesh_visibility/glm/glm/detail/setup.hpp	581;"	d
GLM_LANG	mesh_visibility/glm/glm/detail/setup.hpp	583;"	d
GLM_LANG	mesh_visibility/glm/glm/detail/setup.hpp	585;"	d
GLM_LANG	mesh_visibility/glm/glm/detail/setup.hpp	587;"	d
GLM_LANG	mesh_visibility/glm/glm/detail/setup.hpp	589;"	d
GLM_LANG	mesh_visibility/glm/glm/detail/setup.hpp	593;"	d
GLM_LANG	mesh_visibility/glm/glm/detail/setup.hpp	595;"	d
GLM_LANG	mesh_visibility/glm/glm/detail/setup.hpp	597;"	d
GLM_LANG	mesh_visibility/glm/glm/detail/setup.hpp	599;"	d
GLM_LANG	mesh_visibility/glm/glm/detail/setup.hpp	601;"	d
GLM_LANG	mesh_visibility/glm/glm/detail/setup.hpp	606;"	d
GLM_LANG	mesh_visibility/glm/glm/detail/setup.hpp	608;"	d
GLM_LANG	mesh_visibility/glm/glm/detail/setup.hpp	610;"	d
GLM_LANG	mesh_visibility/glm/glm/detail/setup.hpp	612;"	d
GLM_LANG_CXX03	mesh_visibility/glm/glm/detail/setup.hpp	500;"	d
GLM_LANG_CXX03_FLAG	mesh_visibility/glm/glm/detail/setup.hpp	490;"	d
GLM_LANG_CXX0X	mesh_visibility/glm/glm/detail/setup.hpp	501;"	d
GLM_LANG_CXX0X_FLAG	mesh_visibility/glm/glm/detail/setup.hpp	491;"	d
GLM_LANG_CXX11	mesh_visibility/glm/glm/detail/setup.hpp	502;"	d
GLM_LANG_CXX11_FLAG	mesh_visibility/glm/glm/detail/setup.hpp	492;"	d
GLM_LANG_CXX14	mesh_visibility/glm/glm/detail/setup.hpp	504;"	d
GLM_LANG_CXX14_FLAG	mesh_visibility/glm/glm/detail/setup.hpp	494;"	d
GLM_LANG_CXX1Y	mesh_visibility/glm/glm/detail/setup.hpp	503;"	d
GLM_LANG_CXX1Y_FLAG	mesh_visibility/glm/glm/detail/setup.hpp	493;"	d
GLM_LANG_CXX1Z	mesh_visibility/glm/glm/detail/setup.hpp	505;"	d
GLM_LANG_CXX1Z_FLAG	mesh_visibility/glm/glm/detail/setup.hpp	495;"	d
GLM_LANG_CXX98	mesh_visibility/glm/glm/detail/setup.hpp	499;"	d
GLM_LANG_CXX98_FLAG	mesh_visibility/glm/glm/detail/setup.hpp	489;"	d
GLM_LANG_CXXGNU	mesh_visibility/glm/glm/detail/setup.hpp	507;"	d
GLM_LANG_CXXGNU_FLAG	mesh_visibility/glm/glm/detail/setup.hpp	497;"	d
GLM_LANG_CXXMS	mesh_visibility/glm/glm/detail/setup.hpp	506;"	d
GLM_LANG_CXXMS_FLAG	mesh_visibility/glm/glm/detail/setup.hpp	496;"	d
GLM_MESSAGES	mesh_visibility/glm/glm/detail/dummy.cpp	36;"	d	file:
GLM_MESSAGE_ARCH_DISPLAYED	mesh_visibility/glm/glm/detail/setup.hpp	468;"	d
GLM_MESSAGE_COMPILER_DISPLAYED	mesh_visibility/glm/glm/detail/setup.hpp	327;"	d
GLM_MESSAGE_CORE_INCLUDED_DISPLAYED	mesh_visibility/glm/glm/glm.hpp	93;"	d
GLM_MESSAGE_EXT_INCLUDED_DISPLAYED	mesh_visibility/glm/glm/ext.hpp	60;"	d
GLM_MESSAGE_FORCE_SIZE_T_LENGTH	mesh_visibility/glm/glm/detail/setup.hpp	987;"	d
GLM_MESSAGE_LANG_DISPLAYED	mesh_visibility/glm/glm/detail/setup.hpp	621;"	d
GLM_MESSAGE_MODEL_DISPLAYED	mesh_visibility/glm/glm/detail/setup.hpp	361;"	d
GLM_MESSAGE_PLATFORM_DISPLAYED	mesh_visibility/glm/glm/detail/setup.hpp	90;"	d
GLM_MESSAGE_SWIZZLE_DISPLAYED	mesh_visibility/glm/glm/detail/setup.hpp	892;"	d
GLM_MESSAGE_VERSION_DISPLAYED	mesh_visibility/glm/glm/detail/setup.hpp	48;"	d
GLM_MODEL	mesh_visibility/glm/glm/detail/setup.hpp	349;"	d
GLM_MODEL	mesh_visibility/glm/glm/detail/setup.hpp	351;"	d
GLM_MODEL	mesh_visibility/glm/glm/detail/setup.hpp	353;"	d
GLM_MODEL_32	mesh_visibility/glm/glm/detail/setup.hpp	186;"	d
GLM_MODEL_64	mesh_visibility/glm/glm/detail/setup.hpp	187;"	d
GLM_MUTABLE	mesh_visibility/glm/glm/detail/_swizzle_func.hpp	74;"	d
GLM_NEVER_INLINE	mesh_visibility/glm/glm/detail/setup.hpp	870;"	d
GLM_NEVER_INLINE	mesh_visibility/glm/glm/detail/setup.hpp	873;"	d
GLM_NEVER_INLINE	mesh_visibility/glm/glm/detail/setup.hpp	876;"	d
GLM_NEVER_INLINE	mesh_visibility/glm/glm/detail/setup.hpp	880;"	d
GLM_NOT_BUGGY_VC32BITS	mesh_visibility/glm/glm/detail/type_vec4.hpp	55;"	d
GLM_PLATFORM	mesh_visibility/glm/glm/detail/setup.hpp	67;"	d
GLM_PLATFORM	mesh_visibility/glm/glm/detail/setup.hpp	69;"	d
GLM_PLATFORM	mesh_visibility/glm/glm/detail/setup.hpp	71;"	d
GLM_PLATFORM	mesh_visibility/glm/glm/detail/setup.hpp	73;"	d
GLM_PLATFORM	mesh_visibility/glm/glm/detail/setup.hpp	75;"	d
GLM_PLATFORM	mesh_visibility/glm/glm/detail/setup.hpp	77;"	d
GLM_PLATFORM	mesh_visibility/glm/glm/detail/setup.hpp	79;"	d
GLM_PLATFORM	mesh_visibility/glm/glm/detail/setup.hpp	81;"	d
GLM_PLATFORM	mesh_visibility/glm/glm/detail/setup.hpp	83;"	d
GLM_PLATFORM	mesh_visibility/glm/glm/detail/setup.hpp	85;"	d
GLM_PLATFORM_ANDROID	mesh_visibility/glm/glm/detail/setup.hpp	60;"	d
GLM_PLATFORM_APPLE	mesh_visibility/glm/glm/detail/setup.hpp	58;"	d
GLM_PLATFORM_CHROME_NACL	mesh_visibility/glm/glm/detail/setup.hpp	61;"	d
GLM_PLATFORM_LINUX	mesh_visibility/glm/glm/detail/setup.hpp	57;"	d
GLM_PLATFORM_QNXNTO	mesh_visibility/glm/glm/detail/setup.hpp	63;"	d
GLM_PLATFORM_UNIX	mesh_visibility/glm/glm/detail/setup.hpp	62;"	d
GLM_PLATFORM_UNKNOWN	mesh_visibility/glm/glm/detail/setup.hpp	55;"	d
GLM_PLATFORM_WINCE	mesh_visibility/glm/glm/detail/setup.hpp	64;"	d
GLM_PLATFORM_WINDOWS	mesh_visibility/glm/glm/detail/setup.hpp	56;"	d
GLM_RELAXED_CONSTEXPR	mesh_visibility/glm/glm/detail/setup.hpp	940;"	d
GLM_RELAXED_CONSTEXPR	mesh_visibility/glm/glm/detail/setup.hpp	943;"	d
GLM_RESTRICT	mesh_visibility/glm/glm/detail/setup.hpp	908;"	d
GLM_RESTRICT	mesh_visibility/glm/glm/detail/setup.hpp	915;"	d
GLM_RESTRICT	mesh_visibility/glm/glm/detail/setup.hpp	922;"	d
GLM_RESTRICT_VAR	mesh_visibility/glm/glm/detail/setup.hpp	909;"	d
GLM_RESTRICT_VAR	mesh_visibility/glm/glm/detail/setup.hpp	916;"	d
GLM_RESTRICT_VAR	mesh_visibility/glm/glm/detail/setup.hpp	923;"	d
GLM_STATIC_ASSERT	mesh_visibility/glm/glm/detail/setup.hpp	840;"	d
GLM_STATIC_ASSERT	mesh_visibility/glm/glm/detail/setup.hpp	842;"	d
GLM_STATIC_ASSERT	mesh_visibility/glm/glm/detail/setup.hpp	844;"	d
GLM_STATIC_ASSERT	mesh_visibility/glm/glm/detail/setup.hpp	846;"	d
GLM_STATIC_ASSERT_NULL	mesh_visibility/glm/glm/detail/setup.hpp	847;"	d
GLM_SWIZZLE_GEN_REF2_FROM_VEC2_SWIZZLE	mesh_visibility/glm/glm/detail/_swizzle_func.hpp	76;"	d
GLM_SWIZZLE_GEN_REF2_FROM_VEC3_SWIZZLE	mesh_visibility/glm/glm/detail/_swizzle_func.hpp	87;"	d
GLM_SWIZZLE_GEN_REF2_FROM_VEC4_SWIZZLE	mesh_visibility/glm/glm/detail/_swizzle_func.hpp	114;"	d
GLM_SWIZZLE_GEN_REF3_FROM_VEC3_SWIZZLE	mesh_visibility/glm/glm/detail/_swizzle_func.hpp	95;"	d
GLM_SWIZZLE_GEN_REF3_FROM_VEC4_SWIZZLE	mesh_visibility/glm/glm/detail/_swizzle_func.hpp	128;"	d
GLM_SWIZZLE_GEN_REF4_FROM_VEC4_SWIZZLE	mesh_visibility/glm/glm/detail/_swizzle_func.hpp	154;"	d
GLM_SWIZZLE_GEN_REF_FROM_VEC2	mesh_visibility/glm/glm/detail/_swizzle_func.hpp	80;"	d
GLM_SWIZZLE_GEN_REF_FROM_VEC3	mesh_visibility/glm/glm/detail/_swizzle_func.hpp	107;"	d
GLM_SWIZZLE_GEN_REF_FROM_VEC3_COMP	mesh_visibility/glm/glm/detail/_swizzle_func.hpp	103;"	d
GLM_SWIZZLE_GEN_REF_FROM_VEC4	mesh_visibility/glm/glm/detail/_swizzle_func.hpp	185;"	d
GLM_SWIZZLE_GEN_REF_FROM_VEC4_COMP	mesh_visibility/glm/glm/detail/_swizzle_func.hpp	180;"	d
GLM_SWIZZLE_GEN_VEC2_ENTRY	mesh_visibility/glm/glm/detail/_swizzle_func.hpp	35;"	d
GLM_SWIZZLE_GEN_VEC2_ENTRY_DEF	mesh_visibility/glm/glm/detail/_swizzle_func.hpp	53;"	d
GLM_SWIZZLE_GEN_VEC2_FROM_VEC2_SWIZZLE	mesh_visibility/glm/glm/detail/_swizzle_func.hpp	192;"	d
GLM_SWIZZLE_GEN_VEC2_FROM_VEC3_SWIZZLE	mesh_visibility/glm/glm/detail/_swizzle_func.hpp	238;"	d
GLM_SWIZZLE_GEN_VEC2_FROM_VEC4_SWIZZLE	mesh_visibility/glm/glm/detail/_swizzle_func.hpp	373;"	d
GLM_SWIZZLE_GEN_VEC3_ENTRY	mesh_visibility/glm/glm/detail/_swizzle_func.hpp	41;"	d
GLM_SWIZZLE_GEN_VEC3_ENTRY_DEF	mesh_visibility/glm/glm/detail/_swizzle_func.hpp	60;"	d
GLM_SWIZZLE_GEN_VEC3_FROM_VEC2_SWIZZLE	mesh_visibility/glm/glm/detail/_swizzle_func.hpp	198;"	d
GLM_SWIZZLE_GEN_VEC3_FROM_VEC3_SWIZZLE	mesh_visibility/glm/glm/detail/_swizzle_func.hpp	249;"	d
GLM_SWIZZLE_GEN_VEC3_FROM_VEC4_SWIZZLE	mesh_visibility/glm/glm/detail/_swizzle_func.hpp	391;"	d
GLM_SWIZZLE_GEN_VEC4_ENTRY	mesh_visibility/glm/glm/detail/_swizzle_func.hpp	47;"	d
GLM_SWIZZLE_GEN_VEC4_ENTRY_DEF	mesh_visibility/glm/glm/detail/_swizzle_func.hpp	67;"	d
GLM_SWIZZLE_GEN_VEC4_FROM_VEC2_SWIZZLE	mesh_visibility/glm/glm/detail/_swizzle_func.hpp	208;"	d
GLM_SWIZZLE_GEN_VEC4_FROM_VEC3_SWIZZLE	mesh_visibility/glm/glm/detail/_swizzle_func.hpp	278;"	d
GLM_SWIZZLE_GEN_VEC4_FROM_VEC4_SWIZZLE	mesh_visibility/glm/glm/detail/_swizzle_func.hpp	457;"	d
GLM_SWIZZLE_GEN_VEC_FROM_VEC2	mesh_visibility/glm/glm/detail/_swizzle_func.hpp	231;"	d
GLM_SWIZZLE_GEN_VEC_FROM_VEC2_COMP	mesh_visibility/glm/glm/detail/_swizzle_func.hpp	226;"	d
GLM_SWIZZLE_GEN_VEC_FROM_VEC3	mesh_visibility/glm/glm/detail/_swizzle_func.hpp	366;"	d
GLM_SWIZZLE_GEN_VEC_FROM_VEC3_COMP	mesh_visibility/glm/glm/detail/_swizzle_func.hpp	361;"	d
GLM_SWIZZLE_GEN_VEC_FROM_VEC4	mesh_visibility/glm/glm/detail/_swizzle_func.hpp	720;"	d
GLM_SWIZZLE_GEN_VEC_FROM_VEC4_COMP	mesh_visibility/glm/glm/detail/_swizzle_func.hpp	715;"	d
GLM_TEMPLATE_GENTYPE	mesh_visibility/glm/glm/detail/dummy.cpp	201;"	d	file:
GLM_VAR_USED	mesh_visibility/glm/glm/detail/setup.hpp	862;"	d
GLM_VAR_USED	mesh_visibility/glm/glm/detail/setup.hpp	864;"	d
GLM_VERSION	mesh_visibility/glm/glm/detail/setup.hpp	41;"	d
GLM_VERSION_MAJOR	mesh_visibility/glm/glm/detail/setup.hpp	42;"	d
GLM_VERSION_MINOR	mesh_visibility/glm/glm/detail/setup.hpp	43;"	d
GLM_VERSION_PATCH	mesh_visibility/glm/glm/detail/setup.hpp	44;"	d
GLM_VERSION_REVISION	mesh_visibility/glm/glm/detail/setup.hpp	45;"	d
GL_FALSE	mesh_visibility/glm/glm/detail/dummy.cpp	84;"	d	file:
GL_GLEXT_LEGACY	mesh_visibility/glfw/glfw3.h	122;"	d
GL_UTIL_H	mesh_visibility/gl_util.h	20;"	d
GLuint	mesh_visibility/glm/glm/detail/dummy.cpp	/^typedef unsigned int GLuint;$/;"	t	file:
HAVE_BOOL	mesh_partition/heap/config-vc.h	9;"	d
HAVE_CASTING_LIMITS	mesh_partition/heap/config-vc.h	78;"	d
HAVE_FLTK	mesh_partition/heap/config-vc.h	43;"	d
HAVE_FLTK_GL	mesh_partition/heap/config-vc.h	46;"	d
HAVE_GL_GLEXT_H	mesh_partition/heap/config-vc.h	69;"	d
HAVE_GL_WGLEXT_H	mesh_partition/heap/config-vc.h	75;"	d
HAVE_LIBJPEG	mesh_partition/heap/config-vc.h	55;"	d
HAVE_LIBPNG	mesh_partition/heap/config-vc.h	52;"	d
HAVE_LIBTIFF	mesh_partition/heap/config-vc.h	49;"	d
HAVE_OPENGL	mesh_partition/heap/config-vc.h	60;"	d
HAVE_POLYOFFSET	mesh_partition/heap/config-vc.h	66;"	d
HAVE_SSTREAM	mesh_partition/heap/config-vc.h	37;"	d
HAVE_VALARRAY	mesh_partition/heap/config-vc.h	34;"	d
HUGE	mesh_partition/heap/gfx.h	56;"	d
INVALID_OGL_VALUE	mesh_visibility/gl_util.h	43;"	d
ImgPixel	mesh_texture_opt/mesh_opt.h	/^        ImgPixel() : graycolor(0) {}$/;"	f	struct:RGBDMeshOpt::ImgPixel
ImgPixel	mesh_texture_opt/mesh_opt.h	/^    struct ImgPixel$/;"	s	class:RGBDMeshOpt
JTJ	mesh_texture_opt/mesh_opt.h	/^        MatrixXd JTJ, JTr;  \/\/ Jacobians$/;"	m	struct:RGBDMeshOpt::Frame
JTJ	mesh_texture_opt/mesh_opt.h	/^        MatrixXd JTJ, JTr;  \/\/ plane Jacobian$/;"	m	struct:RGBDMeshOpt::Cluster
JTr	mesh_texture_opt/mesh_opt.h	/^        MatrixXd JTJ, JTr;  \/\/ Jacobians$/;"	m	struct:RGBDMeshOpt::Frame
JTr	mesh_texture_opt/mesh_opt.h	/^        MatrixXd JTJ, JTr;  \/\/ plane Jacobian$/;"	m	struct:RGBDMeshOpt::Cluster
LoadShaders	mesh_visibility/shader.h	/^    void LoadShaders(const char *vertex_file_path, const char *fragment_file_path)$/;"	f	class:Shader
MAX	mesh_partition/heap/gfx.h	45;"	d
MAX	mesh_partition/heap/gfx.h	48;"	d
MAX	mesh_partition/heap/stdmix.h	40;"	d
MAX	mesh_partition/heap/stdmix.h	44;"	d
MESH_OPT_H	mesh_texture_opt/mesh_opt.h	2;"	d
MESH_VISIBILITY_H	mesh_visibility/mesh_visibility.h	2;"	d
MIN	mesh_partition/heap/gfx.h	44;"	d
MIN	mesh_partition/heap/gfx.h	47;"	d
MIN	mesh_partition/heap/stdmix.h	37;"	d
MIN	mesh_partition/heap/stdmix.h	43;"	d
MIXMSG_INCLUDED	mesh_partition/heap/mixmsg.h	2;"	d
MXBLOCK_INCLUDED	mesh_partition/heap/MxBlock.h	2;"	d
MXDYNBLOCK_INCLUDED	mesh_partition/heap/MxDynBlock.h	2;"	d
MXHEAP_H	mesh_partition/myheap.h	35;"	d
MXHEAP_INCLUDED	mesh_partition/heap/MxHeap.h	2;"	d
MXID_NIL	mesh_partition/heap/stdmix.h	23;"	d
MXMSG_ASSERT	mesh_partition/heap/mixmsg.h	/^    MXMSG_ASSERT,$/;"	e	enum:MxSeverityLevel
MXMSG_DEBUG	mesh_partition/heap/mixmsg.h	/^    MXMSG_DEBUG,$/;"	e	enum:MxSeverityLevel
MXMSG_ERROR	mesh_partition/heap/mixmsg.h	/^    MXMSG_ERROR,$/;"	e	enum:MxSeverityLevel
MXMSG_FATAL	mesh_partition/heap/mixmsg.h	/^    MXMSG_FATAL = 0,$/;"	e	enum:MxSeverityLevel
MXMSG_NOTE	mesh_partition/heap/mixmsg.h	/^    MXMSG_NOTE,$/;"	e	enum:MxSeverityLevel
MXMSG_TRACE	mesh_partition/heap/mixmsg.h	/^    MXMSG_TRACE$/;"	e	enum:MxSeverityLevel
MXMSG_WARN	mesh_partition/heap/mixmsg.h	/^    MXMSG_WARN,$/;"	e	enum:MxSeverityLevel
M_PI	mesh_partition/heap/gfx.h	52;"	d
MeshVisibility	mesh_visibility/mesh_visibility.cpp	/^MeshVisibility::MeshVisibility()$/;"	f	class:MeshVisibility
MeshVisibility	mesh_visibility/mesh_visibility.h	/^class MeshVisibility$/;"	c
MxBlock	mesh_partition/heap/MxBlock.h	/^    MxBlock() {}$/;"	f	class:MxBlock
MxBlock	mesh_partition/heap/MxBlock.h	/^    MxBlock(int n) { init_block(n); }$/;"	f	class:MxBlock
MxBlock	mesh_partition/heap/MxBlock.h	/^class MxBlock$/;"	c
MxDynBlock	mesh_partition/heap/MxDynBlock.h	/^    MxDynBlock(int n = 2) : MxBlock<T>(n) { fill = 0; }$/;"	f	class:MxDynBlock
MxDynBlock	mesh_partition/heap/MxDynBlock.h	/^class MxDynBlock : public MxBlock<T>$/;"	c
MxHeap	mesh_partition/heap/MxHeap.h	/^    MxHeap() : MxDynBlock<MxHeapable *>(8) {}$/;"	f	class:MxHeap
MxHeap	mesh_partition/heap/MxHeap.h	/^    MxHeap(unsigned int n) : MxDynBlock<MxHeapable *>(n) {}$/;"	f	class:MxHeap
MxHeap	mesh_partition/heap/MxHeap.h	/^class MxHeap : private MxDynBlock<MxHeapable *>$/;"	c
MxHeap	mesh_partition/myheap.h	/^    MxHeap() { data.reserve(8); }$/;"	f	class:MxHeap
MxHeap	mesh_partition/myheap.h	/^    MxHeap(unsigned int n) { data.resize(n); }$/;"	f	class:MxHeap
MxHeap	mesh_partition/myheap.h	/^class MxHeap$/;"	c
MxHeapable	mesh_partition/heap/MxHeap.h	/^    MxHeapable()$/;"	f	class:MxHeapable
MxHeapable	mesh_partition/heap/MxHeap.h	/^class MxHeapable$/;"	c
MxHeapable	mesh_partition/myheap.h	/^    MxHeapable()$/;"	f	class:MxHeapable
MxHeapable	mesh_partition/myheap.h	/^class MxHeapable$/;"	c
MxMsgInfo	mesh_partition/heap/mixmsg.h	/^class MxMsgInfo$/;"	c
MxSeverityLevel	mesh_partition/heap/mixmsg.h	/^enum MxSeverityLevel$/;"	g
MxSizedDynBlock	mesh_partition/heap/MxDynBlock.h	/^    MxSizedDynBlock(uint n = T_SIZE) : MxDynBlock<T>(n) {}$/;"	f	class:MxSizedDynBlock
MxSizedDynBlock	mesh_partition/heap/MxDynBlock.h	/^class MxSizedDynBlock : public MxDynBlock<T>$/;"	c
N	mesh_partition/heap/MxBlock.h	/^    int N;$/;"	m	class:MxBlock
P	mesh_visibility/glm/glm/gtx/simd_vec4.hpp	/^		P = 2,$/;"	e	enum:glm::comp
PARANOID	mesh_partition/heap/stdmix.h	94;"	d
PARANOID	mesh_partition/heap/stdmix.h	97;"	d
PARTITION_H	mesh_partition/partition.h	2;"	d
PRECAUTION	mesh_partition/heap/stdmix.h	102;"	d
PRECAUTION	mesh_partition/heap/stdmix.h	105;"	d
PRINT_BLUE	common/tools.h	33;"	d
PRINT_CYAN	common/tools.h	46;"	d
PRINT_GREEN	common/tools.h	19;"	d
PRINT_MAGENTA	common/tools.h	39;"	d
PRINT_RED	common/tools.h	12;"	d
PRINT_YELLOW	common/tools.h	26;"	d
Partition	mesh_partition/partition.cpp	/^Partition::Partition()$/;"	f	class:Partition
Partition	mesh_partition/partition.h	/^class Partition$/;"	c
PositionDataF16	mesh_visibility/glm/glm/detail/dummy.cpp	/^glm::uint const PositionDataF16[VertexCount] =$/;"	m	class:glm	file:
PositionDataF32	mesh_visibility/glm/glm/detail/dummy.cpp	/^glm::vec2 const PositionDataF32[VertexCount] =$/;"	m	class:glm	file:
PositionDataI32	mesh_visibility/glm/glm/detail/dummy.cpp	/^glm::i32vec2 const PositionDataI32[VertexCount] =$/;"	m	class:glm	file:
PositionDataI8	mesh_visibility/glm/glm/detail/dummy.cpp	/^glm::i8vec2 const PositionDataI8[VertexCount] =$/;"	m	class:glm	file:
PositionSizeF16	mesh_visibility/glm/glm/detail/dummy.cpp	/^std::size_t const PositionSizeF16 = VertexCount * sizeof(glm::uint);$/;"	m	class:std	file:
PositionSizeF32	mesh_visibility/glm/glm/detail/dummy.cpp	/^std::size_t const PositionSizeF32 = VertexCount * sizeof(glm::vec2);$/;"	m	class:std	file:
PositionSizeI32	mesh_visibility/glm/glm/detail/dummy.cpp	/^std::size_t const PositionSizeI32 = VertexCount * sizeof(glm::i32vec2);$/;"	m	class:std	file:
PositionSizeI8	mesh_visibility/glm/glm/detail/dummy.cpp	/^std::size_t const PositionSizeI8 = VertexCount * sizeof(glm::i8vec2);$/;"	m	class:std	file:
ProgramMode	mesh_visibility/main.cpp	/^enum ProgramMode$/;"	g	file:
Q	mesh_partition/partition.h	/^        QEMQuadrics Q;$/;"	m	struct:Partition::Vertex
Q	mesh_visibility/glm/glm/gtx/simd_vec4.hpp	/^		Q = 3$/;"	e	enum:glm::comp
QEMQUADRICS_H	mesh_partition/qemquadrics.h	9;"	d
QEMQuadrics	mesh_partition/qemquadrics.cpp	/^QEMQuadrics::QEMQuadrics()$/;"	f	class:QEMQuadrics
QEMQuadrics	mesh_partition/qemquadrics.cpp	/^QEMQuadrics::QEMQuadrics(const Vector3d& v1)$/;"	f	class:QEMQuadrics
QEMQuadrics	mesh_partition/qemquadrics.cpp	/^QEMQuadrics::QEMQuadrics(const Vector3d& v1, const Vector3d& v2)$/;"	f	class:QEMQuadrics
QEMQuadrics	mesh_partition/qemquadrics.cpp	/^QEMQuadrics::QEMQuadrics(const Vector3d& v1, const Vector3d& v2, const Vector3d& v3)$/;"	f	class:QEMQuadrics
QEMQuadrics	mesh_partition/qemquadrics.h	/^class QEMQuadrics$/;"	c
R	mesh_texture_opt/mesh_opt.h	/^        Matrix3d R, inv_R, opt_R, opt_inv_R;$/;"	m	struct:RGBDMeshOpt::Frame
R	mesh_visibility/glm/glm/gtx/simd_vec4.hpp	/^		R = 0,$/;"	e	enum:glm::comp
RANDOM	mesh_visibility/gl_util.h	36;"	d
RANDOM	mesh_visibility/gl_util.h	40;"	d
RENDER_MODEL	mesh_visibility/main.cpp	/^    RENDER_MODEL = 0,$/;"	e	enum:ProgramMode	file:
RGBDMeshOpt	mesh_texture_opt/mesh_opt.cpp	/^RGBDMeshOpt::RGBDMeshOpt() {}$/;"	f	class:RGBDMeshOpt
RGBDMeshOpt	mesh_texture_opt/mesh_opt.h	/^class RGBDMeshOpt$/;"	c
S	mesh_visibility/glm/glm/gtx/simd_vec4.hpp	/^		S = 0,$/;"	e	enum:glm::comp
SAFETY	mesh_partition/heap/stdmix.h	72;"	d
SAFE_DELETE	mesh_visibility/gl_util.h	45;"	d
SAVE_ALL_FILES	mesh_visibility/main.cpp	/^    SAVE_ALL_FILES,$/;"	e	enum:ProgramMode	file:
SAVE_DEPTH_IMAGE	mesh_visibility/main.cpp	/^    SAVE_DEPTH_IMAGE,$/;"	e	enum:ProgramMode	file:
SAVE_TEXTURE_IMAGE	mesh_visibility/main.cpp	/^    SAVE_TEXTURE_IMAGE$/;"	e	enum:ProgramMode	file:
SAVE_VERTEX_COLOR_IMAGE	mesh_visibility/main.cpp	/^    SAVE_VERTEX_COLOR_IMAGE,$/;"	e	enum:ProgramMode	file:
SAVE_VISIBILITY	mesh_visibility/main.cpp	/^    SAVE_VISIBILITY,$/;"	e	enum:ProgramMode	file:
SHADER_H	mesh_visibility/shader.h	2;"	d
SNPRINTF	mesh_visibility/gl_util.h	35;"	d
SNPRINTF	mesh_visibility/gl_util.h	39;"	d
SRANDOM	mesh_visibility/gl_util.h	37;"	d
SRANDOM	mesh_visibility/gl_util.h	41;"	d
STDMIX_INCLUDED	mesh_partition/heap/stdmix.h	2;"	d
SanityCheck	mesh_partition/heap/stdmix.h	93;"	d
SanityCheck	mesh_partition/heap/stdmix.h	96;"	d
Shader	mesh_visibility/shader.h	/^    Shader() {}$/;"	f	class:Shader
Shader	mesh_visibility/shader.h	/^class Shader$/;"	c
Stub	mesh_visibility/glm/glm/detail/_swizzle.hpp	/^		struct Stub {};$/;"	s	struct:glm::detail::_swizzle_base2
SwapFace	mesh_partition/partition.h	/^        SwapFace(int v, int f, int t)$/;"	f	struct:Partition::SwapFace
SwapFace	mesh_partition/partition.h	/^    struct SwapFace$/;"	s	class:Partition
T	mesh_texture_opt/mesh_opt.h	/^        Matrix4d T, inv_T, opt_T, opt_inv_T, lastT;  \/\/ camera pose parameters$/;"	m	struct:RGBDMeshOpt::Frame
T	mesh_visibility/glm/glm/gtx/simd_vec4.hpp	/^		T = 1,$/;"	e	enum:glm::comp
TIMING	mesh_partition/heap/gfx.h	88;"	d
TOOLS_H	common/tools.h	2;"	d
Texel	mesh_texture_opt/mesh_opt.h	/^        Texel() : is_valid(false), face_id(-1), opt_fidx(-1), opt_graycolor(0), opt_rgb(1.0, 1.0, 1.0) {}$/;"	f	struct:RGBDMeshOpt::Texel
Texel	mesh_texture_opt/mesh_opt.h	/^    struct Texel$/;"	s	class:RGBDMeshOpt
TexturePatch	mesh_texture_opt/mesh_opt.h	/^        TexturePatch() : width(0), height(0), area(0), texture_img_idx(-1), cluster_id(-1), base_vtx_index(0) {}$/;"	f	struct:RGBDMeshOpt::TexturePatch
TexturePatch	mesh_texture_opt/mesh_opt.h	/^    struct TexturePatch$/;"	s	class:RGBDMeshOpt
TreeNode	mesh_texture_opt/mesh_opt.h	/^        TreeNode() : is_leaf(false), minx(0), miny(0), width(0), height(0), left(nullptr), right(nullptr) {}$/;"	f	struct:RGBDMeshOpt::TreeNode
TreeNode	mesh_texture_opt/mesh_opt.h	/^        TreeNode(int x, int y, int w, int h)  \/\/ a node with data is a leaf by default$/;"	f	struct:RGBDMeshOpt::TreeNode
TreeNode	mesh_texture_opt/mesh_opt.h	/^    struct TreeNode$/;"	s	class:RGBDMeshOpt
VAO_	mesh_visibility/mesh_visibility.h	/^	unsigned int VAO_, VBO_, EBO_;$/;"	m	class:MeshVisibility
VBO_	mesh_visibility/mesh_visibility.h	/^	unsigned int VAO_, VBO_, EBO_;$/;"	m	class:MeshVisibility
Vertex	mesh_partition/partition.h	/^        Vertex() : is_valid(false), cluster_id(-1) {}$/;"	f	struct:Partition::Vertex
Vertex	mesh_partition/partition.h	/^    struct Vertex$/;"	s	class:Partition
Vertex	mesh_texture_opt/mesh_opt.h	/^        Vertex() : cluster_id(-2), is_visible(false), is_visited(false), component_id_x(-1), component_id_y(-1) {}$/;"	f	struct:RGBDMeshOpt::Vertex
Vertex	mesh_texture_opt/mesh_opt.h	/^    struct Vertex$/;"	s	class:RGBDMeshOpt
Vertex	mesh_visibility/mesh_visibility.h	/^	Vertex(){pos = color = glm::vec3(0);}$/;"	f	struct:Vertex
Vertex	mesh_visibility/mesh_visibility.h	/^struct Vertex$/;"	s
VertexCount	mesh_visibility/glm/glm/detail/dummy.cpp	/^std::size_t const VertexCount = 4;$/;"	m	class:std	file:
W	mesh_partition/heap/stdmix.h	/^enum Axis {X=0, Y=1, Z=2, W=3};$/;"	e	enum:Axis
W	mesh_visibility/glm/glm/gtx/simd_vec4.hpp	/^		W = 3,$/;"	e	enum:glm::comp
WINGDIAPI	mesh_visibility/glfw/glfw3.h	3341;"	d
WINGDIAPI	mesh_visibility/glfw/glfw3.h	94;"	d
X	mesh_partition/heap/stdmix.h	/^enum Axis {X=0, Y=1, Z=2, W=3};$/;"	e	enum:Axis
X	mesh_visibility/glm/glm/gtx/simd_vec4.hpp	/^		X = 0,$/;"	e	enum:glm::comp
Y	mesh_partition/heap/stdmix.h	/^enum Axis {X=0, Y=1, Z=2, W=3};$/;"	e	enum:Axis
Y	mesh_visibility/glm/glm/gtx/simd_vec4.hpp	/^		Y = 1,$/;"	e	enum:glm::comp
Z	mesh_partition/heap/stdmix.h	/^enum Axis {X=0, Y=1, Z=2, W=3};$/;"	e	enum:Axis
Z	mesh_visibility/glm/glm/gtx/simd_vec4.hpp	/^		Z = 2,$/;"	e	enum:glm::comp
ZERO_MEM	mesh_visibility/gl_util.h	30;"	d
_Bhor	blur_estimation/blur_estimation.h	/^    cv::Mat _Bhor;$/;"	m	class:BlurEstimation
_Bver	blur_estimation/blur_estimation.h	/^    cv::Mat _Bver;$/;"	m	class:BlurEstimation
_F	blur_estimation/blur_estimation.h	/^    cv::Mat _F;$/;"	m	class:BlurEstimation
_GLM_SWIZZLE2_2_MEMBERS	mesh_visibility/glm/glm/detail/_swizzle.hpp	336;"	d
_GLM_SWIZZLE2_3_MEMBERS	mesh_visibility/glm/glm/detail/_swizzle.hpp	342;"	d
_GLM_SWIZZLE2_4_MEMBERS	mesh_visibility/glm/glm/detail/_swizzle.hpp	352;"	d
_GLM_SWIZZLE3_2_MEMBERS	mesh_visibility/glm/glm/detail/_swizzle.hpp	370;"	d
_GLM_SWIZZLE3_3_MEMBERS	mesh_visibility/glm/glm/detail/_swizzle.hpp	381;"	d
_GLM_SWIZZLE3_4_MEMBERS	mesh_visibility/glm/glm/detail/_swizzle.hpp	410;"	d
_GLM_SWIZZLE4_2_MEMBERS	mesh_visibility/glm/glm/detail/_swizzle.hpp	493;"	d
_GLM_SWIZZLE4_3_MEMBERS	mesh_visibility/glm/glm/detail/_swizzle.hpp	511;"	d
_GLM_SWIZZLE4_4_MEMBERS	mesh_visibility/glm/glm/detail/_swizzle.hpp	577;"	d
_GLM_SWIZZLE_FUNCTION_1_ARGS	mesh_visibility/glm/glm/detail/_swizzle.hpp	242;"	d
_GLM_SWIZZLE_FUNCTION_2_ARGS	mesh_visibility/glm/glm/detail/_swizzle.hpp	252;"	d
_GLM_SWIZZLE_FUNCTION_2_ARGS_SCALAR	mesh_visibility/glm/glm/detail/_swizzle.hpp	277;"	d
_GLM_SWIZZLE_SCALAR_BINARY_OPERATOR_IMPLEMENTATION	mesh_visibility/glm/glm/detail/_swizzle.hpp	227;"	d
_GLM_SWIZZLE_TEMPLATE1	mesh_visibility/glm/glm/detail/_swizzle.hpp	199;"	d
_GLM_SWIZZLE_TEMPLATE2	mesh_visibility/glm/glm/detail/_swizzle.hpp	200;"	d
_GLM_SWIZZLE_TYPE1	mesh_visibility/glm/glm/detail/_swizzle.hpp	201;"	d
_GLM_SWIZZLE_TYPE2	mesh_visibility/glm/glm/detail/_swizzle.hpp	202;"	d
_GLM_SWIZZLE_VECTOR_BINARY_OPERATOR_IMPLEMENTATION	mesh_visibility/glm/glm/detail/_swizzle.hpp	207;"	d
_WIN32	mesh_visibility/glfw/glfw3.h	77;"	d
__has_feature	mesh_visibility/glm/glm/detail/setup.hpp	1001;"	d
_apply_op	mesh_visibility/glm/glm/detail/_swizzle.hpp	/^		GLM_FUNC_QUALIFIER void _apply_op(const VecType& that, T op)$/;"	f	struct:glm::detail::_swizzle_base2
_array_alloc_policy	mesh_partition/heap/MxBlock.h	/^enum _array_alloc_policy$/;"	g
_buffer	mesh_visibility/glm/glm/detail/_swizzle.hpp	/^		char    _buffer[1];$/;"	m	struct:glm::detail::_swizzle_base0
_glfw3_h_	mesh_visibility/glfw/glfw3.h	30;"	d
_glfw3_native_h_	mesh_visibility/glfw/glfw3native.h	30;"	d
_mm_castpd_ps	mesh_visibility/glm/glm/detail/setup.hpp	/^		inline __m128 _mm_castpd_ps(__m128d PD) { union { __m128 ps; __m128d pd; } c; c.pd = PD; return c.ps; }$/;"	f
_mm_castps_pd	mesh_visibility/glm/glm/detail/setup.hpp	/^		inline __m128d _mm_castps_pd(__m128 PS) { union { __m128 ps; __m128d pd; } c; c.ps = PS; return c.pd; }$/;"	f
_mm_castps_si128	mesh_visibility/glm/glm/detail/setup.hpp	/^		inline __m128i _mm_castps_si128(__m128 PS) { union { __m128 ps; __m128i pi; } c; c.ps = PS; return c.pi; }$/;"	f
_mm_castsi128_ps	mesh_visibility/glm/glm/detail/setup.hpp	/^		inline __m128 _mm_castsi128_ps(__m128i PI) { union { __m128 ps; __m128i pi; } c; c.pi = PI; return c.ps; }$/;"	f
_mm_cvtss_f32	mesh_visibility/glm/glm/detail/setup.hpp	/^		inline float _mm_cvtss_f32(__m128 A) { return A.m128_f32[0]; }$/;"	f
_swizzle	mesh_visibility/glm/glm/detail/_swizzle.hpp	/^	struct _swizzle : public _swizzle_base2<ValueType, P, VecType, N, E0, E1, E2, E3, (E0==E1||E0==E2||E0==E3||E1==E2||E1==E3||E2==E3)>$/;"	s	namespace:glm::detail
_swizzle_base0	mesh_visibility/glm/glm/detail/_swizzle.hpp	/^	struct _swizzle_base0$/;"	s	namespace:glm::detail
_swizzle_base1	mesh_visibility/glm/glm/detail/_swizzle.hpp	/^	struct _swizzle_base1 : public _swizzle_base0<T, N>$/;"	s	namespace:glm::detail
_swizzle_base1	mesh_visibility/glm/glm/detail/_swizzle.hpp	/^	struct _swizzle_base1<T, P, V,E0,E1,-1,-2,2> : public _swizzle_base0<T, 2>$/;"	s	namespace:glm::detail
_swizzle_base1	mesh_visibility/glm/glm/detail/_swizzle.hpp	/^	struct _swizzle_base1<T, P, V,E0,E1,E2,-1,3> : public _swizzle_base0<T, 3>$/;"	s	namespace:glm::detail
_swizzle_base1	mesh_visibility/glm/glm/detail/_swizzle.hpp	/^	struct _swizzle_base1<T, P, V,E0,E1,E2,E3,4> : public _swizzle_base0<T, 4>$/;"	s	namespace:glm::detail
_swizzle_base2	mesh_visibility/glm/glm/detail/_swizzle.hpp	/^	struct _swizzle_base2 : public _swizzle_base1<ValueType, P, VecType,E0,E1,E2,E3,N>$/;"	s	namespace:glm::detail
_swizzle_base2	mesh_visibility/glm/glm/detail/_swizzle.hpp	/^	struct _swizzle_base2<ValueType, P, VecType,N,E0,E1,E2,E3,1> : public _swizzle_base1<ValueType, P, VecType,E0,E1,E2,E3,N>$/;"	s	namespace:glm::detail
a	mesh_visibility/glm/glm/detail/type_vec4.hpp	/^				struct { T r, g, b, a; };$/;"	m	struct:glm::tvec4::__anon1::__anon3
a	mesh_visibility/glm/glm/detail/type_vec4.hpp	/^			union { T w, a, q; };$/;"	m	union:glm::tvec4::__anon8
add	mesh_partition/heap/MxDynBlock.h	/^    T& add()$/;"	f	class:MxDynBlock
add	mesh_partition/heap/MxDynBlock.h	/^    void add(const T& t) { add() = t; }$/;"	f	class:MxDynBlock
ambient	mesh_visibility/glm/glm/detail/dummy.cpp	/^	glm::vec4 ambient; \/\/ Acli$/;"	m	struct:light	file:
ambient	mesh_visibility/glm/glm/detail/dummy.cpp	/^	glm::vec4 ambient; \/\/ Acm$/;"	m	struct:material	file:
applyFaceEdgeContraction	mesh_partition/partition.cpp	/^void Partition::applyFaceEdgeContraction(Edge* edge)$/;"	f	class:Partition
applyVtxEdgeContraction	mesh_partition/partition.cpp	/^void Partition::applyVtxEdgeContraction(Edge* edge, int cluster_idx)$/;"	f	class:Partition
area	mesh_texture_opt/mesh_opt.h	/^        int width, height, area;                  \/\/ parameters of the patch rectangle$/;"	m	struct:RGBDMeshOpt::TexturePatch
area_	common/covariance.h	/^    double area_;$/;"	m	class:CovObj
assert	mesh_partition/heap/stdmix.h	80;"	d
assert	mesh_partition/heap/stdmix.h	84;"	d
assert	mesh_partition/heap/stdmix.h	88;"	d
atan2	mesh_visibility/glm/glm/gtx/compatibility.hpp	/^	template <typename T, precision P> GLM_FUNC_QUALIFIER T atan2(T x, T y){return atan(x, y);}																\/\/!< \\brief Arc tangent. Returns an angle whose tangent is y\/x. The signs of x and y are used to determine what quadrant the angle is in. The range of values returned by this function is [-PI, PI]. Results are undefined if x and y are both 0. (From GLM_GTX_compatibility)$/;"	f	namespace:glm
atan2	mesh_visibility/glm/glm/gtx/compatibility.hpp	/^	template <typename T, precision P> GLM_FUNC_QUALIFIER tvec2<T, P> atan2(const tvec2<T, P>& x, const tvec2<T, P>& y){return atan(x, y);}	\/\/!< \\brief Arc tangent. Returns an angle whose tangent is y\/x. The signs of x and y are used to determine what quadrant the angle is in. The range of values returned by this function is [-PI, PI]. Results are undefined if x and y are both 0. (From GLM_GTX_compatibility)$/;"	f	namespace:glm
atan2	mesh_visibility/glm/glm/gtx/compatibility.hpp	/^	template <typename T, precision P> GLM_FUNC_QUALIFIER tvec3<T, P> atan2(const tvec3<T, P>& x, const tvec3<T, P>& y){return atan(x, y);}	\/\/!< \\brief Arc tangent. Returns an angle whose tangent is y\/x. The signs of x and y are used to determine what quadrant the angle is in. The range of values returned by this function is [-PI, PI]. Results are undefined if x and y are both 0. (From GLM_GTX_compatibility)$/;"	f	namespace:glm
atan2	mesh_visibility/glm/glm/gtx/compatibility.hpp	/^	template <typename T, precision P> GLM_FUNC_QUALIFIER tvec4<T, P> atan2(const tvec4<T, P>& x, const tvec4<T, P>& y){return atan(x, y);}	\/\/!< \\brief Arc tangent. Returns an angle whose tangent is y\/x. The signs of x and y are used to determine what quadrant the angle is in. The range of values returned by this function is [-PI, PI]. Results are undefined if x and y are both 0. (From GLM_GTX_compatibility)$/;"	f	namespace:glm
b	mesh_visibility/glm/glm/detail/type_vec3.hpp	/^				struct{ T r, g, b; };$/;"	m	struct:glm::tvec3::__anon11::__anon13
b	mesh_visibility/glm/glm/detail/type_vec3.hpp	/^			union { T z, b, p; };$/;"	m	union:glm::tvec3::__anon17
b	mesh_visibility/glm/glm/detail/type_vec4.hpp	/^				struct { T r, g, b, a; };$/;"	m	struct:glm::tvec4::__anon1::__anon3
b	mesh_visibility/glm/glm/detail/type_vec4.hpp	/^			union { T z, b, p; };$/;"	m	union:glm::tvec4::__anon7
b_	mesh_partition/qemquadrics.h	/^    Vector3d b_;$/;"	m	class:QEMQuadrics
barycentrics	mesh_texture_opt/mesh_opt.h	/^        Vector3d barycentrics;$/;"	m	struct:RGBDMeshOpt::Texel
base_type	mesh_visibility/glm/glm/detail/_swizzle.hpp	/^		typedef _swizzle_base2<ValueType, P, VecType,N,E0,E1,E2,E3,(E0==E1||E0==E2||E0==E3||E1==E2||E1==E3||E2==E3)> base_type;$/;"	t	struct:glm::detail::_swizzle
base_vtx_index	mesh_texture_opt/mesh_opt.h	/^        int base_vtx_index;                       \/\/ for writing texture OBJ mesh$/;"	m	struct:RGBDMeshOpt::TexturePatch
basic_format_saver	mesh_visibility/glm/glm/gtx/io.hpp	/^		class basic_format_saver$/;"	c	namespace:glm::io
basic_state_saver	mesh_visibility/glm/glm/gtx/io.hpp	/^		class basic_state_saver {$/;"	c	namespace:glm::io
begin	mesh_partition/heap/MxBlock.h	/^    const_iterator begin() const { return block; }$/;"	f	class:MxBlock
begin	mesh_partition/heap/MxBlock.h	/^    iterator begin() { return block; }$/;"	f	class:MxBlock
begin	mesh_visibility/glm/glm/gtx/range.hpp	/^	const typename genType::value_type * begin(genType const & v){$/;"	f	namespace:glm
begin	mesh_visibility/glm/glm/gtx/range.hpp	/^	typename genType::value_type * begin(genType& v){$/;"	f	namespace:glm
bindForReading	mesh_visibility/gbuffer.cpp	/^void GBuffer::bindForReading()$/;"	f	class:GBuffer
bindForWriting	mesh_visibility/gbuffer.cpp	/^void GBuffer::bindForWriting()$/;"	f	class:GBuffer
bitcopy	mesh_partition/heap/MxBlock.h	/^    void bitcopy(const MxBlock<T> &b) { bitcopy(b, b.length()); }$/;"	f	class:MxBlock
bitcopy	mesh_partition/heap/MxBlock.h	/^    void bitcopy(const T *a, int n)  \/\/ copy bits directly$/;"	f	class:MxBlock
block	mesh_partition/heap/MxBlock.h	/^    T *block;$/;"	m	class:MxBlock
blue	mesh_visibility/glfw/glfw3.h	/^    unsigned short* blue;$/;"	m	struct:GLFWgammaramp
blueBits	mesh_visibility/glfw/glfw3.h	/^    int blueBits;$/;"	m	struct:GLFWvidmode
blur	blur_estimation/blur_estimation.cpp	/^void BlurEstimation::blur()$/;"	f	class:BlurEstimation
blx	mesh_texture_opt/mesh_opt.h	/^        int blx, bly;                             \/\/ bottom-left corner point in texture image$/;"	m	struct:RGBDMeshOpt::TexturePatch
bly	mesh_texture_opt/mesh_opt.h	/^        int blx, bly;                             \/\/ bottom-left corner point in texture image$/;"	m	struct:RGBDMeshOpt::TexturePatch
bool1	mesh_visibility/glm/glm/gtx/compatibility.hpp	/^	typedef bool						bool1;			\/\/!< \\brief boolean type with 1 component. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
bool1x1	mesh_visibility/glm/glm/gtx/compatibility.hpp	/^	typedef bool						bool1x1;		\/\/!< \\brief boolean matrix with 1 x 1 component. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
bool2	mesh_visibility/glm/glm/gtx/compatibility.hpp	/^	typedef tvec2<bool, highp>			bool2;			\/\/!< \\brief boolean type with 2 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
bool2x2	mesh_visibility/glm/glm/gtx/compatibility.hpp	/^	typedef tmat2x2<bool, highp>		bool2x2;		\/\/!< \\brief boolean matrix with 2 x 2 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
bool2x3	mesh_visibility/glm/glm/gtx/compatibility.hpp	/^	typedef tmat2x3<bool, highp>		bool2x3;		\/\/!< \\brief boolean matrix with 2 x 3 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
bool2x4	mesh_visibility/glm/glm/gtx/compatibility.hpp	/^	typedef tmat2x4<bool, highp>		bool2x4;		\/\/!< \\brief boolean matrix with 2 x 4 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
bool3	mesh_visibility/glm/glm/gtx/compatibility.hpp	/^	typedef tvec3<bool, highp>			bool3;			\/\/!< \\brief boolean type with 3 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
bool3x2	mesh_visibility/glm/glm/gtx/compatibility.hpp	/^	typedef tmat3x2<bool, highp>		bool3x2;		\/\/!< \\brief boolean matrix with 3 x 2 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
bool3x3	mesh_visibility/glm/glm/gtx/compatibility.hpp	/^	typedef tmat3x3<bool, highp>		bool3x3;		\/\/!< \\brief boolean matrix with 3 x 3 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
bool3x4	mesh_visibility/glm/glm/gtx/compatibility.hpp	/^	typedef tmat3x4<bool, highp>		bool3x4;		\/\/!< \\brief boolean matrix with 3 x 4 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
bool4	mesh_visibility/glm/glm/gtx/compatibility.hpp	/^	typedef tvec4<bool, highp>			bool4;			\/\/!< \\brief boolean type with 4 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
bool4x2	mesh_visibility/glm/glm/gtx/compatibility.hpp	/^	typedef tmat4x2<bool, highp>		bool4x2;		\/\/!< \\brief boolean matrix with 4 x 2 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
bool4x3	mesh_visibility/glm/glm/gtx/compatibility.hpp	/^	typedef tmat4x3<bool, highp>		bool4x3;		\/\/!< \\brief boolean matrix with 4 x 3 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
bool4x4	mesh_visibility/glm/glm/gtx/compatibility.hpp	/^	typedef tmat4x4<bool, highp>		bool4x4;		\/\/!< \\brief boolean matrix with 4 x 4 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
bool_type	mesh_visibility/glm/glm/detail/type_gentype.hpp	/^		typedef TYPE<bool> bool_type;$/;"	t	struct:glm::detail::genType
bool_type	mesh_visibility/glm/glm/detail/type_vec1.hpp	/^		typedef tvec1<bool, P> bool_type;$/;"	t	struct:glm::tvec1
bool_type	mesh_visibility/glm/glm/detail/type_vec2.hpp	/^		typedef tvec2<bool, P> bool_type;$/;"	t	struct:glm::tvec2
bool_type	mesh_visibility/glm/glm/detail/type_vec3.hpp	/^		typedef tvec3<bool, P> bool_type;$/;"	t	struct:glm::tvec3
bool_type	mesh_visibility/glm/glm/detail/type_vec4.hpp	/^		typedef tvec4<bool, P> bool_type;$/;"	t	struct:glm::tvec4
border_edges_	mesh_partition/partition.h	/^    unordered_set<long long> border_edges_;                      \/\/ mesh border and cluster border edges$/;"	m	class:Partition
bss_	mesh_visibility/glm/glm/gtx/io.hpp	/^			basic_state_saver<CTy> const bss_;$/;"	m	class:glm::io::basic_format_saver
bvec1	mesh_visibility/glm/glm/gtc/vec1.hpp	/^	typedef highp_bvec1				bvec1;$/;"	t	namespace:glm
bvec1	mesh_visibility/glm/glm/gtc/vec1.hpp	/^	typedef lowp_bvec1				bvec1;$/;"	t	namespace:glm
bvec1	mesh_visibility/glm/glm/gtc/vec1.hpp	/^	typedef mediump_bvec1			bvec1;$/;"	t	namespace:glm
bvec2	mesh_visibility/glm/glm/detail/type_vec.hpp	/^	typedef highp_bvec2			bvec2;$/;"	t	namespace:glm
bvec2	mesh_visibility/glm/glm/detail/type_vec.hpp	/^	typedef lowp_bvec2			bvec2;$/;"	t	namespace:glm
bvec2	mesh_visibility/glm/glm/detail/type_vec.hpp	/^	typedef mediump_bvec2		bvec2;$/;"	t	namespace:glm
bvec3	mesh_visibility/glm/glm/detail/type_vec.hpp	/^	typedef highp_bvec3			bvec3;$/;"	t	namespace:glm
bvec3	mesh_visibility/glm/glm/detail/type_vec.hpp	/^	typedef lowp_bvec3			bvec3;$/;"	t	namespace:glm
bvec3	mesh_visibility/glm/glm/detail/type_vec.hpp	/^	typedef mediump_bvec3		bvec3;$/;"	t	namespace:glm
bvec4	mesh_visibility/glm/glm/detail/type_vec.hpp	/^	typedef highp_bvec4			bvec4;$/;"	t	namespace:glm
bvec4	mesh_visibility/glm/glm/detail/type_vec.hpp	/^	typedef lowp_bvec4			bvec4;$/;"	t	namespace:glm
bvec4	mesh_visibility/glm/glm/detail/type_vec.hpp	/^	typedef mediump_bvec4		bvec4;$/;"	t	namespace:glm
byte	mesh_visibility/glm/glm/gtx/raw_data.hpp	/^	typedef detail::uint8		byte;$/;"	t	namespace:glm
c_	mesh_partition/qemquadrics.h	/^    double c_;$/;"	m	class:QEMQuadrics
calDifferenceHor	blur_estimation/blur_estimation.cpp	/^void BlurEstimation::calDifferenceHor(const cv::Mat &input, cv::Mat &output)$/;"	f	class:BlurEstimation
calDifferenceVer	blur_estimation/blur_estimation.cpp	/^void BlurEstimation::calDifferenceVer(const cv::Mat &input, cv::Mat &output)$/;"	f	class:BlurEstimation
calV	blur_estimation/blur_estimation.cpp	/^void BlurEstimation::calV(const cv::Mat &m1, const cv::Mat &m2, cv::Mat &output)$/;"	f	class:BlurEstimation
call	mesh_visibility/glm/glm/detail/_vectorize.hpp	/^		GLM_FUNC_QUALIFIER static tvec1<R, P> call(R (*Func) (T x), tvec1<T, P> const & v)$/;"	f	struct:glm::detail::functor1
call	mesh_visibility/glm/glm/detail/_vectorize.hpp	/^		GLM_FUNC_QUALIFIER static tvec1<T, P> call(T (*Func) (T x, T y), tvec1<T, P> const & a, T b)$/;"	f	struct:glm::detail::functor2_vec_sca
call	mesh_visibility/glm/glm/detail/_vectorize.hpp	/^		GLM_FUNC_QUALIFIER static tvec1<T, P> call(T (*Func) (T x, T y), tvec1<T, P> const & a, tvec1<T, P> const & b)$/;"	f	struct:glm::detail::functor2
call	mesh_visibility/glm/glm/detail/_vectorize.hpp	/^		GLM_FUNC_QUALIFIER static tvec2<R, P> call(R (*Func) (T x), tvec2<T, P> const & v)$/;"	f	struct:glm::detail::functor1
call	mesh_visibility/glm/glm/detail/_vectorize.hpp	/^		GLM_FUNC_QUALIFIER static tvec2<T, P> call(T (*Func) (T x, T y), tvec2<T, P> const & a, T b)$/;"	f	struct:glm::detail::functor2_vec_sca
call	mesh_visibility/glm/glm/detail/_vectorize.hpp	/^		GLM_FUNC_QUALIFIER static tvec2<T, P> call(T (*Func) (T x, T y), tvec2<T, P> const & a, tvec2<T, P> const & b)$/;"	f	struct:glm::detail::functor2
call	mesh_visibility/glm/glm/detail/_vectorize.hpp	/^		GLM_FUNC_QUALIFIER static tvec3<R, P> call(R (*Func) (T x), tvec3<T, P> const & v)$/;"	f	struct:glm::detail::functor1
call	mesh_visibility/glm/glm/detail/_vectorize.hpp	/^		GLM_FUNC_QUALIFIER static tvec3<T, P> call(T (*Func) (T x, T y), tvec3<T, P> const & a, T b)$/;"	f	struct:glm::detail::functor2_vec_sca
call	mesh_visibility/glm/glm/detail/_vectorize.hpp	/^		GLM_FUNC_QUALIFIER static tvec3<T, P> call(T (*Func) (T x, T y), tvec3<T, P> const & a, tvec3<T, P> const & b)$/;"	f	struct:glm::detail::functor2
call	mesh_visibility/glm/glm/detail/_vectorize.hpp	/^		GLM_FUNC_QUALIFIER static tvec4<R, P> call(R (*Func) (T x), tvec4<T, P> const & v)$/;"	f	struct:glm::detail::functor1
call	mesh_visibility/glm/glm/detail/_vectorize.hpp	/^		GLM_FUNC_QUALIFIER static tvec4<T, P> call(T (*Func) (T x, T y), tvec4<T, P> const & a, T b)$/;"	f	struct:glm::detail::functor2_vec_sca
call	mesh_visibility/glm/glm/detail/_vectorize.hpp	/^		GLM_FUNC_QUALIFIER static tvec4<T, P> call(T (*Func) (T x, T y), tvec4<T, P> const & a, tvec4<T, P> const & b)$/;"	f	struct:glm::detail::functor2
cameraToGlobalSpace	mesh_texture_opt/mesh_opt.cpp	/^Vector3d RGBDMeshOpt::cameraToGlobalSpace(const Vector3d& pt, const Matrix4d& T)$/;"	f	class:RGBDMeshOpt
cameraToImgSpace	mesh_texture_opt/mesh_opt.cpp	/^Vector2d RGBDMeshOpt::cameraToImgSpace(const Vector3d& pt, CalibrationParams& calib)$/;"	f	class:RGBDMeshOpt
camera_initial_center_	mesh_visibility/mesh_visibility.h	/^	glm::vec3 camera_initial_center_;$/;"	m	class:MeshVisibility
center	mesh_texture_opt/mesh_opt.h	/^        Vector3d normal, center, opt_normal, opt_center, last_normal;$/;"	m	struct:RGBDMeshOpt::Cluster
center_	common/covariance.h	/^    Vector3d center_;$/;"	m	class:CovObj
char_type	mesh_visibility/glm/glm/gtx/io.hpp	/^			typedef CTy char_type;$/;"	t	class:glm::io::format_punct
char_type	mesh_visibility/glm/glm/gtx/io.hpp	/^			typedef typename state_type::char_type char_type;$/;"	t	class:glm::io::basic_state_saver
checkEdgeContraction	mesh_partition/partition.cpp	/^bool Partition::checkEdgeContraction(Edge* edge)$/;"	f	class:Partition
checkFaceContainsVertices	mesh_partition/partition.h	/^    inline bool checkFaceContainsVertices(int fidx, int v1)$/;"	f	class:Partition
checkFaceContainsVertices	mesh_partition/partition.h	/^    inline bool checkFaceContainsVertices(int fidx, int v1, int v2)$/;"	f	class:Partition
checkFlippedFaces	mesh_partition/partition.cpp	/^bool Partition::checkFlippedFaces(Edge* edge, int endpoint, const Vector3d& contracted_vtx)$/;"	f	class:Partition
clearCov	common/covariance.cpp	/^void CovObj::clearCov()$/;"	f	class:CovObj
clearParams	mesh_texture_opt/mesh_opt.h	/^        void clearParams()$/;"	f	struct:RGBDMeshOpt::CalibrationParams
cluster_id	mesh_partition/partition.h	/^        int cluster_id;$/;"	m	struct:Partition::Face
cluster_id	mesh_partition/partition.h	/^        int cluster_id;$/;"	m	struct:Partition::Vertex
cluster_id	mesh_texture_opt/mesh_opt.h	/^        int cluster_id;                           \/\/ corresponding cluster index$/;"	m	struct:RGBDMeshOpt::TexturePatch
cluster_id	mesh_texture_opt/mesh_opt.h	/^        int cluster_id;$/;"	m	struct:RGBDMeshOpt::Face
cluster_id	mesh_texture_opt/mesh_opt.h	/^        int cluster_id;$/;"	m	struct:RGBDMeshOpt::Vertex
cluster_inner_edges_	mesh_partition/partition.h	/^    unordered_map<int, vector<long long>> cluster_inner_edges_;  \/\/ edges inside each cluster$/;"	m	class:Partition
cluster_num_	mesh_texture_opt/mesh_opt.h	/^    int vertex_num_, face_num_, cluster_num_;$/;"	m	class:RGBDMeshOpt
clusters_	mesh_partition/partition.h	/^    vector<Cluster> clusters_;$/;"	m	class:Partition
clusters_	mesh_texture_opt/mesh_opt.h	/^    vector<Cluster> clusters_;$/;"	m	class:RGBDMeshOpt
clusters_in_swap_	mesh_partition/partition.h	/^    unordered_set<int> clusters_in_swap_, last_clusters_in_swap_;$/;"	m	class:Partition
col_type	mesh_visibility/glm/glm/detail/type_mat2x2.hpp	/^		typedef tvec2<T, P> col_type;$/;"	t	struct:glm::tmat2x2
col_type	mesh_visibility/glm/glm/detail/type_mat2x3.hpp	/^		typedef tvec3<T, P> col_type;$/;"	t	struct:glm::tmat2x3
col_type	mesh_visibility/glm/glm/detail/type_mat2x4.hpp	/^		typedef tvec4<T, P> col_type;$/;"	t	struct:glm::tmat2x4
col_type	mesh_visibility/glm/glm/detail/type_mat3x2.hpp	/^		typedef tvec2<T, P> col_type;$/;"	t	struct:glm::tmat3x2
col_type	mesh_visibility/glm/glm/detail/type_mat3x3.hpp	/^		typedef tvec3<T, P> col_type;$/;"	t	struct:glm::tmat3x3
col_type	mesh_visibility/glm/glm/detail/type_mat3x4.hpp	/^		typedef tvec4<T, P> col_type;$/;"	t	struct:glm::tmat3x4
col_type	mesh_visibility/glm/glm/detail/type_mat4x2.hpp	/^		typedef tvec2<T, P> col_type;$/;"	t	struct:glm::tmat4x2
col_type	mesh_visibility/glm/glm/detail/type_mat4x3.hpp	/^		typedef tvec3<T, P> col_type;$/;"	t	struct:glm::tmat4x3
col_type	mesh_visibility/glm/glm/detail/type_mat4x4.hpp	/^		typedef tvec4<T, P> col_type;$/;"	t	struct:glm::tmat4x4
color	mesh_partition/partition.h	/^        Vector3f color;$/;"	m	struct:Partition::Cluster
color	mesh_texture_opt/mesh_opt.h	/^        Vector3f color;$/;"	m	struct:RGBDMeshOpt::Cluster
color	mesh_visibility/mesh_visibility.h	/^	glm::vec3 color; \/\/ color$/;"	m	struct:Vertex
color_calib_	mesh_texture_opt/mesh_opt.h	/^    CalibrationParams color_calib_, depth_calib_;$/;"	m	class:RGBDMeshOpt
color_height_	mesh_texture_opt/mesh_opt.h	/^    int color_width_, color_height_, depth_width_, depth_height_;$/;"	m	class:RGBDMeshOpt
color_img	mesh_texture_opt/mesh_opt.h	/^        cv::Mat color_img, depth_img, gray_img;$/;"	m	struct:RGBDMeshOpt::Frame
color_width_	mesh_texture_opt/mesh_opt.h	/^    int color_width_, color_height_, depth_width_, depth_height_;$/;"	m	class:RGBDMeshOpt
cols	mesh_visibility/glm/glm/detail/type_mat2x2.hpp	/^			static GLM_RELAXED_CONSTEXPR length_t cols = 2;$/;"	m	struct:glm::tmat2x2
cols	mesh_visibility/glm/glm/detail/type_mat2x3.hpp	/^			static GLM_RELAXED_CONSTEXPR length_t cols = 2;$/;"	m	struct:glm::tmat2x3
cols	mesh_visibility/glm/glm/detail/type_mat2x4.hpp	/^			static GLM_RELAXED_CONSTEXPR length_t cols = 2;$/;"	m	struct:glm::tmat2x4
cols	mesh_visibility/glm/glm/detail/type_mat3x2.hpp	/^			static GLM_RELAXED_CONSTEXPR length_t cols = 3;$/;"	m	struct:glm::tmat3x2
cols	mesh_visibility/glm/glm/detail/type_mat3x3.hpp	/^			static GLM_RELAXED_CONSTEXPR length_t cols = 3;$/;"	m	struct:glm::tmat3x3
cols	mesh_visibility/glm/glm/detail/type_mat3x4.hpp	/^			static GLM_RELAXED_CONSTEXPR length_t cols = 3;$/;"	m	struct:glm::tmat3x4
cols	mesh_visibility/glm/glm/detail/type_mat4x2.hpp	/^			static GLM_RELAXED_CONSTEXPR length_t cols = 4;$/;"	m	struct:glm::tmat4x2
cols	mesh_visibility/glm/glm/detail/type_mat4x3.hpp	/^			static GLM_RELAXED_CONSTEXPR length_t cols = 4;$/;"	m	struct:glm::tmat4x3
cols	mesh_visibility/glm/glm/detail/type_mat4x4.hpp	/^			static GLM_RELAXED_CONSTEXPR length_t cols = 4;$/;"	m	struct:glm::tmat4x4
column_major	mesh_visibility/glm/glm/gtx/io.hpp	/^		enum order_type { column_major, row_major};$/;"	e	enum:glm::io::order_type
comp	mesh_visibility/glm/glm/gtx/simd_vec4.hpp	/^	enum comp$/;"	g	namespace:glm
component_count	mesh_visibility/glm/glm/detail/setup.hpp	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR component_count_t component_count(genType const & m)$/;"	f	namespace:glm::detail
component_count_t	mesh_visibility/glm/glm/detail/setup.hpp	/^		typedef size_t component_count_t;$/;"	t	namespace:glm::detail
component_id_x	mesh_texture_opt/mesh_opt.h	/^        int component_id_x, component_id_y;  \/\/ (x,y) index inside a connected component$/;"	m	struct:RGBDMeshOpt::Vertex
component_id_y	mesh_texture_opt/mesh_opt.h	/^        int component_id_x, component_id_y;  \/\/ (x,y) index inside a connected component$/;"	m	struct:RGBDMeshOpt::Vertex
components	mesh_visibility/glm/glm/detail/type_mat2x2.hpp	/^			static GLM_RELAXED_CONSTEXPR length_t components = 2;$/;"	m	struct:glm::tmat2x2
components	mesh_visibility/glm/glm/detail/type_mat2x3.hpp	/^			static GLM_RELAXED_CONSTEXPR length_t components = 2;$/;"	m	struct:glm::tmat2x3
components	mesh_visibility/glm/glm/detail/type_mat2x4.hpp	/^			static GLM_RELAXED_CONSTEXPR length_t components = 2;$/;"	m	struct:glm::tmat2x4
components	mesh_visibility/glm/glm/detail/type_mat3x2.hpp	/^			static GLM_RELAXED_CONSTEXPR length_t components = 3;$/;"	m	struct:glm::tmat3x2
components	mesh_visibility/glm/glm/detail/type_mat3x3.hpp	/^			static GLM_RELAXED_CONSTEXPR length_t components = 3;$/;"	m	struct:glm::tmat3x3
components	mesh_visibility/glm/glm/detail/type_mat3x4.hpp	/^			static GLM_RELAXED_CONSTEXPR length_t components = 3;$/;"	m	struct:glm::tmat3x4
components	mesh_visibility/glm/glm/detail/type_mat4x2.hpp	/^			static GLM_RELAXED_CONSTEXPR length_t components = 4;$/;"	m	struct:glm::tmat4x2
components	mesh_visibility/glm/glm/detail/type_mat4x3.hpp	/^			static GLM_RELAXED_CONSTEXPR length_t components = 4;$/;"	m	struct:glm::tmat4x3
components	mesh_visibility/glm/glm/detail/type_mat4x4.hpp	/^			static GLM_RELAXED_CONSTEXPR length_t components = 4;$/;"	m	struct:glm::tmat4x4
components	mesh_visibility/glm/glm/detail/type_vec1.hpp	/^			static GLM_RELAXED_CONSTEXPR length_t components = 1;$/;"	m	struct:glm::tvec1
components	mesh_visibility/glm/glm/detail/type_vec2.hpp	/^			static GLM_RELAXED_CONSTEXPR length_t components = 2;$/;"	m	struct:glm::tvec2
components	mesh_visibility/glm/glm/detail/type_vec3.hpp	/^			static GLM_RELAXED_CONSTEXPR length_t components = 3;$/;"	m	struct:glm::tvec3
components	mesh_visibility/glm/glm/detail/type_vec4.hpp	/^			static GLM_RELAXED_CONSTEXPR length_t components = 4;$/;"	m	struct:glm::tvec4
components	mesh_visibility/glm/glm/gtc/quaternion.hpp	/^			static GLM_RELAXED_CONSTEXPR length_t components = 4;$/;"	m	struct:glm::tquat
components	mesh_visibility/glm/glm/gtx/dual_quaternion.hpp	/^			static GLM_RELAXED_CONSTEXPR length_t components = 2;$/;"	m	struct:glm::tdualquat
compute2DPointGraycolorBilinear	mesh_texture_opt/mesh_opt.cpp	/^double RGBDMeshOpt::compute2DPointGraycolorBilinear(const Vector2d& pt2, int frame_idx)$/;"	f	class:RGBDMeshOpt
compute2DPointGraycolorGradientBilinear	mesh_texture_opt/mesh_opt.cpp	/^Vector2d RGBDMeshOpt::compute2DPointGraycolorGradientBilinear(const Vector2d& pt2, int frame_idx)$/;"	f	class:RGBDMeshOpt
compute2DPointRGBcolorBilinear	mesh_texture_opt/mesh_opt.cpp	/^Vector3f RGBDMeshOpt::compute2DPointRGBcolorBilinear(const Vector2d& pt2, int frame_idx)$/;"	f	class:RGBDMeshOpt
compute3DpointFromDepth	mesh_visibility/mesh_visibility.h	/^	glm::vec4 compute3DpointFromDepth(int row, int col, float depth){$/;"	f	class:MeshVisibility
computeAllTexelColors	mesh_texture_opt/mesh_opt.cpp	/^void RGBDMeshOpt::computeAllTexelColors()$/;"	f	class:RGBDMeshOpt
computeAvgDisBtwTwoPlanes	mesh_partition/partition.cpp	/^double Partition::computeAvgDisBtwTwoPlanes(int c1, int c2)$/;"	f	class:Partition
computeBarycentricCoordinates	mesh_texture_opt/mesh_opt.cpp	/^bool RGBDMeshOpt::computeBarycentricCoordinates($/;"	f	class:RGBDMeshOpt
computeEdgeEnergy	mesh_partition/partition.cpp	/^void Partition::computeEdgeEnergy(Edge* edge)$/;"	f	class:Partition
computeMaxDisBetweenTwoPlanes	mesh_partition/partition.cpp	/^double Partition::computeMaxDisBetweenTwoPlanes(int c1, int c2, bool flag_use_projection)$/;"	f	class:Partition
computeNormal	mesh_visibility/glm/glm/detail/dummy.cpp	/^glm::vec3 computeNormal$/;"	f
computePerspectiveMatrix	mesh_visibility/mesh_visibility.cpp	/^void MeshVisibility::computePerspectiveMatrix()$/;"	f	class:MeshVisibility
computePixelGraycolorGradient	mesh_texture_opt/mesh_opt.cpp	/^double RGBDMeshOpt::computePixelGraycolorGradient(const Vector2i& pt2, int frame_idx, const double kernel[3][3])$/;"	f	class:RGBDMeshOpt
computePlaneNormal	common/covariance.cpp	/^void CovObj::computePlaneNormal()$/;"	f	class:CovObj
computeSwapDeltaEnergy	mesh_partition/partition.cpp	/^double Partition::computeSwapDeltaEnergy(int fidx, int from, int to)$/;"	f	class:Partition
computeTexelColorByAverage	mesh_texture_opt/mesh_opt.cpp	/^void RGBDMeshOpt::computeTexelColorByAverage(Texel& texel)$/;"	f	class:RGBDMeshOpt
computeTexelsForAllPatches	mesh_texture_opt/mesh_opt.cpp	/^void RGBDMeshOpt::computeTexelsForAllPatches()$/;"	f	class:RGBDMeshOpt
computeTransformation	mesh_visibility/mesh_visibility.cpp	/^glm::mat4 MeshVisibility::computeTransformation()$/;"	f	class:MeshVisibility
computeTransformationForFrame	mesh_visibility/mesh_visibility.cpp	/^glm::mat4 MeshVisibility::computeTransformationForFrame(int frame_idx)$/;"	f	class:MeshVisibility
connected_components_	mesh_texture_opt/mesh_opt.h	/^    vector<vector<int>> connected_components_;$/;"	m	class:RGBDMeshOpt
const_iterator	mesh_partition/heap/MxBlock.h	/^    typedef value_type *const_iterator;$/;"	t	class:MxBlock
const_pointer	mesh_visibility/glm/glm/detail/type_gentype.hpp	/^		typedef TYPE<VALTYPE> const * const_pointer;$/;"	t	struct:glm::detail::genType
const_pointer_const	mesh_visibility/glm/glm/detail/type_gentype.hpp	/^		typedef TYPE<VALTYPE> const * const const_pointer_const;$/;"	t	struct:glm::detail::genType
const_reference	mesh_visibility/glm/glm/detail/type_gentype.hpp	/^		typedef TYPE<VALTYPE> const & const_reference;$/;"	t	struct:glm::detail::genType
constantAttenuation	mesh_visibility/glm/glm/detail/dummy.cpp	/^	float constantAttenuation; \/\/ K0$/;"	m	struct:light	file:
context	mesh_partition/heap/mixmsg.h	/^    const char *context;$/;"	m	class:MxMsgInfo
copy	mesh_partition/heap/MxBlock.h	/^    void copy(const MxBlock<T> &b) { copy(b, b.length()); }$/;"	f	class:MxBlock
copy	mesh_partition/heap/MxBlock.h	/^    void copy(const T *a, const int n)  \/\/ copy using assignment operator$/;"	f	class:MxBlock
countof	mesh_visibility/glm/glm/detail/setup.hpp	/^		constexpr std::size_t countof(T const (&)[N])$/;"	f	namespace:glm
cov	mesh_partition/partition.h	/^        CovObj cov;$/;"	m	struct:Partition::Cluster
cov	mesh_partition/partition.h	/^        CovObj cov;$/;"	m	struct:Partition::Face
cov	mesh_texture_opt/mesh_opt.h	/^        CovObj cov;$/;"	m	struct:RGBDMeshOpt::Cluster
cov_	common/covariance.h	/^    Matrix3d cov_;$/;"	m	class:CovObj
createClusterColors	mesh_partition/partition.cpp	/^void Partition::createClusterColors()$/;"	f	class:Partition
createTexturePatches	mesh_texture_opt/mesh_opt.cpp	/^void RGBDMeshOpt::createTexturePatches()$/;"	f	class:RGBDMeshOpt
ctor	mesh_visibility/glm/glm/detail/setup.hpp	/^	enum ctor{uninitialize};$/;"	g	namespace:glm
ctor	mesh_visibility/glm/glm/detail/type_gentype.hpp	/^		enum ctor{null};$/;"	g	struct:glm::detail::genType
curr_cluster_num_	mesh_partition/partition.h	/^    int init_cluster_num_, curr_cluster_num_, target_cluster_num_;$/;"	m	class:Partition
curr_edge_num_	mesh_partition/partition.h	/^    int curr_edge_num_;$/;"	m	class:Partition
curr_global_energy_	mesh_texture_opt/mesh_opt.h	/^    double last_global_energy_, curr_global_energy_, last_color_energy_;$/;"	m	class:RGBDMeshOpt
cx	mesh_texture_opt/mesh_opt.h	/^        double fx, fy, cx, cy;$/;"	m	struct:RGBDMeshOpt::CalibrationParams
cx_	mesh_visibility/mesh_visibility.h	/^	float fx_, fy_, cx_, cy_; \/\/ intrinsic parameters$/;"	m	class:MeshVisibility
cy	mesh_texture_opt/mesh_opt.h	/^        double fx, fy, cx, cy;$/;"	m	struct:RGBDMeshOpt::CalibrationParams
cy_	mesh_visibility/mesh_visibility.h	/^	float fx_, fy_, cx_, cy_; \/\/ intrinsic parameters$/;"	m	class:MeshVisibility
data	mesh_partition/myheap.h	/^    std::vector<MxHeapable *> data;  \/\/ we keep the pointers in the heap$/;"	m	class:MxHeap
data	mesh_visibility/glm/glm/detail/type_vec4.hpp	/^				typename detail::simd_data<T, P>::type data;$/;"	m	union:glm::tvec4::__anon1
ddualquat	mesh_visibility/glm/glm/gtx/dual_quaternion.hpp	/^	typedef highp_ddualquat			ddualquat;$/;"	t	namespace:glm
ddualquat	mesh_visibility/glm/glm/gtx/dual_quaternion.hpp	/^	typedef lowp_ddualquat			ddualquat;$/;"	t	namespace:glm
ddualquat	mesh_visibility/glm/glm/gtx/dual_quaternion.hpp	/^	typedef mediump_ddualquat		ddualquat;$/;"	t	namespace:glm
deallocate	mesh_visibility/mesh_visibility.cpp	/^void MeshVisibility::deallocate()$/;"	f	class:MeshVisibility
defaultp	mesh_visibility/glm/glm/detail/precision.hpp	/^		defaultp = highp$/;"	e	enum:glm::precision
deleteProgram	mesh_visibility/shader.h	/^    void deleteProgram() { glDeleteProgram(programID_); }$/;"	f	class:Shader
delim_left	mesh_visibility/glm/glm/gtx/io.hpp	/^			char_type  delim_left;$/;"	m	class:glm::io::format_punct
delim_right	mesh_visibility/glm/glm/gtx/io.hpp	/^			char_type  delim_right;$/;"	m	class:glm::io::format_punct
delimeter	mesh_visibility/glm/glm/gtx/io.hpp	/^		struct delimeter$/;"	s	namespace:glm::io
depthToCameraSpace	mesh_texture_opt/mesh_opt.cpp	/^Vector3d RGBDMeshOpt::depthToCameraSpace(int ux, int uy, double depth)$/;"	f	class:RGBDMeshOpt
depthToGlobalSpace	mesh_texture_opt/mesh_opt.cpp	/^Vector3d RGBDMeshOpt::depthToGlobalSpace(int ux, int uy, double depth, const Matrix4d& T)$/;"	f	class:RGBDMeshOpt
depth_calib_	mesh_texture_opt/mesh_opt.h	/^    CalibrationParams color_calib_, depth_calib_;$/;"	m	class:RGBDMeshOpt
depth_height_	mesh_texture_opt/mesh_opt.h	/^    int color_width_, color_height_, depth_width_, depth_height_;$/;"	m	class:RGBDMeshOpt
depth_img	mesh_texture_opt/mesh_opt.h	/^        cv::Mat color_img, depth_img, gray_img;$/;"	m	struct:RGBDMeshOpt::Frame
depth_scale_factor_	mesh_texture_opt/mesh_opt.h	/^    double depth_scale_factor_;$/;"	m	class:RGBDMeshOpt
depth_width_	mesh_texture_opt/mesh_opt.h	/^    int color_width_, color_height_, depth_width_, depth_height_;$/;"	m	class:RGBDMeshOpt
destroy	mesh_partition/myheap.h	/^    void destroy()$/;"	f	class:MxHeap
detail	mesh_visibility/glm/glm/detail/_noise.hpp	/^namespace detail$/;"	n	namespace:glm
detail	mesh_visibility/glm/glm/detail/_swizzle.hpp	/^	namespace detail$/;"	n	namespace:glm
detail	mesh_visibility/glm/glm/detail/_swizzle.hpp	/^namespace detail$/;"	n	namespace:glm
detail	mesh_visibility/glm/glm/detail/_vectorize.hpp	/^namespace detail$/;"	n	namespace:glm
detail	mesh_visibility/glm/glm/detail/func_matrix.hpp	/^namespace detail$/;"	n	namespace:glm
detail	mesh_visibility/glm/glm/detail/intrinsic_common.hpp	/^namespace detail$/;"	n	namespace:glm
detail	mesh_visibility/glm/glm/detail/intrinsic_exponential.hpp	/^namespace detail$/;"	n	namespace:glm
detail	mesh_visibility/glm/glm/detail/intrinsic_geometric.hpp	/^namespace detail$/;"	n	namespace:glm
detail	mesh_visibility/glm/glm/detail/intrinsic_integer.hpp	/^namespace detail$/;"	n	namespace:glm
detail	mesh_visibility/glm/glm/detail/intrinsic_matrix.hpp	/^namespace detail$/;"	n	namespace:glm
detail	mesh_visibility/glm/glm/detail/intrinsic_trigonometric.hpp	/^namespace detail$/;"	n	namespace:glm
detail	mesh_visibility/glm/glm/detail/intrinsic_vector_relational.hpp	/^namespace detail$/;"	n	namespace:glm
detail	mesh_visibility/glm/glm/detail/setup.hpp	/^namespace detail$/;"	n	namespace:glm
detail	mesh_visibility/glm/glm/detail/type_float.hpp	/^namespace detail$/;"	n	namespace:glm
detail	mesh_visibility/glm/glm/detail/type_gentype.hpp	/^namespace detail$/;"	n	namespace:glm
detail	mesh_visibility/glm/glm/detail/type_half.hpp	/^namespace detail$/;"	n	namespace:glm
detail	mesh_visibility/glm/glm/detail/type_int.hpp	/^namespace detail$/;"	n	namespace:glm
detail	mesh_visibility/glm/glm/detail/type_mat.hpp	/^namespace detail$/;"	n	namespace:glm
detail	mesh_visibility/glm/glm/detail/type_vec4.hpp	/^namespace detail$/;"	n	namespace:glm
detail	mesh_visibility/glm/glm/gtx/range.hpp	/^namespace detail$/;"	n	namespace:glm
detail	mesh_visibility/glm/glm/gtx/simd_mat4.hpp	/^namespace detail$/;"	n	namespace:glm
detail	mesh_visibility/glm/glm/gtx/simd_quat.hpp	/^namespace detail$/;"	n	namespace:glm
detail	mesh_visibility/glm/glm/gtx/simd_vec4.hpp	/^namespace detail$/;"	n	namespace:glm
diffuse	mesh_visibility/glm/glm/detail/dummy.cpp	/^	glm::vec4 diffuse; \/\/ Dcli$/;"	m	struct:light	file:
diffuse	mesh_visibility/glm/glm/detail/dummy.cpp	/^	glm::vec4 diffuse; \/\/ Dcm$/;"	m	struct:material	file:
dmat2	mesh_visibility/glm/glm/detail/type_mat.hpp	/^	typedef highp_dmat2x2		dmat2;$/;"	t	namespace:glm
dmat2x2	mesh_visibility/glm/glm/detail/type_mat.hpp	/^	typedef highp_dmat2x2		dmat2x2;$/;"	t	namespace:glm
dmat2x2	mesh_visibility/glm/glm/detail/type_mat.hpp	/^	typedef lowp_dmat2x2		dmat2x2;$/;"	t	namespace:glm
dmat2x2	mesh_visibility/glm/glm/detail/type_mat.hpp	/^	typedef mediump_dmat2x2		dmat2x2;$/;"	t	namespace:glm
dmat2x3	mesh_visibility/glm/glm/detail/type_mat.hpp	/^	typedef highp_dmat2x3		dmat2x3;$/;"	t	namespace:glm
dmat2x3	mesh_visibility/glm/glm/detail/type_mat.hpp	/^	typedef lowp_dmat2x3		dmat2x3;$/;"	t	namespace:glm
dmat2x3	mesh_visibility/glm/glm/detail/type_mat.hpp	/^	typedef mediump_dmat2x3		dmat2x3;$/;"	t	namespace:glm
dmat2x4	mesh_visibility/glm/glm/detail/type_mat.hpp	/^	typedef highp_dmat2x4		dmat2x4;$/;"	t	namespace:glm
dmat2x4	mesh_visibility/glm/glm/detail/type_mat.hpp	/^	typedef lowp_dmat2x4		dmat2x4;$/;"	t	namespace:glm
dmat2x4	mesh_visibility/glm/glm/detail/type_mat.hpp	/^	typedef mediump_dmat2x4		dmat2x4;$/;"	t	namespace:glm
dmat3	mesh_visibility/glm/glm/detail/type_mat.hpp	/^	typedef highp_dmat3x3		dmat3;$/;"	t	namespace:glm
dmat3x2	mesh_visibility/glm/glm/detail/type_mat.hpp	/^	typedef highp_dmat3x2		dmat3x2;$/;"	t	namespace:glm
dmat3x2	mesh_visibility/glm/glm/detail/type_mat.hpp	/^	typedef lowp_dmat3x2		dmat3x2;$/;"	t	namespace:glm
dmat3x2	mesh_visibility/glm/glm/detail/type_mat.hpp	/^	typedef mediump_dmat3x2		dmat3x2;$/;"	t	namespace:glm
dmat3x3	mesh_visibility/glm/glm/detail/type_mat.hpp	/^	typedef highp_dmat3x3		dmat3x3;$/;"	t	namespace:glm
dmat3x3	mesh_visibility/glm/glm/detail/type_mat.hpp	/^	typedef lowp_dmat3x3		dmat3x3;$/;"	t	namespace:glm
dmat3x3	mesh_visibility/glm/glm/detail/type_mat.hpp	/^	typedef mediump_dmat3x3		dmat3x3;$/;"	t	namespace:glm
dmat3x4	mesh_visibility/glm/glm/detail/type_mat.hpp	/^	typedef highp_dmat3x4		dmat3x4;$/;"	t	namespace:glm
dmat3x4	mesh_visibility/glm/glm/detail/type_mat.hpp	/^	typedef lowp_dmat3x4		dmat3x4;$/;"	t	namespace:glm
dmat3x4	mesh_visibility/glm/glm/detail/type_mat.hpp	/^	typedef mediump_dmat3x4		dmat3x4;$/;"	t	namespace:glm
dmat4	mesh_visibility/glm/glm/detail/type_mat.hpp	/^	typedef highp_dmat4x4		dmat4;$/;"	t	namespace:glm
dmat4x2	mesh_visibility/glm/glm/detail/type_mat.hpp	/^	typedef highp_dmat4x2		dmat4x2;$/;"	t	namespace:glm
dmat4x2	mesh_visibility/glm/glm/detail/type_mat.hpp	/^	typedef lowp_dmat4x2		dmat4x2;$/;"	t	namespace:glm
dmat4x2	mesh_visibility/glm/glm/detail/type_mat.hpp	/^	typedef mediump_dmat4x2		dmat4x2;$/;"	t	namespace:glm
dmat4x3	mesh_visibility/glm/glm/detail/type_mat.hpp	/^	typedef highp_dmat4x3		dmat4x3;$/;"	t	namespace:glm
dmat4x3	mesh_visibility/glm/glm/detail/type_mat.hpp	/^	typedef lowp_dmat4x3		dmat4x3;$/;"	t	namespace:glm
dmat4x3	mesh_visibility/glm/glm/detail/type_mat.hpp	/^	typedef mediump_dmat4x3		dmat4x3;$/;"	t	namespace:glm
dmat4x4	mesh_visibility/glm/glm/detail/type_mat.hpp	/^	typedef highp_dmat4x4		dmat4x4;$/;"	t	namespace:glm
dmat4x4	mesh_visibility/glm/glm/detail/type_mat.hpp	/^	typedef lowp_dmat4x4		dmat4x4;$/;"	t	namespace:glm
dmat4x4	mesh_visibility/glm/glm/detail/type_mat.hpp	/^	typedef mediump_dmat4x4		dmat4x4;$/;"	t	namespace:glm
double1	mesh_visibility/glm/glm/gtx/compatibility.hpp	/^	typedef double						double1;		\/\/!< \\brief double-precision floating-point vector with 1 component. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
double1x1	mesh_visibility/glm/glm/gtx/compatibility.hpp	/^	typedef double						double1x1;		\/\/!< \\brief double-precision floating-point matrix with 1 component. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
double2	mesh_visibility/glm/glm/gtx/compatibility.hpp	/^	typedef tvec2<double, highp>		double2;		\/\/!< \\brief double-precision floating-point vector with 2 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
double2x2	mesh_visibility/glm/glm/gtx/compatibility.hpp	/^	typedef tmat2x2<double, highp>		double2x2;		\/\/!< \\brief double-precision floating-point matrix with 2 x 2 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
double2x3	mesh_visibility/glm/glm/gtx/compatibility.hpp	/^	typedef tmat2x3<double, highp>		double2x3;		\/\/!< \\brief double-precision floating-point matrix with 2 x 3 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
double2x4	mesh_visibility/glm/glm/gtx/compatibility.hpp	/^	typedef tmat2x4<double, highp>		double2x4;		\/\/!< \\brief double-precision floating-point matrix with 2 x 4 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
double3	mesh_visibility/glm/glm/gtx/compatibility.hpp	/^	typedef tvec3<double, highp>		double3;		\/\/!< \\brief double-precision floating-point vector with 3 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
double3x2	mesh_visibility/glm/glm/gtx/compatibility.hpp	/^	typedef tmat3x2<double, highp>		double3x2;		\/\/!< \\brief double-precision floating-point matrix with 3 x 2 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
double3x3	mesh_visibility/glm/glm/gtx/compatibility.hpp	/^	typedef tmat3x3<double, highp>		double3x3;		\/\/!< \\brief double-precision floating-point matrix with 3 x 3 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
double3x4	mesh_visibility/glm/glm/gtx/compatibility.hpp	/^	typedef tmat3x4<double, highp>		double3x4;		\/\/!< \\brief double-precision floating-point matrix with 3 x 4 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
double4	mesh_visibility/glm/glm/gtx/compatibility.hpp	/^	typedef tvec4<double, highp>		double4;		\/\/!< \\brief double-precision floating-point vector with 4 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
double4x2	mesh_visibility/glm/glm/gtx/compatibility.hpp	/^	typedef tmat4x2<double, highp>		double4x2;		\/\/!< \\brief double-precision floating-point matrix with 4 x 2 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
double4x3	mesh_visibility/glm/glm/gtx/compatibility.hpp	/^	typedef tmat4x3<double, highp>		double4x3;		\/\/!< \\brief double-precision floating-point matrix with 4 x 3 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
double4x4	mesh_visibility/glm/glm/gtx/compatibility.hpp	/^	typedef tmat4x4<double, highp>		double4x4;		\/\/!< \\brief double-precision floating-point matrix with 4 x 4 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
doubleCheckClusters	mesh_partition/partition.cpp	/^void Partition::doubleCheckClusters()$/;"	f	class:Partition
downheap	mesh_partition/heap/MxHeap.cxx	/^void MxHeap::downheap(unsigned int i)$/;"	f	class:MxHeap
downheap	mesh_partition/myheap.h	/^    void downheap(unsigned int i)$/;"	f	class:MxHeap
dquat	mesh_visibility/glm/glm/fwd.hpp	/^	typedef highp_dquat			dquat;$/;"	t	namespace:glm
dquat	mesh_visibility/glm/glm/fwd.hpp	/^	typedef lowp_dquat			dquat;$/;"	t	namespace:glm
dquat	mesh_visibility/glm/glm/fwd.hpp	/^	typedef mediump_dquat		dquat;$/;"	t	namespace:glm
draw	mesh_visibility/mesh_visibility.cpp	/^void MeshVisibility::draw()$/;"	f	class:MeshVisibility
drop	mesh_partition/heap/MxDynBlock.h	/^    T& drop() { return (*this)[--fill]; }$/;"	f	class:MxDynBlock
drop	mesh_partition/heap/MxDynBlock.h	/^    void drop(int d) { fill -= d; }$/;"	f	class:MxDynBlock
dual	mesh_visibility/glm/glm/gtx/dual_quaternion.hpp	/^		glm::tquat<T, P> real, dual;$/;"	m	struct:glm::tdualquat
dualquat	mesh_visibility/glm/glm/gtx/dual_quaternion.hpp	/^	typedef highp_fdualquat			dualquat;$/;"	t	namespace:glm
dualquat	mesh_visibility/glm/glm/gtx/dual_quaternion.hpp	/^	typedef lowp_fdualquat			dualquat;$/;"	t	namespace:glm
dualquat	mesh_visibility/glm/glm/gtx/dual_quaternion.hpp	/^	typedef mediump_fdualquat		dualquat;$/;"	t	namespace:glm
dvec1	mesh_visibility/glm/glm/gtc/vec1.hpp	/^	typedef highp_dvec1				dvec1;$/;"	t	namespace:glm
dvec1	mesh_visibility/glm/glm/gtc/vec1.hpp	/^	typedef lowp_dvec1				dvec1;$/;"	t	namespace:glm
dvec1	mesh_visibility/glm/glm/gtc/vec1.hpp	/^	typedef mediump_dvec1			dvec1;$/;"	t	namespace:glm
dvec2	mesh_visibility/glm/glm/detail/type_vec.hpp	/^	typedef highp_dvec2			dvec2;$/;"	t	namespace:glm
dvec2	mesh_visibility/glm/glm/detail/type_vec.hpp	/^	typedef lowp_dvec2			dvec2;$/;"	t	namespace:glm
dvec2	mesh_visibility/glm/glm/detail/type_vec.hpp	/^	typedef mediump_dvec2		dvec2;$/;"	t	namespace:glm
dvec3	mesh_visibility/glm/glm/detail/type_vec.hpp	/^	typedef highp_dvec3			dvec3;$/;"	t	namespace:glm
dvec3	mesh_visibility/glm/glm/detail/type_vec.hpp	/^	typedef lowp_dvec3			dvec3;$/;"	t	namespace:glm
dvec3	mesh_visibility/glm/glm/detail/type_vec.hpp	/^	typedef mediump_dvec3		dvec3;$/;"	t	namespace:glm
dvec4	mesh_visibility/glm/glm/detail/type_vec.hpp	/^	typedef highp_dvec4			dvec4;$/;"	t	namespace:glm
dvec4	mesh_visibility/glm/glm/detail/type_vec.hpp	/^	typedef lowp_dvec4			dvec4;$/;"	t	namespace:glm
dvec4	mesh_visibility/glm/glm/detail/type_vec.hpp	/^	typedef mediump_dvec4		dvec4;$/;"	t	namespace:glm
dword	mesh_visibility/glm/glm/gtx/raw_data.hpp	/^	typedef detail::uint32		dword;$/;"	t	namespace:glm
edge_to_face_	mesh_partition/partition.h	/^    unordered_map<long long, vector<int>> edge_to_face_;         \/\/ edge (represented by two int32 endpoints) -> face id$/;"	m	class:Partition
elem	mesh_visibility/glm/glm/detail/_swizzle.hpp	/^		GLM_FUNC_QUALIFIER const value_type&   elem   (size_t i) const { return (reinterpret_cast<const value_type*>(_buffer))[i]; }$/;"	f	struct:glm::detail::_swizzle_base0
elem	mesh_visibility/glm/glm/detail/_swizzle.hpp	/^		GLM_FUNC_QUALIFIER value_type&         elem   (size_t i)       { return (reinterpret_cast<value_type*>(_buffer))[i]; }$/;"	f	struct:glm::detail::_swizzle_base0
emission	mesh_visibility/glm/glm/detail/dummy.cpp	/^	glm::vec4 emission; \/\/ Ecm$/;"	m	struct:material	file:
end	mesh_partition/heap/MxBlock.h	/^    const_iterator end() const { return begin() + size(); }$/;"	f	class:MxBlock
end	mesh_partition/heap/MxBlock.h	/^    iterator end() { return begin() + size(); }$/;"	f	class:MxBlock
end	mesh_partition/heap/MxDynBlock.h	/^    typename MxBlock<T>::const_iterator end() const { return this->begin() + size(); }$/;"	f	class:MxDynBlock
end	mesh_partition/heap/MxDynBlock.h	/^    typename MxBlock<T>::iterator end() { return this->begin() + size(); }$/;"	f	class:MxDynBlock
end	mesh_visibility/glm/glm/gtx/range.hpp	/^	const typename genType::value_type * end(genType const & v){$/;"	f	namespace:glm
end	mesh_visibility/glm/glm/gtx/range.hpp	/^	typename genType::value_type * end(genType& v){$/;"	f	namespace:glm
energy	common/covariance.cpp	/^double CovObj::energy()$/;"	f	class:CovObj
energy	mesh_partition/partition.h	/^        double energy;             \/\/ to save some computation time of calling CovObj::energy() too frequently$/;"	m	struct:Partition::Cluster
estimate	blur_estimation/blur_estimation.cpp	/^float BlurEstimation::estimate()$/;"	f	class:BlurEstimation
estimationFinal	blur_estimation/blur_estimation.cpp	/^float BlurEstimation::estimationFinal(float s_Vver, float s_Vhor, float s_Fver, float s_Fhor)$/;"	f	class:BlurEstimation
evaluate	mesh_partition/qemquadrics.cpp	/^double QEMQuadrics::evaluate(const Vector3d& v) const$/;"	f	class:QEMQuadrics
expandTexturePatch	mesh_texture_opt/mesh_opt.cpp	/^void RGBDMeshOpt::expandTexturePatch(TexturePatch& patch)$/;"	f	class:RGBDMeshOpt
extract	mesh_partition/heap/MxHeap.cxx	/^MxHeapable *MxHeap::extract()$/;"	f	class:MxHeap
extract	mesh_partition/myheap.h	/^    MxHeapable *extract()$/;"	f	class:MxHeap
extractImageBuffer	mesh_visibility/mesh_visibility.cpp	/^void MeshVisibility::extractImageBuffer()$/;"	f	class:MeshVisibility
f32	mesh_visibility/glm/glm/fwd.hpp	/^	typedef highp_float32_t f32;$/;"	t	namespace:glm
f32	mesh_visibility/glm/glm/fwd.hpp	/^	typedef lowp_f32 f32;$/;"	t	namespace:glm
f32	mesh_visibility/glm/glm/fwd.hpp	/^	typedef mediump_float32 f32;$/;"	t	namespace:glm
f32	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef float32 f32;$/;"	t	namespace:glm
f32mat1	mesh_visibility/glm/glm/gtx/number_precision.hpp	/^	typedef f32			f32mat1;	\/\/!< \\brief Single-precision floating-point scalar. (from GLM_GTX_number_precision extension)$/;"	t	namespace:glm::gtx
f32mat1x1	mesh_visibility/glm/glm/gtx/number_precision.hpp	/^	typedef f32			f32mat1x1;	\/\/!< \\brief Single-precision floating-point scalar. (from GLM_GTX_number_precision extension)$/;"	t	namespace:glm::gtx
f32mat2	mesh_visibility/glm/glm/fwd.hpp	/^	typedef f32mat2x2				f32mat2;$/;"	t	namespace:glm
f32mat2	mesh_visibility/glm/glm/fwd.hpp	/^	typedef lowp_f32mat2			f32mat2;$/;"	t	namespace:glm
f32mat2	mesh_visibility/glm/glm/fwd.hpp	/^	typedef mediump_f32mat2			f32mat2;$/;"	t	namespace:glm
f32mat2	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef tmat2x2<f32, defaultp> f32mat2;$/;"	t	namespace:glm
f32mat2x2	mesh_visibility/glm/glm/fwd.hpp	/^	typedef highp_f32mat2x2			f32mat2x2;$/;"	t	namespace:glm
f32mat2x2	mesh_visibility/glm/glm/fwd.hpp	/^	typedef lowp_f32mat2x2			f32mat2x2;$/;"	t	namespace:glm
f32mat2x2	mesh_visibility/glm/glm/fwd.hpp	/^	typedef mediump_f32mat2x2		f32mat2x2;$/;"	t	namespace:glm
f32mat2x2	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef tmat2x2<f32, defaultp> f32mat2x2;$/;"	t	namespace:glm
f32mat2x3	mesh_visibility/glm/glm/fwd.hpp	/^	typedef highp_f32mat2x3			f32mat2x3;$/;"	t	namespace:glm
f32mat2x3	mesh_visibility/glm/glm/fwd.hpp	/^	typedef lowp_f32mat2x3			f32mat2x3;$/;"	t	namespace:glm
f32mat2x3	mesh_visibility/glm/glm/fwd.hpp	/^	typedef mediump_f32mat2x3		f32mat2x3;$/;"	t	namespace:glm
f32mat2x3	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef tmat2x3<f32, defaultp> f32mat2x3;$/;"	t	namespace:glm
f32mat2x4	mesh_visibility/glm/glm/fwd.hpp	/^	typedef highp_f32mat2x4			f32mat2x4;$/;"	t	namespace:glm
f32mat2x4	mesh_visibility/glm/glm/fwd.hpp	/^	typedef lowp_f32mat2x4			f32mat2x4;$/;"	t	namespace:glm
f32mat2x4	mesh_visibility/glm/glm/fwd.hpp	/^	typedef mediump_f32mat2x4		f32mat2x4;$/;"	t	namespace:glm
f32mat2x4	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef tmat2x4<f32, defaultp> f32mat2x4;$/;"	t	namespace:glm
f32mat3	mesh_visibility/glm/glm/fwd.hpp	/^	typedef f32mat3x3				f32mat3;$/;"	t	namespace:glm
f32mat3	mesh_visibility/glm/glm/fwd.hpp	/^	typedef lowp_f32mat3			f32mat3;$/;"	t	namespace:glm
f32mat3	mesh_visibility/glm/glm/fwd.hpp	/^	typedef mediump_f32mat3			f32mat3;$/;"	t	namespace:glm
f32mat3	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef tmat3x3<f32, defaultp> f32mat3;$/;"	t	namespace:glm
f32mat3x2	mesh_visibility/glm/glm/fwd.hpp	/^	typedef highp_f32mat3x2			f32mat3x2;$/;"	t	namespace:glm
f32mat3x2	mesh_visibility/glm/glm/fwd.hpp	/^	typedef lowp_f32mat3x2			f32mat3x2;$/;"	t	namespace:glm
f32mat3x2	mesh_visibility/glm/glm/fwd.hpp	/^	typedef mediump_f32mat3x2		f32mat3x2;$/;"	t	namespace:glm
f32mat3x2	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef tmat3x2<f32, defaultp> f32mat3x2;$/;"	t	namespace:glm
f32mat3x3	mesh_visibility/glm/glm/fwd.hpp	/^	typedef highp_f32mat3x3			f32mat3x3;$/;"	t	namespace:glm
f32mat3x3	mesh_visibility/glm/glm/fwd.hpp	/^	typedef lowp_f32mat3x3			f32mat3x3;$/;"	t	namespace:glm
f32mat3x3	mesh_visibility/glm/glm/fwd.hpp	/^	typedef mediump_f32mat3x3		f32mat3x3;$/;"	t	namespace:glm
f32mat3x3	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef tmat3x3<f32, defaultp> f32mat3x3;$/;"	t	namespace:glm
f32mat3x4	mesh_visibility/glm/glm/fwd.hpp	/^	typedef highp_f32mat3x4			f32mat3x4;$/;"	t	namespace:glm
f32mat3x4	mesh_visibility/glm/glm/fwd.hpp	/^	typedef lowp_f32mat3x4			f32mat3x4;$/;"	t	namespace:glm
f32mat3x4	mesh_visibility/glm/glm/fwd.hpp	/^	typedef mediump_f32mat3x4		f32mat3x4;$/;"	t	namespace:glm
f32mat3x4	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef tmat3x4<f32, defaultp> f32mat3x4;$/;"	t	namespace:glm
f32mat4	mesh_visibility/glm/glm/fwd.hpp	/^	typedef f32mat4x4				f32mat4;$/;"	t	namespace:glm
f32mat4	mesh_visibility/glm/glm/fwd.hpp	/^	typedef lowp_f32mat4			f32mat4;$/;"	t	namespace:glm
f32mat4	mesh_visibility/glm/glm/fwd.hpp	/^	typedef mediump_f32mat4			f32mat4;$/;"	t	namespace:glm
f32mat4	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef tmat4x4<f32, defaultp> f32mat4;$/;"	t	namespace:glm
f32mat4x2	mesh_visibility/glm/glm/fwd.hpp	/^	typedef highp_f32mat4x2			f32mat4x2;$/;"	t	namespace:glm
f32mat4x2	mesh_visibility/glm/glm/fwd.hpp	/^	typedef lowp_f32mat4x2			f32mat4x2;$/;"	t	namespace:glm
f32mat4x2	mesh_visibility/glm/glm/fwd.hpp	/^	typedef mediump_f32mat4x2		f32mat4x2;$/;"	t	namespace:glm
f32mat4x2	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef tmat4x2<f32, defaultp> f32mat4x2;$/;"	t	namespace:glm
f32mat4x3	mesh_visibility/glm/glm/fwd.hpp	/^	typedef highp_f32mat4x3			f32mat4x3;$/;"	t	namespace:glm
f32mat4x3	mesh_visibility/glm/glm/fwd.hpp	/^	typedef lowp_f32mat4x3			f32mat4x3;$/;"	t	namespace:glm
f32mat4x3	mesh_visibility/glm/glm/fwd.hpp	/^	typedef mediump_f32mat4x3		f32mat4x3;$/;"	t	namespace:glm
f32mat4x3	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef tmat4x3<f32, defaultp> f32mat4x3;$/;"	t	namespace:glm
f32mat4x4	mesh_visibility/glm/glm/fwd.hpp	/^	typedef highp_f32mat4x4			f32mat4x4;$/;"	t	namespace:glm
f32mat4x4	mesh_visibility/glm/glm/fwd.hpp	/^	typedef lowp_f32mat4x4			f32mat4x4;$/;"	t	namespace:glm
f32mat4x4	mesh_visibility/glm/glm/fwd.hpp	/^	typedef mediump_f32mat4x4		f32mat4x4;$/;"	t	namespace:glm
f32mat4x4	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef tmat4x4<f32, defaultp> f32mat4x4;$/;"	t	namespace:glm
f32quat	mesh_visibility/glm/glm/fwd.hpp	/^	typedef highp_f32quat			f32quat;$/;"	t	namespace:glm
f32quat	mesh_visibility/glm/glm/fwd.hpp	/^	typedef lowp_f32quat			f32quat;$/;"	t	namespace:glm
f32quat	mesh_visibility/glm/glm/fwd.hpp	/^	typedef mediump_f32quat			f32quat;$/;"	t	namespace:glm
f32quat	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef tquat<f32, defaultp> f32quat;$/;"	t	namespace:glm
f32vec1	mesh_visibility/glm/glm/fwd.hpp	/^	typedef highp_f32vec1			f32vec1;$/;"	t	namespace:glm
f32vec1	mesh_visibility/glm/glm/fwd.hpp	/^	typedef lowp_f32vec1			f32vec1;$/;"	t	namespace:glm
f32vec1	mesh_visibility/glm/glm/fwd.hpp	/^	typedef mediump_f32vec1			f32vec1;$/;"	t	namespace:glm
f32vec1	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef tvec1<f32, defaultp> f32vec1;$/;"	t	namespace:glm
f32vec1	mesh_visibility/glm/glm/gtx/number_precision.hpp	/^	typedef f32			f32vec1;    \/\/!< \\brief Single-precision floating-point scalar. (from GLM_GTX_number_precision extension)$/;"	t	namespace:glm::gtx
f32vec2	mesh_visibility/glm/glm/fwd.hpp	/^	typedef highp_f32vec2			f32vec2;$/;"	t	namespace:glm
f32vec2	mesh_visibility/glm/glm/fwd.hpp	/^	typedef lowp_f32vec2			f32vec2;$/;"	t	namespace:glm
f32vec2	mesh_visibility/glm/glm/fwd.hpp	/^	typedef mediump_f32vec2			f32vec2;$/;"	t	namespace:glm
f32vec2	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef tvec2<f32, defaultp> f32vec2;$/;"	t	namespace:glm
f32vec3	mesh_visibility/glm/glm/fwd.hpp	/^	typedef highp_f32vec3			f32vec3;$/;"	t	namespace:glm
f32vec3	mesh_visibility/glm/glm/fwd.hpp	/^	typedef lowp_f32vec3			f32vec3;$/;"	t	namespace:glm
f32vec3	mesh_visibility/glm/glm/fwd.hpp	/^	typedef mediump_f32vec3			f32vec3;$/;"	t	namespace:glm
f32vec3	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef tvec3<f32, defaultp> f32vec3;$/;"	t	namespace:glm
f32vec4	mesh_visibility/glm/glm/fwd.hpp	/^	typedef highp_f32vec4			f32vec4;$/;"	t	namespace:glm
f32vec4	mesh_visibility/glm/glm/fwd.hpp	/^	typedef lowp_f32vec4			f32vec4;$/;"	t	namespace:glm
f32vec4	mesh_visibility/glm/glm/fwd.hpp	/^	typedef mediump_f32vec4			f32vec4;$/;"	t	namespace:glm
f32vec4	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef tvec4<f32, defaultp> f32vec4;$/;"	t	namespace:glm
f64	mesh_visibility/glm/glm/fwd.hpp	/^	typedef highp_float64_t f64;$/;"	t	namespace:glm
f64	mesh_visibility/glm/glm/fwd.hpp	/^	typedef lowp_f64 f64;$/;"	t	namespace:glm
f64	mesh_visibility/glm/glm/fwd.hpp	/^	typedef mediump_float64 f64;$/;"	t	namespace:glm
f64	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef float64 f64;$/;"	t	namespace:glm
f64mat1	mesh_visibility/glm/glm/gtx/number_precision.hpp	/^	typedef f64			f64mat1;	\/\/!< \\brief Double-precision floating-point scalar. (from GLM_GTX_number_precision extension)$/;"	t	namespace:glm::gtx
f64mat1x1	mesh_visibility/glm/glm/gtx/number_precision.hpp	/^	typedef f64			f64mat1x1;	\/\/!< \\brief Double-precision floating-point scalar. (from GLM_GTX_number_precision extension)$/;"	t	namespace:glm::gtx
f64mat2	mesh_visibility/glm/glm/fwd.hpp	/^	typedef f64mat2x2				f64mat2;$/;"	t	namespace:glm
f64mat2	mesh_visibility/glm/glm/fwd.hpp	/^	typedef lowp_f64mat2			f64mat2;$/;"	t	namespace:glm
f64mat2	mesh_visibility/glm/glm/fwd.hpp	/^	typedef mediump_f64mat2			f64mat2;$/;"	t	namespace:glm
f64mat2	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef tmat2x2<f64, defaultp> f64mat2;$/;"	t	namespace:glm
f64mat2x2	mesh_visibility/glm/glm/fwd.hpp	/^	typedef highp_f64mat2x2			f64mat2x2;$/;"	t	namespace:glm
f64mat2x2	mesh_visibility/glm/glm/fwd.hpp	/^	typedef lowp_f64mat2x2			f64mat2x2;$/;"	t	namespace:glm
f64mat2x2	mesh_visibility/glm/glm/fwd.hpp	/^	typedef mediump_f64mat2x2		f64mat2x2;$/;"	t	namespace:glm
f64mat2x2	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef tmat2x2<f64, defaultp> f64mat2x2;$/;"	t	namespace:glm
f64mat2x3	mesh_visibility/glm/glm/fwd.hpp	/^	typedef highp_f64mat2x3			f64mat2x3;$/;"	t	namespace:glm
f64mat2x3	mesh_visibility/glm/glm/fwd.hpp	/^	typedef lowp_f64mat2x3			f64mat2x3;$/;"	t	namespace:glm
f64mat2x3	mesh_visibility/glm/glm/fwd.hpp	/^	typedef mediump_f64mat2x3		f64mat2x3;$/;"	t	namespace:glm
f64mat2x3	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef tmat2x3<f64, defaultp> f64mat2x3;$/;"	t	namespace:glm
f64mat2x4	mesh_visibility/glm/glm/fwd.hpp	/^	typedef highp_f64mat2x4			f64mat2x4;$/;"	t	namespace:glm
f64mat2x4	mesh_visibility/glm/glm/fwd.hpp	/^	typedef lowp_f64mat2x4			f64mat2x4;$/;"	t	namespace:glm
f64mat2x4	mesh_visibility/glm/glm/fwd.hpp	/^	typedef mediump_f64mat2x4		f64mat2x4;$/;"	t	namespace:glm
f64mat2x4	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef tmat2x4<f64, defaultp> f64mat2x4;$/;"	t	namespace:glm
f64mat3	mesh_visibility/glm/glm/fwd.hpp	/^	typedef f64mat3x3				f64mat3;$/;"	t	namespace:glm
f64mat3	mesh_visibility/glm/glm/fwd.hpp	/^	typedef lowp_f64mat3			f64mat3;$/;"	t	namespace:glm
f64mat3	mesh_visibility/glm/glm/fwd.hpp	/^	typedef mediump_f64mat3			f64mat3;$/;"	t	namespace:glm
f64mat3	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef tmat3x3<f64, defaultp> f64mat3;$/;"	t	namespace:glm
f64mat3x2	mesh_visibility/glm/glm/fwd.hpp	/^	typedef highp_f64mat3x2			f64mat3x2;$/;"	t	namespace:glm
f64mat3x2	mesh_visibility/glm/glm/fwd.hpp	/^	typedef lowp_f64mat3x2			f64mat3x2;$/;"	t	namespace:glm
f64mat3x2	mesh_visibility/glm/glm/fwd.hpp	/^	typedef mediump_f64mat3x2		f64mat3x2;$/;"	t	namespace:glm
f64mat3x2	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef tmat3x2<f64, defaultp> f64mat3x2;$/;"	t	namespace:glm
f64mat3x3	mesh_visibility/glm/glm/fwd.hpp	/^	typedef highp_f64mat3x3			f64mat3x3;$/;"	t	namespace:glm
f64mat3x3	mesh_visibility/glm/glm/fwd.hpp	/^	typedef lowp_f64mat3x3			f64mat3x3;$/;"	t	namespace:glm
f64mat3x3	mesh_visibility/glm/glm/fwd.hpp	/^	typedef mediump_f64mat3x3		f64mat3x3;$/;"	t	namespace:glm
f64mat3x3	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef tmat3x3<f64, defaultp> f64mat3x3;$/;"	t	namespace:glm
f64mat3x4	mesh_visibility/glm/glm/fwd.hpp	/^	typedef highp_f64mat3x4			f64mat3x4;$/;"	t	namespace:glm
f64mat3x4	mesh_visibility/glm/glm/fwd.hpp	/^	typedef lowp_f64mat3x4			f64mat3x4;$/;"	t	namespace:glm
f64mat3x4	mesh_visibility/glm/glm/fwd.hpp	/^	typedef mediump_f64mat3x4		f64mat3x4;$/;"	t	namespace:glm
f64mat3x4	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef tmat3x4<f64, defaultp> f64mat3x4;$/;"	t	namespace:glm
f64mat4	mesh_visibility/glm/glm/fwd.hpp	/^	typedef f64mat4x4				f64mat4;$/;"	t	namespace:glm
f64mat4	mesh_visibility/glm/glm/fwd.hpp	/^	typedef lowp_f64mat4			f64mat4;$/;"	t	namespace:glm
f64mat4	mesh_visibility/glm/glm/fwd.hpp	/^	typedef mediump_f64mat4			f64mat4;$/;"	t	namespace:glm
f64mat4	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef tmat4x4<f64, defaultp> f64mat4;$/;"	t	namespace:glm
f64mat4x2	mesh_visibility/glm/glm/fwd.hpp	/^	typedef highp_f64mat4x2			f64mat4x2;$/;"	t	namespace:glm
f64mat4x2	mesh_visibility/glm/glm/fwd.hpp	/^	typedef lowp_f64mat4x2			f64mat4x2;$/;"	t	namespace:glm
f64mat4x2	mesh_visibility/glm/glm/fwd.hpp	/^	typedef mediump_f64mat4x2		f64mat4x2;$/;"	t	namespace:glm
f64mat4x2	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef tmat4x2<f64, defaultp> f64mat4x2;$/;"	t	namespace:glm
f64mat4x3	mesh_visibility/glm/glm/fwd.hpp	/^	typedef highp_f64mat4x3			f64mat4x3;$/;"	t	namespace:glm
f64mat4x3	mesh_visibility/glm/glm/fwd.hpp	/^	typedef lowp_f64mat4x3			f64mat4x3;$/;"	t	namespace:glm
f64mat4x3	mesh_visibility/glm/glm/fwd.hpp	/^	typedef mediump_f64mat4x3		f64mat4x3;$/;"	t	namespace:glm
f64mat4x3	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef tmat4x3<f64, defaultp> f64mat4x3;$/;"	t	namespace:glm
f64mat4x4	mesh_visibility/glm/glm/fwd.hpp	/^	typedef highp_f64mat4x4			f64mat4x4;$/;"	t	namespace:glm
f64mat4x4	mesh_visibility/glm/glm/fwd.hpp	/^	typedef lowp_f64mat4x4			f64mat4x4;$/;"	t	namespace:glm
f64mat4x4	mesh_visibility/glm/glm/fwd.hpp	/^	typedef mediump_f64mat4x4		f64mat4x4;$/;"	t	namespace:glm
f64mat4x4	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef tmat4x4<f64, defaultp> f64mat4x4;$/;"	t	namespace:glm
f64quat	mesh_visibility/glm/glm/fwd.hpp	/^	typedef highp_f64quat			f64quat;$/;"	t	namespace:glm
f64quat	mesh_visibility/glm/glm/fwd.hpp	/^	typedef lowp_f64quat			f64quat;$/;"	t	namespace:glm
f64quat	mesh_visibility/glm/glm/fwd.hpp	/^	typedef mediump_f64quat			f64quat;$/;"	t	namespace:glm
f64quat	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef tquat<f64, defaultp> f64quat;$/;"	t	namespace:glm
f64vec1	mesh_visibility/glm/glm/fwd.hpp	/^	typedef highp_f64vec1			f64vec1;$/;"	t	namespace:glm
f64vec1	mesh_visibility/glm/glm/fwd.hpp	/^	typedef lowp_f64vec1			f64vec1;$/;"	t	namespace:glm
f64vec1	mesh_visibility/glm/glm/fwd.hpp	/^	typedef mediump_f64vec1			f64vec1;$/;"	t	namespace:glm
f64vec1	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef tvec1<f64, defaultp> f64vec1;$/;"	t	namespace:glm
f64vec1	mesh_visibility/glm/glm/gtx/number_precision.hpp	/^	typedef f64			f64vec1;    \/\/!< \\brief Single-precision floating-point scalar. (from GLM_GTX_number_precision extension)$/;"	t	namespace:glm::gtx
f64vec2	mesh_visibility/glm/glm/fwd.hpp	/^	typedef highp_f64vec2			f64vec2;$/;"	t	namespace:glm
f64vec2	mesh_visibility/glm/glm/fwd.hpp	/^	typedef lowp_f64vec2			f64vec2;$/;"	t	namespace:glm
f64vec2	mesh_visibility/glm/glm/fwd.hpp	/^	typedef mediump_f64vec2			f64vec2;$/;"	t	namespace:glm
f64vec2	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef tvec2<f64, defaultp> f64vec2;$/;"	t	namespace:glm
f64vec3	mesh_visibility/glm/glm/fwd.hpp	/^	typedef highp_f64vec3			f64vec3;$/;"	t	namespace:glm
f64vec3	mesh_visibility/glm/glm/fwd.hpp	/^	typedef lowp_f64vec3			f64vec3;$/;"	t	namespace:glm
f64vec3	mesh_visibility/glm/glm/fwd.hpp	/^	typedef mediump_f64vec3			f64vec3;$/;"	t	namespace:glm
f64vec3	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef tvec3<f64, defaultp> f64vec3;$/;"	t	namespace:glm
f64vec4	mesh_visibility/glm/glm/fwd.hpp	/^	typedef highp_f64vec4			f64vec4;$/;"	t	namespace:glm
f64vec4	mesh_visibility/glm/glm/fwd.hpp	/^	typedef lowp_f64vec4			f64vec4;$/;"	t	namespace:glm
f64vec4	mesh_visibility/glm/glm/fwd.hpp	/^	typedef mediump_f64vec4			f64vec4;$/;"	t	namespace:glm
f64vec4	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef tvec4<f64, defaultp> f64vec4;$/;"	t	namespace:glm
face_id	mesh_partition/partition.h	/^        int face_id, from, to;$/;"	m	struct:Partition::SwapFace
face_id	mesh_texture_opt/mesh_opt.h	/^        int face_id;$/;"	m	struct:RGBDMeshOpt::Texel
face_num_	mesh_partition/partition.h	/^    int vertex_num_, face_num_;$/;"	m	class:Partition
face_num_	mesh_texture_opt/mesh_opt.h	/^    int vertex_num_, face_num_, cluster_num_;$/;"	m	class:RGBDMeshOpt
face_num_	mesh_visibility/mesh_visibility.h	/^	int face_num_;$/;"	m	class:MeshVisibility
faces	mesh_partition/partition.h	/^        unordered_set<int> faces;  \/\/ faces each cluster contains$/;"	m	struct:Partition::Cluster
faces	mesh_texture_opt/mesh_opt.h	/^        unordered_set<int> faces, nbr_clusters;  \/\/ neighbor clusters$/;"	m	struct:RGBDMeshOpt::Cluster
faces_	mesh_partition/partition.h	/^    vector<Face> faces_;$/;"	m	class:Partition
faces_	mesh_texture_opt/mesh_opt.h	/^    vector<Face> faces_;$/;"	m	class:RGBDMeshOpt
faces_	mesh_visibility/mesh_visibility.h	/^	vector<unsigned int> faces_;$/;"	m	class:MeshVisibility
faces_to_swap	mesh_partition/partition.h	/^        vector<SwapFace> faces_to_swap;$/;"	m	struct:Partition::Cluster
fade	mesh_visibility/glm/glm/detail/_noise.hpp	/^	GLM_FUNC_QUALIFIER tvec2<T, P> fade(tvec2<T, P> const & t)$/;"	f	namespace:glm::detail
fade	mesh_visibility/glm/glm/detail/_noise.hpp	/^	GLM_FUNC_QUALIFIER tvec3<T, P> fade(tvec3<T, P> const & t)$/;"	f	namespace:glm::detail
fade	mesh_visibility/glm/glm/detail/_noise.hpp	/^	GLM_FUNC_QUALIFIER tvec4<T, P> fade(tvec4<T, P> const & t)$/;"	f	namespace:glm::detail
fast	mesh_visibility/glm/glm/detail/type_gentype.hpp	/^		fast,$/;"	e	enum:glm::profile
fatal_error	mesh_partition/heap/stdmix.h	77;"	d
fdualquat	mesh_visibility/glm/glm/gtx/dual_quaternion.hpp	/^	typedef highp_fdualquat			fdualquat;$/;"	t	namespace:glm
fdualquat	mesh_visibility/glm/glm/gtx/dual_quaternion.hpp	/^	typedef lowp_fdualquat			fdualquat;$/;"	t	namespace:glm
fdualquat	mesh_visibility/glm/glm/gtx/dual_quaternion.hpp	/^	typedef mediump_fdualquat		fdualquat;$/;"	t	namespace:glm
fidx_old2new_	mesh_partition/partition.h	/^    unordered_map<int, int> fidx_old2new_;  \/\/ original vertex indices -> new mesh indices (after removing some faces)$/;"	m	class:Partition
filename	mesh_partition/heap/mixmsg.h	/^    const char *filename;$/;"	m	class:MxMsgInfo
fill	mesh_partition/heap/MxDynBlock.h	/^    int fill;$/;"	m	class:MxDynBlock
fill_	mesh_visibility/glm/glm/gtx/io.hpp	/^			char_type       fill_;$/;"	m	class:glm::io::basic_state_saver
findClusterNeighbors	mesh_partition/partition.cpp	/^int Partition::findClusterNeighbors(int cidx)$/;"	f	class:Partition
findClusterNeighbors	mesh_partition/partition.cpp	/^int Partition::findClusterNeighbors(int cidx, unordered_set<int>& cluster_faces, unordered_set<int>& neighbor_clusters)$/;"	f	class:Partition
findClusterNeighbors	mesh_texture_opt/mesh_opt.cpp	/^int RGBDMeshOpt::findClusterNeighbors(int cidx)$/;"	f	class:RGBDMeshOpt
findInnerAndBorderEdges	mesh_partition/partition.cpp	/^void Partition::findInnerAndBorderEdges()$/;"	f	class:Partition
flag_matrix_method	blur_estimation/blur_estimation.h	/^    bool flag_matrix_method = true; \/\/ faster and neater$/;"	m	class:BlurEstimation
flag_new_mesh_	mesh_partition/partition.h	/^    bool flag_new_mesh_;  \/\/ true if removing some faces\/vertices\/clusters; false by default$/;"	m	class:Partition
flag_read_cluster_file_	mesh_partition/partition.h	/^    bool flag_read_cluster_file_;$/;"	m	class:Partition
flag_vtx_normal_	mesh_visibility/mesh_visibility.h	/^	bool flag_vtx_normal_, flag_vtx_texture_;$/;"	m	class:MeshVisibility
flag_vtx_texture_	mesh_visibility/mesh_visibility.h	/^	bool flag_vtx_normal_, flag_vtx_texture_;$/;"	m	class:MeshVisibility
flags_	mesh_visibility/glm/glm/gtx/io.hpp	/^			flags_type      flags_;$/;"	m	class:glm::io::basic_state_saver
flags_type	mesh_visibility/glm/glm/gtx/io.hpp	/^			typedef ::std::ios_base::fmtflags      flags_type;$/;"	t	class:glm::io::basic_state_saver
float1	mesh_visibility/glm/glm/gtx/compatibility.hpp	/^	typedef float						float1;			\/\/!< \\brief single-precision floating-point vector with 1 component. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
float1x1	mesh_visibility/glm/glm/gtx/compatibility.hpp	/^	typedef float						float1x1;		\/\/!< \\brief single-precision floating-point matrix with 1 component. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
float2	mesh_visibility/glm/glm/gtx/compatibility.hpp	/^	typedef tvec2<float, highp>		float2;			\/\/!< \\brief single-precision floating-point vector with 2 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
float2x2	mesh_visibility/glm/glm/gtx/compatibility.hpp	/^	typedef tmat2x2<float, highp>		float2x2;		\/\/!< \\brief single-precision floating-point matrix with 2 x 2 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
float2x3	mesh_visibility/glm/glm/gtx/compatibility.hpp	/^	typedef tmat2x3<float, highp>		float2x3;		\/\/!< \\brief single-precision floating-point matrix with 2 x 3 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
float2x4	mesh_visibility/glm/glm/gtx/compatibility.hpp	/^	typedef tmat2x4<float, highp>		float2x4;		\/\/!< \\brief single-precision floating-point matrix with 2 x 4 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
float3	mesh_visibility/glm/glm/gtx/compatibility.hpp	/^	typedef tvec3<float, highp>		float3;			\/\/!< \\brief single-precision floating-point vector with 3 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
float32	mesh_visibility/glm/glm/detail/type_float.hpp	/^	typedef float				float32;$/;"	t	namespace:glm
float32	mesh_visibility/glm/glm/detail/type_float.hpp	/^	typedef float				float32;$/;"	t	namespace:glm::detail
float32	mesh_visibility/glm/glm/fwd.hpp	/^	typedef highp_float32 float32;$/;"	t	namespace:glm
float32	mesh_visibility/glm/glm/fwd.hpp	/^	typedef lowp_float32 float32;$/;"	t	namespace:glm
float32	mesh_visibility/glm/glm/fwd.hpp	/^	typedef mediump_float32 float32;$/;"	t	namespace:glm
float32	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef detail::float32 float32;$/;"	t	namespace:glm
float32_t	mesh_visibility/glm/glm/fwd.hpp	/^	typedef highp_float32_t float32_t;$/;"	t	namespace:glm
float32_t	mesh_visibility/glm/glm/fwd.hpp	/^	typedef lowp_float32_t float32_t;$/;"	t	namespace:glm
float32_t	mesh_visibility/glm/glm/fwd.hpp	/^	typedef mediump_float32 float32_t;$/;"	t	namespace:glm
float32_t	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef detail::float32 float32_t;$/;"	t	namespace:glm
float3x2	mesh_visibility/glm/glm/gtx/compatibility.hpp	/^	typedef tmat3x2<float, highp>		float3x2;		\/\/!< \\brief single-precision floating-point matrix with 3 x 2 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
float3x3	mesh_visibility/glm/glm/gtx/compatibility.hpp	/^	typedef tmat3x3<float, highp>		float3x3;		\/\/!< \\brief single-precision floating-point matrix with 3 x 3 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
float3x4	mesh_visibility/glm/glm/gtx/compatibility.hpp	/^	typedef tmat3x4<float, highp>		float3x4;		\/\/!< \\brief single-precision floating-point matrix with 3 x 4 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
float4	mesh_visibility/glm/glm/gtx/compatibility.hpp	/^	typedef tvec4<float, highp>		float4;			\/\/!< \\brief single-precision floating-point vector with 4 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
float4x2	mesh_visibility/glm/glm/gtx/compatibility.hpp	/^	typedef tmat4x2<float, highp>		float4x2;		\/\/!< \\brief single-precision floating-point matrix with 4 x 2 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
float4x3	mesh_visibility/glm/glm/gtx/compatibility.hpp	/^	typedef tmat4x3<float, highp>		float4x3;		\/\/!< \\brief single-precision floating-point matrix with 4 x 3 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
float4x4	mesh_visibility/glm/glm/gtx/compatibility.hpp	/^	typedef tmat4x4<float, highp>		float4x4;		\/\/!< \\brief single-precision floating-point matrix with 4 x 4 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
float64	mesh_visibility/glm/glm/detail/type_float.hpp	/^	typedef double				float64;$/;"	t	namespace:glm
float64	mesh_visibility/glm/glm/detail/type_float.hpp	/^	typedef double				float64;$/;"	t	namespace:glm::detail
float64	mesh_visibility/glm/glm/fwd.hpp	/^	typedef highp_float64 float64;$/;"	t	namespace:glm
float64	mesh_visibility/glm/glm/fwd.hpp	/^	typedef lowp_float64 float64;$/;"	t	namespace:glm
float64	mesh_visibility/glm/glm/fwd.hpp	/^	typedef mediump_float64 float64;$/;"	t	namespace:glm
float64	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef detail::float64 float64;$/;"	t	namespace:glm
float64_t	mesh_visibility/glm/glm/fwd.hpp	/^	typedef highp_float64_t float64_t;$/;"	t	namespace:glm
float64_t	mesh_visibility/glm/glm/fwd.hpp	/^	typedef lowp_float64_t float64_t;$/;"	t	namespace:glm
float64_t	mesh_visibility/glm/glm/fwd.hpp	/^	typedef mediump_float64 float64_t;$/;"	t	namespace:glm
float64_t	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef detail::float64 float64_t;$/;"	t	namespace:glm
float_t	mesh_visibility/glm/glm/detail/type_float.hpp	/^	typedef highp_float			float_t;$/;"	t	namespace:glm
float_t	mesh_visibility/glm/glm/detail/type_float.hpp	/^	typedef lowp_float			float_t;$/;"	t	namespace:glm
float_t	mesh_visibility/glm/glm/detail/type_float.hpp	/^	typedef mediump_float		float_t;$/;"	t	namespace:glm
fmat2	mesh_visibility/glm/glm/fwd.hpp	/^	typedef fmat2x2					fmat2;$/;"	t	namespace:glm
fmat2	mesh_visibility/glm/glm/fwd.hpp	/^	typedef lowp_f32mat2			fmat2;$/;"	t	namespace:glm
fmat2	mesh_visibility/glm/glm/fwd.hpp	/^	typedef mediump_f32mat2			fmat2;$/;"	t	namespace:glm
fmat2	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef tmat2x2<f32, defaultp> fmat2;$/;"	t	namespace:glm
fmat2x2	mesh_visibility/glm/glm/fwd.hpp	/^	typedef highp_f32mat2x2			fmat2x2;$/;"	t	namespace:glm
fmat2x2	mesh_visibility/glm/glm/fwd.hpp	/^	typedef lowp_f32mat2x2			fmat2x2;$/;"	t	namespace:glm
fmat2x2	mesh_visibility/glm/glm/fwd.hpp	/^	typedef mediump_f32mat2x2		fmat2x2;$/;"	t	namespace:glm
fmat2x2	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef tmat2x2<f32, defaultp> fmat2x2;$/;"	t	namespace:glm
fmat2x3	mesh_visibility/glm/glm/fwd.hpp	/^	typedef highp_f32mat2x3			fmat2x3;$/;"	t	namespace:glm
fmat2x3	mesh_visibility/glm/glm/fwd.hpp	/^	typedef lowp_f32mat2x3			fmat2x3;$/;"	t	namespace:glm
fmat2x3	mesh_visibility/glm/glm/fwd.hpp	/^	typedef mediump_f32mat2x3		fmat2x3;$/;"	t	namespace:glm
fmat2x3	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef tmat2x3<f32, defaultp> fmat2x3;$/;"	t	namespace:glm
fmat2x4	mesh_visibility/glm/glm/fwd.hpp	/^	typedef highp_f32mat2x4			fmat2x4;$/;"	t	namespace:glm
fmat2x4	mesh_visibility/glm/glm/fwd.hpp	/^	typedef lowp_f32mat2x4			fmat2x4;$/;"	t	namespace:glm
fmat2x4	mesh_visibility/glm/glm/fwd.hpp	/^	typedef mediump_f32mat2x4		fmat2x4;$/;"	t	namespace:glm
fmat2x4	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef tmat2x4<f32, defaultp> fmat2x4;$/;"	t	namespace:glm
fmat3	mesh_visibility/glm/glm/fwd.hpp	/^	typedef fmat3x3					fmat3;$/;"	t	namespace:glm
fmat3	mesh_visibility/glm/glm/fwd.hpp	/^	typedef lowp_f32mat3			fmat3;$/;"	t	namespace:glm
fmat3	mesh_visibility/glm/glm/fwd.hpp	/^	typedef mediump_f32mat3			fmat3;$/;"	t	namespace:glm
fmat3	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef tmat3x3<f32, defaultp> fmat3;$/;"	t	namespace:glm
fmat3x2	mesh_visibility/glm/glm/fwd.hpp	/^	typedef highp_f32mat3x2			fmat3x2;$/;"	t	namespace:glm
fmat3x2	mesh_visibility/glm/glm/fwd.hpp	/^	typedef lowp_f32mat3x2			fmat3x2;$/;"	t	namespace:glm
fmat3x2	mesh_visibility/glm/glm/fwd.hpp	/^	typedef mediump_f32mat3x2		fmat3x2;$/;"	t	namespace:glm
fmat3x2	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef tmat3x2<f32, defaultp> fmat3x2;$/;"	t	namespace:glm
fmat3x3	mesh_visibility/glm/glm/fwd.hpp	/^	typedef highp_f32mat3x3			fmat3x3;$/;"	t	namespace:glm
fmat3x3	mesh_visibility/glm/glm/fwd.hpp	/^	typedef lowp_f32mat3x3			fmat3x3;$/;"	t	namespace:glm
fmat3x3	mesh_visibility/glm/glm/fwd.hpp	/^	typedef mediump_f32mat3x3		fmat3x3;$/;"	t	namespace:glm
fmat3x3	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef tmat3x3<f32, defaultp> fmat3x3;$/;"	t	namespace:glm
fmat3x4	mesh_visibility/glm/glm/fwd.hpp	/^	typedef highp_f32mat3x4			fmat3x4;$/;"	t	namespace:glm
fmat3x4	mesh_visibility/glm/glm/fwd.hpp	/^	typedef lowp_f32mat3x4			fmat3x4;$/;"	t	namespace:glm
fmat3x4	mesh_visibility/glm/glm/fwd.hpp	/^	typedef mediump_f32mat3x4		fmat3x4;$/;"	t	namespace:glm
fmat3x4	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef tmat3x4<f32, defaultp> fmat3x4;$/;"	t	namespace:glm
fmat4	mesh_visibility/glm/glm/fwd.hpp	/^	typedef fmat4x4					fmat4;$/;"	t	namespace:glm
fmat4	mesh_visibility/glm/glm/fwd.hpp	/^	typedef lowp_f32mat4			fmat4;$/;"	t	namespace:glm
fmat4	mesh_visibility/glm/glm/fwd.hpp	/^	typedef mediump_f32mat4			fmat4;$/;"	t	namespace:glm
fmat4	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef tmat4x4<f32, defaultp> fmat4;$/;"	t	namespace:glm
fmat4x2	mesh_visibility/glm/glm/fwd.hpp	/^	typedef highp_f32mat4x2			fmat4x2;$/;"	t	namespace:glm
fmat4x2	mesh_visibility/glm/glm/fwd.hpp	/^	typedef lowp_f32mat4x2			fmat4x2;$/;"	t	namespace:glm
fmat4x2	mesh_visibility/glm/glm/fwd.hpp	/^	typedef mediump_f32mat4x2		fmat4x2;$/;"	t	namespace:glm
fmat4x2	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef tmat4x2<f32, defaultp> fmat4x2;$/;"	t	namespace:glm
fmat4x3	mesh_visibility/glm/glm/fwd.hpp	/^	typedef highp_f32mat4x3			fmat4x3;$/;"	t	namespace:glm
fmat4x3	mesh_visibility/glm/glm/fwd.hpp	/^	typedef lowp_f32mat4x3			fmat4x3;$/;"	t	namespace:glm
fmat4x3	mesh_visibility/glm/glm/fwd.hpp	/^	typedef mediump_f32mat4x3		fmat4x3;$/;"	t	namespace:glm
fmat4x3	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef tmat4x3<f32, defaultp> fmat4x3;$/;"	t	namespace:glm
fmat4x4	mesh_visibility/glm/glm/fwd.hpp	/^	typedef highp_f32mat4x4			fmat4x4;$/;"	t	namespace:glm
fmat4x4	mesh_visibility/glm/glm/fwd.hpp	/^	typedef lowp_f32mat4x4			fmat4x4;$/;"	t	namespace:glm
fmat4x4	mesh_visibility/glm/glm/fwd.hpp	/^	typedef mediump_f32mat4x4		fmat4x4;$/;"	t	namespace:glm
fmat4x4	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef tmat4x4<f32, defaultp> fmat4x4;$/;"	t	namespace:glm
format_punct	mesh_visibility/glm/glm/gtx/io.hpp	/^		class format_punct : public std::locale::facet$/;"	c	namespace:glm::io
format_saver	mesh_visibility/glm/glm/gtx/io.hpp	/^		typedef basic_format_saver<char>     format_saver;$/;"	t	namespace:glm::io
formatted	mesh_visibility/glm/glm/gtx/io.hpp	/^			bool       formatted;$/;"	m	class:glm::io::format_punct
fquat	mesh_visibility/glm/glm/fwd.hpp	/^	typedef highp_fquat				fquat;$/;"	t	namespace:glm
fquat	mesh_visibility/glm/glm/fwd.hpp	/^	typedef lowp_f32quat			fquat;$/;"	t	namespace:glm
fquat	mesh_visibility/glm/glm/fwd.hpp	/^	typedef mediump_f32quat			fquat;$/;"	t	namespace:glm
fquat	mesh_visibility/glm/glm/fwd.hpp	/^	typedef quat				fquat;$/;"	t	namespace:glm
frame_num_	mesh_texture_opt/mesh_opt.h	/^    int frame_num_;$/;"	m	class:RGBDMeshOpt
frame_num_	mesh_visibility/mesh_visibility.h	/^	int frame_num_;$/;"	m	class:MeshVisibility
framebuffer_size_callback	mesh_visibility/main.cpp	/^void framebuffer_size_callback(GLFWwindow* window, int width, int height)$/;"	f
frames_	mesh_texture_opt/mesh_opt.h	/^    vector<Frame> frames_;$/;"	m	class:RGBDMeshOpt
free_block	mesh_partition/heap/MxBlock.h	/^    void free_block()$/;"	f	class:MxBlock
from	mesh_partition/partition.h	/^        int face_id, from, to;$/;"	m	struct:Partition::SwapFace
func	mesh_visibility/glm/glm/detail/dummy.cpp	/^void func(GLuint LocationMVP, float Translate, glm::vec2 const & Rotate)$/;"	f
functor1	mesh_visibility/glm/glm/detail/_vectorize.hpp	/^	struct functor1<R, T, P, tvec1>$/;"	s	namespace:glm::detail
functor1	mesh_visibility/glm/glm/detail/_vectorize.hpp	/^	struct functor1<R, T, P, tvec2>$/;"	s	namespace:glm::detail
functor1	mesh_visibility/glm/glm/detail/_vectorize.hpp	/^	struct functor1<R, T, P, tvec3>$/;"	s	namespace:glm::detail
functor1	mesh_visibility/glm/glm/detail/_vectorize.hpp	/^	struct functor1<R, T, P, tvec4>$/;"	s	namespace:glm::detail
functor1	mesh_visibility/glm/glm/detail/_vectorize.hpp	/^	struct functor1{};$/;"	s	namespace:glm::detail
functor2	mesh_visibility/glm/glm/detail/_vectorize.hpp	/^	struct functor2<T, P, tvec1>$/;"	s	namespace:glm::detail
functor2	mesh_visibility/glm/glm/detail/_vectorize.hpp	/^	struct functor2<T, P, tvec2>$/;"	s	namespace:glm::detail
functor2	mesh_visibility/glm/glm/detail/_vectorize.hpp	/^	struct functor2<T, P, tvec3>$/;"	s	namespace:glm::detail
functor2	mesh_visibility/glm/glm/detail/_vectorize.hpp	/^	struct functor2<T, P, tvec4>$/;"	s	namespace:glm::detail
functor2	mesh_visibility/glm/glm/detail/_vectorize.hpp	/^	struct functor2{};$/;"	s	namespace:glm::detail
functor2_vec_sca	mesh_visibility/glm/glm/detail/_vectorize.hpp	/^	struct functor2_vec_sca<T, P, tvec1>$/;"	s	namespace:glm::detail
functor2_vec_sca	mesh_visibility/glm/glm/detail/_vectorize.hpp	/^	struct functor2_vec_sca<T, P, tvec2>$/;"	s	namespace:glm::detail
functor2_vec_sca	mesh_visibility/glm/glm/detail/_vectorize.hpp	/^	struct functor2_vec_sca<T, P, tvec3>$/;"	s	namespace:glm::detail
functor2_vec_sca	mesh_visibility/glm/glm/detail/_vectorize.hpp	/^	struct functor2_vec_sca<T, P, tvec4>$/;"	s	namespace:glm::detail
functor2_vec_sca	mesh_visibility/glm/glm/detail/_vectorize.hpp	/^	struct functor2_vec_sca{};$/;"	s	namespace:glm::detail
fvec1	mesh_visibility/glm/glm/fwd.hpp	/^	typedef highp_f32vec1			fvec1;$/;"	t	namespace:glm
fvec1	mesh_visibility/glm/glm/fwd.hpp	/^	typedef lowp_f32vec1			fvec1;$/;"	t	namespace:glm
fvec1	mesh_visibility/glm/glm/fwd.hpp	/^	typedef mediump_f32vec1			fvec1;$/;"	t	namespace:glm
fvec1	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef tvec1<float, defaultp> fvec1;$/;"	t	namespace:glm
fvec2	mesh_visibility/glm/glm/fwd.hpp	/^	typedef highp_f32vec2			fvec2;$/;"	t	namespace:glm
fvec2	mesh_visibility/glm/glm/fwd.hpp	/^	typedef lowp_f32vec2			fvec2;$/;"	t	namespace:glm
fvec2	mesh_visibility/glm/glm/fwd.hpp	/^	typedef mediump_f32vec2			fvec2;$/;"	t	namespace:glm
fvec2	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef tvec2<float, defaultp> fvec2;$/;"	t	namespace:glm
fvec3	mesh_visibility/glm/glm/fwd.hpp	/^	typedef highp_f32vec3			fvec3;$/;"	t	namespace:glm
fvec3	mesh_visibility/glm/glm/fwd.hpp	/^	typedef lowp_f32vec3			fvec3;$/;"	t	namespace:glm
fvec3	mesh_visibility/glm/glm/fwd.hpp	/^	typedef mediump_f32vec3			fvec3;$/;"	t	namespace:glm
fvec3	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef tvec3<float, defaultp> fvec3;$/;"	t	namespace:glm
fvec4	mesh_visibility/glm/glm/fwd.hpp	/^	typedef highp_f32vec4			fvec4;$/;"	t	namespace:glm
fvec4	mesh_visibility/glm/glm/fwd.hpp	/^	typedef lowp_f32vec4			fvec4;$/;"	t	namespace:glm
fvec4	mesh_visibility/glm/glm/fwd.hpp	/^	typedef mediump_f32vec4			fvec4;$/;"	t	namespace:glm
fvec4	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef tvec4<float, defaultp> fvec4;$/;"	t	namespace:glm
fx	mesh_texture_opt/mesh_opt.h	/^        double fx, fy, cx, cy;$/;"	m	struct:RGBDMeshOpt::CalibrationParams
fx_	mesh_visibility/mesh_visibility.h	/^	float fx_, fy_, cx_, cy_; \/\/ intrinsic parameters$/;"	m	class:MeshVisibility
fy	mesh_texture_opt/mesh_opt.h	/^        double fx, fy, cx, cy;$/;"	m	struct:RGBDMeshOpt::CalibrationParams
fy_	mesh_visibility/mesh_visibility.h	/^	float fx_, fy_, cx_, cy_; \/\/ intrinsic parameters$/;"	m	class:MeshVisibility
g	mesh_visibility/glm/glm/detail/type_vec2.hpp	/^				struct{ T r, g; };$/;"	m	struct:glm::tvec2::__anon18::__anon20
g	mesh_visibility/glm/glm/detail/type_vec2.hpp	/^			union {T y, g, t;};$/;"	m	union:glm::tvec2::__anon23
g	mesh_visibility/glm/glm/detail/type_vec3.hpp	/^				struct{ T r, g, b; };$/;"	m	struct:glm::tvec3::__anon11::__anon13
g	mesh_visibility/glm/glm/detail/type_vec3.hpp	/^			union { T y, g, t; };$/;"	m	union:glm::tvec3::__anon16
g	mesh_visibility/glm/glm/detail/type_vec4.hpp	/^				struct { T r, g, b, a; };$/;"	m	struct:glm::tvec4::__anon1::__anon3
g	mesh_visibility/glm/glm/detail/type_vec4.hpp	/^			union { T y, g, t; };$/;"	m	union:glm::tvec4::__anon6
genType	mesh_visibility/glm/glm/detail/type_gentype.hpp	/^	struct genType$/;"	s	namespace:glm::detail
generateFinalTexelColors	mesh_texture_opt/mesh_opt.cpp	/^void RGBDMeshOpt::generateFinalTexelColors()$/;"	f	class:RGBDMeshOpt
getCommonNeighborNum	mesh_partition/partition.cpp	/^int Partition::getCommonNeighborNum(int v1, int v2)$/;"	f	class:Partition
getConnectedComponents	mesh_texture_opt/mesh_opt.cpp	/^void RGBDMeshOpt::getConnectedComponents()$/;"	f	class:RGBDMeshOpt
getCurrentClusterNum	mesh_partition/partition.h	/^    int getCurrentClusterNum() { return curr_cluster_num_; }$/;"	f	class:Partition
getDepthValue	mesh_visibility/mesh_visibility.h	/^	float getDepthValue(int row, int col){$/;"	f	class:MeshVisibility
getEdge	mesh_partition/partition.h	/^    inline void getEdge(const long long& key, int& v1, int& v2)$/;"	f	class:Partition
getFilename	mesh_visibility/mesh_visibility.h	/^	inline string getFilename(int frame_idx){$/;"	f	class:MeshVisibility
getKey	mesh_texture_opt/mesh_opt.h	/^    inline long long getKey(long long a, long long b)$/;"	f	class:RGBDMeshOpt
getOriginalVtxIdx	mesh_visibility/mesh_visibility.h	/^	int getOriginalVtxIdx(int pixel_idx){$/;"	f	class:MeshVisibility
getOriginalVtxIdx	mesh_visibility/mesh_visibility.h	/^	int getOriginalVtxIdx(int row, int col){$/;"	f	class:MeshVisibility
getPair	mesh_texture_opt/mesh_opt.h	/^    inline void getPair(long long key, int& v1, int& v2)$/;"	f	class:RGBDMeshOpt
getTotalEnergy	mesh_partition/partition.cpp	/^double Partition::getTotalEnergy()$/;"	f	class:Partition
get_heap_pos	mesh_partition/heap/MxHeap.h	/^    inline int get_heap_pos() { return token; }$/;"	f	class:MxHeapable
get_heap_pos	mesh_partition/myheap.h	/^    inline int get_heap_pos() { return token; }$/;"	f	class:MxHeapable
glUniformMatrix4fv	mesh_visibility/glm/glm/detail/dummy.cpp	/^void glUniformMatrix4fv(GLuint, int, int, float*){}$/;"	f
glm	mesh_visibility/glm/glm/detail/_noise.hpp	/^namespace glm{$/;"	n
glm	mesh_visibility/glm/glm/detail/_swizzle.hpp	/^namespace glm$/;"	n
glm	mesh_visibility/glm/glm/detail/_swizzle.hpp	/^namespace glm{$/;"	n
glm	mesh_visibility/glm/glm/detail/_vectorize.hpp	/^namespace glm{$/;"	n
glm	mesh_visibility/glm/glm/detail/func_common.hpp	/^namespace glm$/;"	n
glm	mesh_visibility/glm/glm/detail/func_exponential.hpp	/^namespace glm$/;"	n
glm	mesh_visibility/glm/glm/detail/func_geometric.hpp	/^namespace glm$/;"	n
glm	mesh_visibility/glm/glm/detail/func_integer.hpp	/^namespace glm$/;"	n
glm	mesh_visibility/glm/glm/detail/func_matrix.hpp	/^namespace glm{$/;"	n
glm	mesh_visibility/glm/glm/detail/func_packing.hpp	/^namespace glm$/;"	n
glm	mesh_visibility/glm/glm/detail/func_trigonometric.hpp	/^namespace glm$/;"	n
glm	mesh_visibility/glm/glm/detail/func_vector_relational.hpp	/^namespace glm$/;"	n
glm	mesh_visibility/glm/glm/detail/glm.cpp	/^namespace glm$/;"	n	file:
glm	mesh_visibility/glm/glm/detail/intrinsic_common.hpp	/^namespace glm{$/;"	n
glm	mesh_visibility/glm/glm/detail/intrinsic_exponential.hpp	/^namespace glm{$/;"	n
glm	mesh_visibility/glm/glm/detail/intrinsic_geometric.hpp	/^namespace glm{$/;"	n
glm	mesh_visibility/glm/glm/detail/intrinsic_integer.hpp	/^namespace glm{$/;"	n
glm	mesh_visibility/glm/glm/detail/intrinsic_matrix.hpp	/^namespace glm{$/;"	n
glm	mesh_visibility/glm/glm/detail/intrinsic_trigonometric.hpp	/^namespace glm{$/;"	n
glm	mesh_visibility/glm/glm/detail/intrinsic_vector_relational.hpp	/^namespace glm{$/;"	n
glm	mesh_visibility/glm/glm/detail/precision.hpp	/^namespace glm$/;"	n
glm	mesh_visibility/glm/glm/detail/setup.hpp	/^	namespace glm$/;"	n
glm	mesh_visibility/glm/glm/detail/setup.hpp	/^namespace glm$/;"	n
glm	mesh_visibility/glm/glm/detail/type_float.hpp	/^namespace glm{$/;"	n
glm	mesh_visibility/glm/glm/detail/type_gentype.hpp	/^namespace glm$/;"	n
glm	mesh_visibility/glm/glm/detail/type_half.hpp	/^namespace glm{$/;"	n
glm	mesh_visibility/glm/glm/detail/type_int.hpp	/^namespace glm{$/;"	n
glm	mesh_visibility/glm/glm/detail/type_mat.hpp	/^namespace glm{$/;"	n
glm	mesh_visibility/glm/glm/detail/type_mat2x2.hpp	/^namespace glm$/;"	n
glm	mesh_visibility/glm/glm/detail/type_mat2x3.hpp	/^namespace glm$/;"	n
glm	mesh_visibility/glm/glm/detail/type_mat2x4.hpp	/^namespace glm$/;"	n
glm	mesh_visibility/glm/glm/detail/type_mat3x2.hpp	/^namespace glm$/;"	n
glm	mesh_visibility/glm/glm/detail/type_mat3x3.hpp	/^namespace glm$/;"	n
glm	mesh_visibility/glm/glm/detail/type_mat3x4.hpp	/^namespace glm$/;"	n
glm	mesh_visibility/glm/glm/detail/type_mat4x2.hpp	/^namespace glm$/;"	n
glm	mesh_visibility/glm/glm/detail/type_mat4x3.hpp	/^namespace glm$/;"	n
glm	mesh_visibility/glm/glm/detail/type_mat4x4.hpp	/^namespace glm$/;"	n
glm	mesh_visibility/glm/glm/detail/type_vec.hpp	/^namespace glm$/;"	n
glm	mesh_visibility/glm/glm/detail/type_vec1.hpp	/^namespace glm$/;"	n
glm	mesh_visibility/glm/glm/detail/type_vec2.hpp	/^namespace glm$/;"	n
glm	mesh_visibility/glm/glm/detail/type_vec3.hpp	/^namespace glm$/;"	n
glm	mesh_visibility/glm/glm/detail/type_vec4.hpp	/^namespace glm{$/;"	n
glm	mesh_visibility/glm/glm/fwd.hpp	/^namespace glm$/;"	n
glm	mesh_visibility/glm/glm/gtc/bitfield.hpp	/^namespace glm$/;"	n
glm	mesh_visibility/glm/glm/gtc/color_space.hpp	/^namespace glm$/;"	n
glm	mesh_visibility/glm/glm/gtc/constants.hpp	/^namespace glm$/;"	n
glm	mesh_visibility/glm/glm/gtc/epsilon.hpp	/^namespace glm$/;"	n
glm	mesh_visibility/glm/glm/gtc/integer.hpp	/^namespace glm$/;"	n
glm	mesh_visibility/glm/glm/gtc/matrix_access.hpp	/^namespace glm$/;"	n
glm	mesh_visibility/glm/glm/gtc/matrix_integer.hpp	/^namespace glm$/;"	n
glm	mesh_visibility/glm/glm/gtc/matrix_inverse.hpp	/^namespace glm$/;"	n
glm	mesh_visibility/glm/glm/gtc/matrix_transform.hpp	/^namespace glm$/;"	n
glm	mesh_visibility/glm/glm/gtc/noise.hpp	/^namespace glm$/;"	n
glm	mesh_visibility/glm/glm/gtc/packing.hpp	/^namespace glm$/;"	n
glm	mesh_visibility/glm/glm/gtc/quaternion.hpp	/^namespace glm$/;"	n
glm	mesh_visibility/glm/glm/gtc/random.hpp	/^namespace glm$/;"	n
glm	mesh_visibility/glm/glm/gtc/reciprocal.hpp	/^namespace glm$/;"	n
glm	mesh_visibility/glm/glm/gtc/round.hpp	/^namespace glm$/;"	n
glm	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^namespace glm$/;"	n
glm	mesh_visibility/glm/glm/gtc/type_ptr.hpp	/^namespace glm$/;"	n
glm	mesh_visibility/glm/glm/gtc/ulp.hpp	/^namespace glm$/;"	n
glm	mesh_visibility/glm/glm/gtc/vec1.hpp	/^namespace glm$/;"	n
glm	mesh_visibility/glm/glm/gtx/associated_min_max.hpp	/^namespace glm$/;"	n
glm	mesh_visibility/glm/glm/gtx/bit.hpp	/^namespace glm$/;"	n
glm	mesh_visibility/glm/glm/gtx/closest_point.hpp	/^namespace glm$/;"	n
glm	mesh_visibility/glm/glm/gtx/color_space.hpp	/^namespace glm$/;"	n
glm	mesh_visibility/glm/glm/gtx/color_space_YCoCg.hpp	/^namespace glm$/;"	n
glm	mesh_visibility/glm/glm/gtx/common.hpp	/^namespace glm$/;"	n
glm	mesh_visibility/glm/glm/gtx/compatibility.hpp	/^namespace glm$/;"	n
glm	mesh_visibility/glm/glm/gtx/component_wise.hpp	/^namespace glm$/;"	n
glm	mesh_visibility/glm/glm/gtx/dual_quaternion.hpp	/^namespace glm$/;"	n
glm	mesh_visibility/glm/glm/gtx/euler_angles.hpp	/^namespace glm$/;"	n
glm	mesh_visibility/glm/glm/gtx/extend.hpp	/^namespace glm$/;"	n
glm	mesh_visibility/glm/glm/gtx/extented_min_max.hpp	/^namespace glm$/;"	n
glm	mesh_visibility/glm/glm/gtx/fast_exponential.hpp	/^namespace glm$/;"	n
glm	mesh_visibility/glm/glm/gtx/fast_square_root.hpp	/^namespace glm$/;"	n
glm	mesh_visibility/glm/glm/gtx/fast_trigonometry.hpp	/^namespace glm$/;"	n
glm	mesh_visibility/glm/glm/gtx/gradient_paint.hpp	/^namespace glm$/;"	n
glm	mesh_visibility/glm/glm/gtx/handed_coordinate_space.hpp	/^namespace glm$/;"	n
glm	mesh_visibility/glm/glm/gtx/integer.hpp	/^namespace glm$/;"	n
glm	mesh_visibility/glm/glm/gtx/intersect.hpp	/^namespace glm$/;"	n
glm	mesh_visibility/glm/glm/gtx/io.hpp	/^namespace glm$/;"	n
glm	mesh_visibility/glm/glm/gtx/log_base.hpp	/^namespace glm$/;"	n
glm	mesh_visibility/glm/glm/gtx/matrix_cross_product.hpp	/^namespace glm$/;"	n
glm	mesh_visibility/glm/glm/gtx/matrix_decompose.hpp	/^namespace glm$/;"	n
glm	mesh_visibility/glm/glm/gtx/matrix_interpolation.hpp	/^namespace glm$/;"	n
glm	mesh_visibility/glm/glm/gtx/matrix_major_storage.hpp	/^namespace glm$/;"	n
glm	mesh_visibility/glm/glm/gtx/matrix_operation.hpp	/^namespace glm$/;"	n
glm	mesh_visibility/glm/glm/gtx/matrix_query.hpp	/^namespace glm$/;"	n
glm	mesh_visibility/glm/glm/gtx/matrix_transform_2d.hpp	/^namespace glm$/;"	n
glm	mesh_visibility/glm/glm/gtx/mixed_product.hpp	/^namespace glm$/;"	n
glm	mesh_visibility/glm/glm/gtx/norm.hpp	/^namespace glm$/;"	n
glm	mesh_visibility/glm/glm/gtx/normal.hpp	/^namespace glm$/;"	n
glm	mesh_visibility/glm/glm/gtx/normalize_dot.hpp	/^namespace glm$/;"	n
glm	mesh_visibility/glm/glm/gtx/number_precision.hpp	/^namespace glm{$/;"	n
glm	mesh_visibility/glm/glm/gtx/optimum_pow.hpp	/^namespace glm{$/;"	n
glm	mesh_visibility/glm/glm/gtx/orthonormalize.hpp	/^namespace glm$/;"	n
glm	mesh_visibility/glm/glm/gtx/perpendicular.hpp	/^namespace glm$/;"	n
glm	mesh_visibility/glm/glm/gtx/polar_coordinates.hpp	/^namespace glm$/;"	n
glm	mesh_visibility/glm/glm/gtx/projection.hpp	/^namespace glm$/;"	n
glm	mesh_visibility/glm/glm/gtx/quaternion.hpp	/^namespace glm$/;"	n
glm	mesh_visibility/glm/glm/gtx/range.hpp	/^namespace glm{$/;"	n
glm	mesh_visibility/glm/glm/gtx/raw_data.hpp	/^namespace glm$/;"	n
glm	mesh_visibility/glm/glm/gtx/rotate_normalized_axis.hpp	/^namespace glm$/;"	n
glm	mesh_visibility/glm/glm/gtx/rotate_vector.hpp	/^namespace glm$/;"	n
glm	mesh_visibility/glm/glm/gtx/scalar_multiplication.hpp	/^namespace glm$/;"	n
glm	mesh_visibility/glm/glm/gtx/scalar_relational.hpp	/^namespace glm$/;"	n
glm	mesh_visibility/glm/glm/gtx/simd_mat4.hpp	/^namespace glm{$/;"	n
glm	mesh_visibility/glm/glm/gtx/simd_quat.hpp	/^namespace glm{$/;"	n
glm	mesh_visibility/glm/glm/gtx/simd_vec4.hpp	/^namespace glm$/;"	n
glm	mesh_visibility/glm/glm/gtx/simd_vec4.hpp	/^namespace glm{$/;"	n
glm	mesh_visibility/glm/glm/gtx/spline.hpp	/^namespace glm$/;"	n
glm	mesh_visibility/glm/glm/gtx/std_based_type.hpp	/^namespace glm$/;"	n
glm	mesh_visibility/glm/glm/gtx/string_cast.hpp	/^namespace glm$/;"	n
glm	mesh_visibility/glm/glm/gtx/transform.hpp	/^namespace glm$/;"	n
glm	mesh_visibility/glm/glm/gtx/transform2.hpp	/^namespace glm$/;"	n
glm	mesh_visibility/glm/glm/gtx/type_aligned.hpp	/^namespace glm$/;"	n
glm	mesh_visibility/glm/glm/gtx/vector_angle.hpp	/^namespace glm$/;"	n
glm	mesh_visibility/glm/glm/gtx/vector_query.hpp	/^namespace glm$/;"	n
glm	mesh_visibility/glm/glm/gtx/wrap.hpp	/^namespace glm$/;"	n
glm	mesh_visibility/glm/glm/mat2x2.hpp	/^namespace glm$/;"	n
glm	mesh_visibility/glm/glm/mat2x3.hpp	/^namespace glm$/;"	n
glm	mesh_visibility/glm/glm/mat2x4.hpp	/^namespace glm$/;"	n
glm	mesh_visibility/glm/glm/mat3x2.hpp	/^namespace glm$/;"	n
glm	mesh_visibility/glm/glm/mat3x3.hpp	/^namespace glm$/;"	n
glm	mesh_visibility/glm/glm/mat3x4.hpp	/^namespace glm$/;"	n
glm	mesh_visibility/glm/glm/mat4x2.hpp	/^namespace glm$/;"	n
glm	mesh_visibility/glm/glm/mat4x3.hpp	/^namespace glm$/;"	n
glm	mesh_visibility/glm/glm/mat4x4.hpp	/^namespace glm$/;"	n
globalToCameraSpace	mesh_texture_opt/mesh_opt.cpp	/^Vector3d RGBDMeshOpt::globalToCameraSpace(const Vector3d& pt, const Matrix4d& inv_T)$/;"	f	class:RGBDMeshOpt
globalToImgSpace	mesh_texture_opt/mesh_opt.cpp	/^Vector2d RGBDMeshOpt::globalToImgSpace(const Vector3d& pt, CalibrationParams& calib, const Matrix4d& inv_T)$/;"	f	class:RGBDMeshOpt
global_edges_	mesh_partition/partition.h	/^    vector<vector<Edge*>> global_edges_;$/;"	m	class:Partition
gray_img	mesh_texture_opt/mesh_opt.h	/^        cv::Mat color_img, depth_img, gray_img;$/;"	m	struct:RGBDMeshOpt::Frame
graycolor	mesh_texture_opt/mesh_opt.h	/^        double graycolor;$/;"	m	struct:RGBDMeshOpt::ImgPixel
green	mesh_visibility/glfw/glfw3.h	/^    unsigned short* green;$/;"	m	struct:GLFWgammaramp
greenBits	mesh_visibility/glfw/glfw3.h	/^    int greenBits;$/;"	m	struct:GLFWvidmode
gtx	mesh_visibility/glm/glm/gtx/number_precision.hpp	/^namespace gtx$/;"	n	namespace:glm
gtx	mesh_visibility/glm/glm/gtx/optimum_pow.hpp	/^namespace gtx$/;"	n	namespace:glm
halfVector	mesh_visibility/glm/glm/detail/dummy.cpp	/^	glm::vec4 halfVector; \/\/ Derived: Hi$/;"	m	struct:light	file:
hash	mesh_visibility/glm/glm/gtx/hash.hpp	/^	struct hash<glm::tdualquat<T,P> >$/;"	s	namespace:std
hash	mesh_visibility/glm/glm/gtx/hash.hpp	/^	struct hash<glm::tmat2x2<T,P> >$/;"	s	namespace:std
hash	mesh_visibility/glm/glm/gtx/hash.hpp	/^	struct hash<glm::tmat2x3<T,P> >$/;"	s	namespace:std
hash	mesh_visibility/glm/glm/gtx/hash.hpp	/^	struct hash<glm::tmat2x4<T,P> >$/;"	s	namespace:std
hash	mesh_visibility/glm/glm/gtx/hash.hpp	/^	struct hash<glm::tmat3x2<T,P> >$/;"	s	namespace:std
hash	mesh_visibility/glm/glm/gtx/hash.hpp	/^	struct hash<glm::tmat3x3<T,P> >$/;"	s	namespace:std
hash	mesh_visibility/glm/glm/gtx/hash.hpp	/^	struct hash<glm::tmat3x4<T,P> >$/;"	s	namespace:std
hash	mesh_visibility/glm/glm/gtx/hash.hpp	/^	struct hash<glm::tmat4x2<T,P> >$/;"	s	namespace:std
hash	mesh_visibility/glm/glm/gtx/hash.hpp	/^	struct hash<glm::tmat4x3<T,P> >$/;"	s	namespace:std
hash	mesh_visibility/glm/glm/gtx/hash.hpp	/^	struct hash<glm::tmat4x4<T,P> >$/;"	s	namespace:std
hash	mesh_visibility/glm/glm/gtx/hash.hpp	/^	struct hash<glm::tquat<T,P>>$/;"	s	namespace:std
hash	mesh_visibility/glm/glm/gtx/hash.hpp	/^	struct hash<glm::tvec1<T,P> >$/;"	s	namespace:std
hash	mesh_visibility/glm/glm/gtx/hash.hpp	/^	struct hash<glm::tvec2<T,P> >$/;"	s	namespace:std
hash	mesh_visibility/glm/glm/gtx/hash.hpp	/^	struct hash<glm::tvec3<T,P> >$/;"	s	namespace:std
hash	mesh_visibility/glm/glm/gtx/hash.hpp	/^	struct hash<glm::tvec4<T,P> >$/;"	s	namespace:std
hdata	mesh_visibility/glm/glm/detail/type_half.hpp	/^	typedef short hdata;$/;"	t	namespace:glm::detail
heap_	mesh_partition/partition.h	/^    MxHeap heap_;$/;"	m	class:Partition
heap_key	mesh_partition/heap/MxHeap.h	/^    inline double heap_key() const { return import; }$/;"	f	class:MxHeapable
heap_key	mesh_partition/heap/MxHeap.h	/^    inline void heap_key(double k) { import = k; }$/;"	f	class:MxHeapable
heap_key	mesh_partition/myheap.h	/^    inline double heap_key() const { return import; }$/;"	f	class:MxHeapable
heap_key	mesh_partition/myheap.h	/^    inline void heap_key(double k) { import = k; }$/;"	f	class:MxHeapable
height	mesh_texture_opt/mesh_opt.h	/^        int minx, miny, width, height;  \/\/ bounding box parameters$/;"	m	struct:RGBDMeshOpt::TreeNode
height	mesh_texture_opt/mesh_opt.h	/^        int width, height, area;                  \/\/ parameters of the patch rectangle$/;"	m	struct:RGBDMeshOpt::TexturePatch
height	mesh_texture_opt/mesh_opt.h	/^        int width, height;$/;"	m	struct:RGBDMeshOpt::CalibrationParams
height	mesh_visibility/glfw/glfw3.h	/^    int height;$/;"	m	struct:GLFWimage
height	mesh_visibility/glfw/glfw3.h	/^    int height;$/;"	m	struct:GLFWvidmode
highp	mesh_visibility/glm/glm/detail/precision.hpp	/^		highp,$/;"	e	enum:glm::precision
highp_bvec1	mesh_visibility/glm/glm/gtc/vec1.hpp	/^	typedef highp_bvec1_t			highp_bvec1;$/;"	t	namespace:glm
highp_bvec1_t	mesh_visibility/glm/glm/detail/type_vec.hpp	/^	typedef tvec1<bool, highp>		highp_bvec1_t;$/;"	t	namespace:glm
highp_bvec2	mesh_visibility/glm/glm/detail/type_vec.hpp	/^	typedef tvec2<bool, highp>		highp_bvec2;$/;"	t	namespace:glm
highp_bvec3	mesh_visibility/glm/glm/detail/type_vec.hpp	/^	typedef tvec3<bool, highp>		highp_bvec3;$/;"	t	namespace:glm
highp_bvec4	mesh_visibility/glm/glm/detail/type_vec.hpp	/^	typedef tvec4<bool, highp>		highp_bvec4;$/;"	t	namespace:glm
highp_ddualquat	mesh_visibility/glm/glm/gtx/dual_quaternion.hpp	/^	typedef tdualquat<double, highp>	highp_ddualquat;$/;"	t	namespace:glm
highp_dmat2	mesh_visibility/glm/glm/detail/type_mat.hpp	/^	typedef tmat2x2<double, highp>		highp_dmat2;$/;"	t	namespace:glm
highp_dmat2x2	mesh_visibility/glm/glm/detail/type_mat.hpp	/^	typedef tmat2x2<double, highp>		highp_dmat2x2;$/;"	t	namespace:glm
highp_dmat2x3	mesh_visibility/glm/glm/detail/type_mat.hpp	/^	typedef tmat2x3<double, highp>		highp_dmat2x3;$/;"	t	namespace:glm
highp_dmat2x4	mesh_visibility/glm/glm/detail/type_mat.hpp	/^	typedef tmat2x4<double, highp>		highp_dmat2x4;$/;"	t	namespace:glm
highp_dmat3	mesh_visibility/glm/glm/detail/type_mat.hpp	/^	typedef tmat3x3<double, highp>		highp_dmat3;$/;"	t	namespace:glm
highp_dmat3x2	mesh_visibility/glm/glm/detail/type_mat.hpp	/^	typedef tmat3x2<double, highp>		highp_dmat3x2;$/;"	t	namespace:glm
highp_dmat3x3	mesh_visibility/glm/glm/detail/type_mat.hpp	/^	typedef tmat3x3<double, highp>		highp_dmat3x3;$/;"	t	namespace:glm
highp_dmat3x4	mesh_visibility/glm/glm/detail/type_mat.hpp	/^	typedef tmat3x4<double, highp>		highp_dmat3x4;$/;"	t	namespace:glm
highp_dmat4	mesh_visibility/glm/glm/detail/type_mat.hpp	/^	typedef tmat4x4<double, highp>		highp_dmat4;$/;"	t	namespace:glm
highp_dmat4x2	mesh_visibility/glm/glm/detail/type_mat.hpp	/^	typedef tmat4x2<double, highp>		highp_dmat4x2;$/;"	t	namespace:glm
highp_dmat4x3	mesh_visibility/glm/glm/detail/type_mat.hpp	/^	typedef tmat4x3<double, highp>		highp_dmat4x3;$/;"	t	namespace:glm
highp_dmat4x4	mesh_visibility/glm/glm/detail/type_mat.hpp	/^	typedef tmat4x4<double, highp>		highp_dmat4x4;$/;"	t	namespace:glm
highp_dquat	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tquat<double, highp>	highp_dquat;$/;"	t	namespace:glm
highp_dualquat	mesh_visibility/glm/glm/gtx/dual_quaternion.hpp	/^	typedef tdualquat<float, highp>		highp_dualquat;$/;"	t	namespace:glm
highp_dvec1	mesh_visibility/glm/glm/gtc/vec1.hpp	/^	typedef highp_dvec1_t			highp_dvec1;$/;"	t	namespace:glm
highp_dvec1_t	mesh_visibility/glm/glm/detail/type_vec.hpp	/^	typedef tvec1<double, highp>	highp_dvec1_t;$/;"	t	namespace:glm
highp_dvec2	mesh_visibility/glm/glm/detail/type_vec.hpp	/^	typedef tvec2<double, highp>	highp_dvec2;$/;"	t	namespace:glm
highp_dvec3	mesh_visibility/glm/glm/detail/type_vec.hpp	/^	typedef tvec3<double, highp>	highp_dvec3;$/;"	t	namespace:glm
highp_dvec4	mesh_visibility/glm/glm/detail/type_vec.hpp	/^	typedef tvec4<double, highp>	highp_dvec4;$/;"	t	namespace:glm
highp_f32	mesh_visibility/glm/glm/fwd.hpp	/^	typedef float32 highp_f32;$/;"	t	namespace:glm
highp_f32mat2	mesh_visibility/glm/glm/fwd.hpp	/^	typedef highp_f32mat2x2 highp_f32mat2;$/;"	t	namespace:glm
highp_f32mat2x2	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tmat2x2<f32, highp> highp_f32mat2x2;$/;"	t	namespace:glm
highp_f32mat2x3	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tmat2x3<f32, highp> highp_f32mat2x3;$/;"	t	namespace:glm
highp_f32mat2x4	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tmat2x4<f32, highp> highp_f32mat2x4;$/;"	t	namespace:glm
highp_f32mat3	mesh_visibility/glm/glm/fwd.hpp	/^	typedef highp_f32mat3x3 highp_f32mat3;$/;"	t	namespace:glm
highp_f32mat3x2	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tmat3x2<f32, highp> highp_f32mat3x2;$/;"	t	namespace:glm
highp_f32mat3x3	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tmat3x3<f32, highp> highp_f32mat3x3;$/;"	t	namespace:glm
highp_f32mat3x4	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tmat3x4<f32, highp> highp_f32mat3x4;$/;"	t	namespace:glm
highp_f32mat4	mesh_visibility/glm/glm/fwd.hpp	/^	typedef highp_f32mat4x4 highp_f32mat4;$/;"	t	namespace:glm
highp_f32mat4x2	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tmat4x2<f32, highp> highp_f32mat4x2;$/;"	t	namespace:glm
highp_f32mat4x3	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tmat4x3<f32, highp> highp_f32mat4x3;$/;"	t	namespace:glm
highp_f32mat4x4	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tmat4x4<f32, highp> highp_f32mat4x4;$/;"	t	namespace:glm
highp_f32quat	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tquat<f32, highp> highp_f32quat;$/;"	t	namespace:glm
highp_f32vec1	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tvec1<f32, highp> highp_f32vec1;$/;"	t	namespace:glm
highp_f32vec2	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tvec2<f32, highp> highp_f32vec2;$/;"	t	namespace:glm
highp_f32vec3	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tvec3<f32, highp> highp_f32vec3;$/;"	t	namespace:glm
highp_f32vec4	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tvec4<f32, highp> highp_f32vec4;$/;"	t	namespace:glm
highp_f64	mesh_visibility/glm/glm/fwd.hpp	/^	typedef float64 highp_f64;$/;"	t	namespace:glm
highp_f64mat2	mesh_visibility/glm/glm/fwd.hpp	/^	typedef highp_f64mat2x2 highp_f64mat2;$/;"	t	namespace:glm
highp_f64mat2x2	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tmat2x2<f64, highp> highp_f64mat2x2;$/;"	t	namespace:glm
highp_f64mat2x3	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tmat2x3<f64, highp> highp_f64mat2x3;$/;"	t	namespace:glm
highp_f64mat2x4	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tmat2x4<f64, highp> highp_f64mat2x4;$/;"	t	namespace:glm
highp_f64mat3	mesh_visibility/glm/glm/fwd.hpp	/^	typedef highp_f64mat3x3 highp_f64mat3;$/;"	t	namespace:glm
highp_f64mat3x2	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tmat3x2<f64, highp> highp_f64mat3x2;$/;"	t	namespace:glm
highp_f64mat3x3	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tmat3x3<f64, highp> highp_f64mat3x3;$/;"	t	namespace:glm
highp_f64mat3x4	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tmat3x4<f64, highp> highp_f64mat3x4;$/;"	t	namespace:glm
highp_f64mat4	mesh_visibility/glm/glm/fwd.hpp	/^	typedef highp_f64mat4x4 highp_f64mat4;$/;"	t	namespace:glm
highp_f64mat4x2	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tmat4x2<f64, highp> highp_f64mat4x2;$/;"	t	namespace:glm
highp_f64mat4x3	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tmat4x3<f64, highp> highp_f64mat4x3;$/;"	t	namespace:glm
highp_f64mat4x4	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tmat4x4<f64, highp> highp_f64mat4x4;$/;"	t	namespace:glm
highp_f64quat	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tquat<f64, highp> highp_f64quat;$/;"	t	namespace:glm
highp_f64vec1	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tvec1<f64, highp> highp_f64vec1;$/;"	t	namespace:glm
highp_f64vec2	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tvec2<f64, highp> highp_f64vec2;$/;"	t	namespace:glm
highp_f64vec3	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tvec3<f64, highp> highp_f64vec3;$/;"	t	namespace:glm
highp_f64vec4	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tvec4<f64, highp> highp_f64vec4;$/;"	t	namespace:glm
highp_fdualquat	mesh_visibility/glm/glm/gtx/dual_quaternion.hpp	/^	typedef tdualquat<float, highp>		highp_fdualquat;$/;"	t	namespace:glm
highp_float	mesh_visibility/glm/glm/detail/type_float.hpp	/^	typedef highp_float_t		highp_float;$/;"	t	namespace:glm
highp_float32	mesh_visibility/glm/glm/fwd.hpp	/^	typedef detail::float32 highp_float32;$/;"	t	namespace:glm
highp_float32_t	mesh_visibility/glm/glm/fwd.hpp	/^	typedef detail::float32 highp_float32_t;$/;"	t	namespace:glm
highp_float64	mesh_visibility/glm/glm/fwd.hpp	/^	typedef detail::float64 highp_float64;$/;"	t	namespace:glm
highp_float64_t	mesh_visibility/glm/glm/fwd.hpp	/^	typedef detail::float64 highp_float64_t;$/;"	t	namespace:glm
highp_float_t	mesh_visibility/glm/glm/detail/type_float.hpp	/^	typedef double				highp_float_t;$/;"	t	namespace:glm
highp_fmat2	mesh_visibility/glm/glm/fwd.hpp	/^	typedef highp_fmat2x2 highp_fmat2;$/;"	t	namespace:glm
highp_fmat2x2	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tmat2x2<f32, highp> highp_fmat2x2;$/;"	t	namespace:glm
highp_fmat2x3	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tmat2x3<f32, highp> highp_fmat2x3;$/;"	t	namespace:glm
highp_fmat2x4	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tmat2x4<f32, highp> highp_fmat2x4;$/;"	t	namespace:glm
highp_fmat3	mesh_visibility/glm/glm/fwd.hpp	/^	typedef highp_fmat3x3 highp_fmat3;$/;"	t	namespace:glm
highp_fmat3x2	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tmat3x2<f32, highp> highp_fmat3x2;$/;"	t	namespace:glm
highp_fmat3x3	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tmat3x3<f32, highp> highp_fmat3x3;$/;"	t	namespace:glm
highp_fmat3x4	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tmat3x4<f32, highp> highp_fmat3x4;$/;"	t	namespace:glm
highp_fmat4	mesh_visibility/glm/glm/fwd.hpp	/^	typedef highp_fmat4x4 highp_fmat4;$/;"	t	namespace:glm
highp_fmat4x2	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tmat4x2<f32, highp> highp_fmat4x2;$/;"	t	namespace:glm
highp_fmat4x3	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tmat4x3<f32, highp> highp_fmat4x3;$/;"	t	namespace:glm
highp_fmat4x4	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tmat4x4<f32, highp> highp_fmat4x4;$/;"	t	namespace:glm
highp_fquat	mesh_visibility/glm/glm/fwd.hpp	/^	typedef highp_quat			highp_fquat;$/;"	t	namespace:glm
highp_fvec1	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tvec1<float, highp> highp_fvec1;$/;"	t	namespace:glm
highp_fvec2	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tvec2<float, highp> highp_fvec2;$/;"	t	namespace:glm
highp_fvec3	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tvec3<float, highp> highp_fvec3;$/;"	t	namespace:glm
highp_fvec4	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tvec4<float, highp> highp_fvec4;$/;"	t	namespace:glm
highp_i16	mesh_visibility/glm/glm/fwd.hpp	/^	typedef detail::int16 highp_i16;$/;"	t	namespace:glm
highp_i16	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef detail::int16 highp_i16;$/;"	t	namespace:glm
highp_i16vec1	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tvec1<i16, highp>		highp_i16vec1;$/;"	t	namespace:glm
highp_i16vec2	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tvec2<i16, highp>		highp_i16vec2;$/;"	t	namespace:glm
highp_i16vec3	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tvec3<i16, highp>		highp_i16vec3;$/;"	t	namespace:glm
highp_i16vec4	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tvec4<i16, highp>		highp_i16vec4;$/;"	t	namespace:glm
highp_i32	mesh_visibility/glm/glm/fwd.hpp	/^	typedef detail::int32 highp_i32;$/;"	t	namespace:glm
highp_i32	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef detail::int32 highp_i32;$/;"	t	namespace:glm
highp_i32vec1	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tvec1<i32, highp>		highp_i32vec1;$/;"	t	namespace:glm
highp_i32vec2	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tvec2<i32, highp>		highp_i32vec2;$/;"	t	namespace:glm
highp_i32vec3	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tvec3<i32, highp>		highp_i32vec3;$/;"	t	namespace:glm
highp_i32vec4	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tvec4<i32, highp>		highp_i32vec4;$/;"	t	namespace:glm
highp_i64	mesh_visibility/glm/glm/fwd.hpp	/^	typedef detail::int64 highp_i64;$/;"	t	namespace:glm
highp_i64	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef detail::int64 highp_i64;$/;"	t	namespace:glm
highp_i64vec1	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tvec1<i64, highp>		highp_i64vec1;$/;"	t	namespace:glm
highp_i64vec2	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tvec2<i64, highp>		highp_i64vec2;$/;"	t	namespace:glm
highp_i64vec3	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tvec3<i64, highp>		highp_i64vec3;$/;"	t	namespace:glm
highp_i64vec4	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tvec4<i64, highp>		highp_i64vec4;$/;"	t	namespace:glm
highp_i8	mesh_visibility/glm/glm/fwd.hpp	/^	typedef detail::int8 highp_i8;$/;"	t	namespace:glm
highp_i8	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef detail::int8 highp_i8;$/;"	t	namespace:glm
highp_i8vec1	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tvec1<i8, highp> highp_i8vec1;$/;"	t	namespace:glm
highp_i8vec2	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tvec2<i8, highp> highp_i8vec2;$/;"	t	namespace:glm
highp_i8vec3	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tvec3<i8, highp> highp_i8vec3;$/;"	t	namespace:glm
highp_i8vec4	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tvec4<i8, highp> highp_i8vec4;$/;"	t	namespace:glm
highp_imat2	mesh_visibility/glm/glm/gtc/matrix_integer.hpp	/^	typedef tmat2x2<int, highp>				highp_imat2;$/;"	t	namespace:glm
highp_imat2x2	mesh_visibility/glm/glm/gtc/matrix_integer.hpp	/^	typedef tmat2x2<int, highp>				highp_imat2x2;$/;"	t	namespace:glm
highp_imat2x3	mesh_visibility/glm/glm/gtc/matrix_integer.hpp	/^	typedef tmat2x3<int, highp>				highp_imat2x3;$/;"	t	namespace:glm
highp_imat2x4	mesh_visibility/glm/glm/gtc/matrix_integer.hpp	/^	typedef tmat2x4<int, highp>				highp_imat2x4;$/;"	t	namespace:glm
highp_imat3	mesh_visibility/glm/glm/gtc/matrix_integer.hpp	/^	typedef tmat3x3<int, highp>				highp_imat3;$/;"	t	namespace:glm
highp_imat3x2	mesh_visibility/glm/glm/gtc/matrix_integer.hpp	/^	typedef tmat3x2<int, highp>				highp_imat3x2;$/;"	t	namespace:glm
highp_imat3x3	mesh_visibility/glm/glm/gtc/matrix_integer.hpp	/^	typedef tmat3x3<int, highp>				highp_imat3x3;$/;"	t	namespace:glm
highp_imat3x4	mesh_visibility/glm/glm/gtc/matrix_integer.hpp	/^	typedef tmat3x4<int, highp>				highp_imat3x4;$/;"	t	namespace:glm
highp_imat4	mesh_visibility/glm/glm/gtc/matrix_integer.hpp	/^	typedef tmat4x4<int, highp>				highp_imat4;$/;"	t	namespace:glm
highp_imat4x2	mesh_visibility/glm/glm/gtc/matrix_integer.hpp	/^	typedef tmat4x2<int, highp>				highp_imat4x2;$/;"	t	namespace:glm
highp_imat4x3	mesh_visibility/glm/glm/gtc/matrix_integer.hpp	/^	typedef tmat4x3<int, highp>				highp_imat4x3;$/;"	t	namespace:glm
highp_imat4x4	mesh_visibility/glm/glm/gtc/matrix_integer.hpp	/^	typedef tmat4x4<int, highp>				highp_imat4x4;$/;"	t	namespace:glm
highp_int	mesh_visibility/glm/glm/detail/type_int.hpp	/^	typedef detail::highp_int_t				highp_int;$/;"	t	namespace:glm
highp_int16	mesh_visibility/glm/glm/fwd.hpp	/^	typedef detail::int16 highp_int16;$/;"	t	namespace:glm
highp_int16	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef detail::int16 highp_int16;$/;"	t	namespace:glm
highp_int16_t	mesh_visibility/glm/glm/fwd.hpp	/^	typedef detail::int16 highp_int16_t;$/;"	t	namespace:glm
highp_int16_t	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef detail::int16 highp_int16_t;$/;"	t	namespace:glm
highp_int32	mesh_visibility/glm/glm/fwd.hpp	/^	typedef detail::int32 highp_int32;$/;"	t	namespace:glm
highp_int32	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef detail::int32 highp_int32;$/;"	t	namespace:glm
highp_int32_t	mesh_visibility/glm/glm/fwd.hpp	/^	typedef detail::int32 highp_int32_t;$/;"	t	namespace:glm
highp_int32_t	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef detail::int32 highp_int32_t;$/;"	t	namespace:glm
highp_int64	mesh_visibility/glm/glm/fwd.hpp	/^	typedef detail::int64 highp_int64;$/;"	t	namespace:glm
highp_int64	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef detail::int64 highp_int64;$/;"	t	namespace:glm
highp_int64_t	mesh_visibility/glm/glm/fwd.hpp	/^	typedef detail::int64 highp_int64_t;$/;"	t	namespace:glm
highp_int64_t	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef detail::int64 highp_int64_t;$/;"	t	namespace:glm
highp_int8	mesh_visibility/glm/glm/fwd.hpp	/^	typedef detail::int8 highp_int8;$/;"	t	namespace:glm
highp_int8	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef detail::int8 highp_int8;$/;"	t	namespace:glm
highp_int8_t	mesh_visibility/glm/glm/fwd.hpp	/^	typedef detail::int8 highp_int8_t;$/;"	t	namespace:glm
highp_int8_t	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef detail::int8 highp_int8_t;$/;"	t	namespace:glm
highp_int_t	mesh_visibility/glm/glm/detail/type_int.hpp	/^	typedef signed int						highp_int_t;$/;"	t	namespace:glm::detail
highp_ivec1	mesh_visibility/glm/glm/gtc/vec1.hpp	/^	typedef highp_ivec1_t			highp_ivec1;$/;"	t	namespace:glm
highp_ivec1_t	mesh_visibility/glm/glm/detail/type_vec.hpp	/^	typedef tvec1<int, highp>		highp_ivec1_t;$/;"	t	namespace:glm
highp_ivec2	mesh_visibility/glm/glm/detail/type_vec.hpp	/^	typedef tvec2<int, highp>		highp_ivec2;$/;"	t	namespace:glm
highp_ivec3	mesh_visibility/glm/glm/detail/type_vec.hpp	/^	typedef tvec3<int, highp>		highp_ivec3;$/;"	t	namespace:glm
highp_ivec4	mesh_visibility/glm/glm/detail/type_vec.hpp	/^	typedef tvec4<int, highp>		highp_ivec4;$/;"	t	namespace:glm
highp_mat2	mesh_visibility/glm/glm/detail/type_mat.hpp	/^	typedef tmat2x2<float, highp>		highp_mat2;$/;"	t	namespace:glm
highp_mat2	mesh_visibility/glm/glm/mat2x2.hpp	/^	typedef tmat2x2<float, highp>		highp_mat2;$/;"	t	namespace:glm
highp_mat2x2	mesh_visibility/glm/glm/detail/type_mat.hpp	/^	typedef tmat2x2<float, highp>		highp_mat2x2;$/;"	t	namespace:glm
highp_mat2x2	mesh_visibility/glm/glm/mat2x2.hpp	/^	typedef tmat2x2<float, highp>		highp_mat2x2;$/;"	t	namespace:glm
highp_mat2x3	mesh_visibility/glm/glm/detail/type_mat.hpp	/^	typedef tmat2x3<float, highp>		highp_mat2x3;$/;"	t	namespace:glm
highp_mat2x3	mesh_visibility/glm/glm/mat2x3.hpp	/^	typedef tmat2x3<float, highp>		highp_mat2x3;$/;"	t	namespace:glm
highp_mat2x4	mesh_visibility/glm/glm/detail/type_mat.hpp	/^	typedef tmat2x4<float, highp>		highp_mat2x4;$/;"	t	namespace:glm
highp_mat2x4	mesh_visibility/glm/glm/mat2x4.hpp	/^	typedef tmat2x4<float, highp>		highp_mat2x4;$/;"	t	namespace:glm
highp_mat3	mesh_visibility/glm/glm/detail/type_mat.hpp	/^	typedef tmat3x3<float, highp>		highp_mat3;$/;"	t	namespace:glm
highp_mat3	mesh_visibility/glm/glm/mat3x3.hpp	/^	typedef tmat3x3<float, highp>		highp_mat3;$/;"	t	namespace:glm
highp_mat3x2	mesh_visibility/glm/glm/detail/type_mat.hpp	/^	typedef tmat3x2<float, highp>		highp_mat3x2;$/;"	t	namespace:glm
highp_mat3x2	mesh_visibility/glm/glm/mat3x2.hpp	/^	typedef tmat3x2<float, highp>		highp_mat3x2;$/;"	t	namespace:glm
highp_mat3x3	mesh_visibility/glm/glm/detail/type_mat.hpp	/^	typedef tmat3x3<float, highp>		highp_mat3x3;$/;"	t	namespace:glm
highp_mat3x3	mesh_visibility/glm/glm/mat3x3.hpp	/^	typedef tmat3x3<float, highp>		highp_mat3x3;$/;"	t	namespace:glm
highp_mat3x4	mesh_visibility/glm/glm/detail/type_mat.hpp	/^	typedef tmat3x4<float, highp>		highp_mat3x4;$/;"	t	namespace:glm
highp_mat3x4	mesh_visibility/glm/glm/mat3x4.hpp	/^	typedef tmat3x4<float, highp>		highp_mat3x4;$/;"	t	namespace:glm
highp_mat4	mesh_visibility/glm/glm/detail/type_mat.hpp	/^	typedef tmat4x4<float, highp>		highp_mat4;$/;"	t	namespace:glm
highp_mat4	mesh_visibility/glm/glm/mat4x4.hpp	/^	typedef tmat4x4<float, highp>		highp_mat4;$/;"	t	namespace:glm
highp_mat4x2	mesh_visibility/glm/glm/detail/type_mat.hpp	/^	typedef tmat4x2<float, highp>		highp_mat4x2;$/;"	t	namespace:glm
highp_mat4x2	mesh_visibility/glm/glm/mat4x2.hpp	/^	typedef tmat4x2<float, highp>		highp_mat4x2;$/;"	t	namespace:glm
highp_mat4x3	mesh_visibility/glm/glm/detail/type_mat.hpp	/^	typedef tmat4x3<float, highp>		highp_mat4x3;$/;"	t	namespace:glm
highp_mat4x3	mesh_visibility/glm/glm/mat4x3.hpp	/^	typedef tmat4x3<float, highp>		highp_mat4x3;$/;"	t	namespace:glm
highp_mat4x4	mesh_visibility/glm/glm/detail/type_mat.hpp	/^	typedef tmat4x4<float, highp>		highp_mat4x4;$/;"	t	namespace:glm
highp_mat4x4	mesh_visibility/glm/glm/mat4x4.hpp	/^	typedef tmat4x4<float, highp>		highp_mat4x4;$/;"	t	namespace:glm
highp_quat	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tquat<float, highp>		highp_quat;$/;"	t	namespace:glm
highp_u16	mesh_visibility/glm/glm/fwd.hpp	/^	typedef detail::uint16 highp_u16;$/;"	t	namespace:glm
highp_u16	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef detail::uint16 highp_u16;$/;"	t	namespace:glm
highp_u16vec1	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tvec1<u16, highp>		highp_u16vec1;$/;"	t	namespace:glm
highp_u16vec2	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tvec2<u16, highp>		highp_u16vec2;$/;"	t	namespace:glm
highp_u16vec3	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tvec3<u16, highp>		highp_u16vec3;$/;"	t	namespace:glm
highp_u16vec4	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tvec4<u16, highp>		highp_u16vec4;$/;"	t	namespace:glm
highp_u32	mesh_visibility/glm/glm/fwd.hpp	/^	typedef detail::uint32 highp_u32;$/;"	t	namespace:glm
highp_u32	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef detail::uint32 highp_u32;$/;"	t	namespace:glm
highp_u32vec1	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tvec1<u32, highp>		highp_u32vec1;$/;"	t	namespace:glm
highp_u32vec2	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tvec2<u32, highp>		highp_u32vec2;$/;"	t	namespace:glm
highp_u32vec3	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tvec3<u32, highp>		highp_u32vec3;$/;"	t	namespace:glm
highp_u32vec4	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tvec4<u32, highp>		highp_u32vec4;$/;"	t	namespace:glm
highp_u64	mesh_visibility/glm/glm/fwd.hpp	/^	typedef detail::uint64 highp_u64;$/;"	t	namespace:glm
highp_u64	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef detail::uint64 highp_u64;$/;"	t	namespace:glm
highp_u64vec1	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tvec1<u64, highp>		highp_u64vec1;$/;"	t	namespace:glm
highp_u64vec2	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tvec2<u64, highp>		highp_u64vec2;$/;"	t	namespace:glm
highp_u64vec3	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tvec3<u64, highp>		highp_u64vec3;$/;"	t	namespace:glm
highp_u64vec4	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tvec4<u64, highp>		highp_u64vec4;$/;"	t	namespace:glm
highp_u8	mesh_visibility/glm/glm/fwd.hpp	/^	typedef detail::uint8 highp_u8;$/;"	t	namespace:glm
highp_u8	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef detail::uint8 highp_u8;$/;"	t	namespace:glm
highp_u8vec1	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tvec1<u8, highp> highp_u8vec1;$/;"	t	namespace:glm
highp_u8vec2	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tvec2<u8, highp> highp_u8vec2;$/;"	t	namespace:glm
highp_u8vec3	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tvec3<u8, highp> highp_u8vec3;$/;"	t	namespace:glm
highp_u8vec4	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tvec4<u8, highp> highp_u8vec4;$/;"	t	namespace:glm
highp_uint	mesh_visibility/glm/glm/detail/type_int.hpp	/^	typedef detail::highp_uint_t			highp_uint;$/;"	t	namespace:glm
highp_uint16	mesh_visibility/glm/glm/fwd.hpp	/^	typedef detail::uint16 highp_uint16;$/;"	t	namespace:glm
highp_uint16	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef detail::uint16 highp_uint16;$/;"	t	namespace:glm
highp_uint16_t	mesh_visibility/glm/glm/fwd.hpp	/^	typedef detail::uint16 highp_uint16_t;$/;"	t	namespace:glm
highp_uint16_t	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef detail::uint16 highp_uint16_t;$/;"	t	namespace:glm
highp_uint32	mesh_visibility/glm/glm/fwd.hpp	/^	typedef detail::uint32 highp_uint32;$/;"	t	namespace:glm
highp_uint32	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef detail::uint32 highp_uint32;$/;"	t	namespace:glm
highp_uint32_t	mesh_visibility/glm/glm/fwd.hpp	/^	typedef detail::uint32 highp_uint32_t;$/;"	t	namespace:glm
highp_uint32_t	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef detail::uint32 highp_uint32_t;$/;"	t	namespace:glm
highp_uint64	mesh_visibility/glm/glm/fwd.hpp	/^	typedef detail::uint64 highp_uint64;$/;"	t	namespace:glm
highp_uint64	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef detail::uint64 highp_uint64;$/;"	t	namespace:glm
highp_uint64_t	mesh_visibility/glm/glm/fwd.hpp	/^	typedef detail::uint64 highp_uint64_t;$/;"	t	namespace:glm
highp_uint64_t	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef detail::uint64 highp_uint64_t;$/;"	t	namespace:glm
highp_uint8	mesh_visibility/glm/glm/fwd.hpp	/^	typedef detail::uint8 highp_uint8;$/;"	t	namespace:glm
highp_uint8	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef detail::uint8 highp_uint8;$/;"	t	namespace:glm
highp_uint8_t	mesh_visibility/glm/glm/fwd.hpp	/^	typedef detail::uint8 highp_uint8_t;$/;"	t	namespace:glm
highp_uint8_t	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef detail::uint8 highp_uint8_t;$/;"	t	namespace:glm
highp_uint_t	mesh_visibility/glm/glm/detail/type_int.hpp	/^	typedef unsigned int					highp_uint_t;$/;"	t	namespace:glm::detail
highp_umat2	mesh_visibility/glm/glm/gtc/matrix_integer.hpp	/^	typedef tmat2x2<uint, highp>				highp_umat2;	$/;"	t	namespace:glm
highp_umat2x2	mesh_visibility/glm/glm/gtc/matrix_integer.hpp	/^	typedef tmat2x2<uint, highp>				highp_umat2x2;$/;"	t	namespace:glm
highp_umat2x3	mesh_visibility/glm/glm/gtc/matrix_integer.hpp	/^	typedef tmat2x3<uint, highp>				highp_umat2x3;$/;"	t	namespace:glm
highp_umat2x4	mesh_visibility/glm/glm/gtc/matrix_integer.hpp	/^	typedef tmat2x4<uint, highp>				highp_umat2x4;$/;"	t	namespace:glm
highp_umat3	mesh_visibility/glm/glm/gtc/matrix_integer.hpp	/^	typedef tmat3x3<uint, highp>				highp_umat3;$/;"	t	namespace:glm
highp_umat3x2	mesh_visibility/glm/glm/gtc/matrix_integer.hpp	/^	typedef tmat3x2<uint, highp>				highp_umat3x2;$/;"	t	namespace:glm
highp_umat3x3	mesh_visibility/glm/glm/gtc/matrix_integer.hpp	/^	typedef tmat3x3<uint, highp>				highp_umat3x3;$/;"	t	namespace:glm
highp_umat3x4	mesh_visibility/glm/glm/gtc/matrix_integer.hpp	/^	typedef tmat3x4<uint, highp>				highp_umat3x4;$/;"	t	namespace:glm
highp_umat4	mesh_visibility/glm/glm/gtc/matrix_integer.hpp	/^	typedef tmat4x4<uint, highp>				highp_umat4;$/;"	t	namespace:glm
highp_umat4x2	mesh_visibility/glm/glm/gtc/matrix_integer.hpp	/^	typedef tmat4x2<uint, highp>				highp_umat4x2;$/;"	t	namespace:glm
highp_umat4x3	mesh_visibility/glm/glm/gtc/matrix_integer.hpp	/^	typedef tmat4x3<uint, highp>				highp_umat4x3;$/;"	t	namespace:glm
highp_umat4x4	mesh_visibility/glm/glm/gtc/matrix_integer.hpp	/^	typedef tmat4x4<uint, highp>				highp_umat4x4;$/;"	t	namespace:glm
highp_uvec1	mesh_visibility/glm/glm/gtc/vec1.hpp	/^	typedef highp_uvec1_t			highp_uvec1;$/;"	t	namespace:glm
highp_uvec1_t	mesh_visibility/glm/glm/detail/type_vec.hpp	/^	typedef tvec1<uint, highp>		highp_uvec1_t;$/;"	t	namespace:glm
highp_uvec2	mesh_visibility/glm/glm/detail/type_vec.hpp	/^	typedef tvec2<uint, highp>		highp_uvec2;$/;"	t	namespace:glm
highp_uvec3	mesh_visibility/glm/glm/detail/type_vec.hpp	/^	typedef tvec3<uint, highp>		highp_uvec3;$/;"	t	namespace:glm
highp_uvec4	mesh_visibility/glm/glm/detail/type_vec.hpp	/^	typedef tvec4<uint, highp>		highp_uvec4;$/;"	t	namespace:glm
highp_vec1	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tvec1<float, highp> highp_vec1;$/;"	t	namespace:glm
highp_vec1	mesh_visibility/glm/glm/gtc/vec1.hpp	/^	typedef highp_vec1_t			highp_vec1;$/;"	t	namespace:glm
highp_vec1_t	mesh_visibility/glm/glm/detail/type_vec.hpp	/^	typedef tvec1<float, highp>		highp_vec1_t;$/;"	t	namespace:glm
highp_vec2	mesh_visibility/glm/glm/detail/type_vec.hpp	/^	typedef tvec2<float, highp>		highp_vec2;$/;"	t	namespace:glm
highp_vec2	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tvec2<float, highp> highp_vec2;$/;"	t	namespace:glm
highp_vec3	mesh_visibility/glm/glm/detail/type_vec.hpp	/^	typedef tvec3<float, highp>		highp_vec3;$/;"	t	namespace:glm
highp_vec3	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tvec3<float, highp> highp_vec3;$/;"	t	namespace:glm
highp_vec4	mesh_visibility/glm/glm/detail/type_vec.hpp	/^	typedef tvec4<float, highp>		highp_vec4;$/;"	t	namespace:glm
highp_vec4	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tvec4<float, highp> highp_vec4;$/;"	t	namespace:glm
i16	mesh_visibility/glm/glm/fwd.hpp	/^	typedef detail::int16 i16;$/;"	t	namespace:glm
i16	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef detail::int16 i16;$/;"	t	namespace:glm
i16vec1	mesh_visibility/glm/glm/fwd.hpp	/^	typedef highp_i16vec1			i16vec1;$/;"	t	namespace:glm
i16vec1	mesh_visibility/glm/glm/fwd.hpp	/^	typedef lowp_i16vec1			i16vec1;$/;"	t	namespace:glm
i16vec1	mesh_visibility/glm/glm/fwd.hpp	/^	typedef mediump_i16vec1			i16vec1;$/;"	t	namespace:glm
i16vec1	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef tvec1<i16, defaultp> i16vec1;$/;"	t	namespace:glm
i16vec2	mesh_visibility/glm/glm/fwd.hpp	/^	typedef highp_i16vec2			i16vec2;$/;"	t	namespace:glm
i16vec2	mesh_visibility/glm/glm/fwd.hpp	/^	typedef lowp_i16vec2			i16vec2;$/;"	t	namespace:glm
i16vec2	mesh_visibility/glm/glm/fwd.hpp	/^	typedef mediump_i16vec2			i16vec2;$/;"	t	namespace:glm
i16vec2	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef tvec2<i16, defaultp> i16vec2;$/;"	t	namespace:glm
i16vec3	mesh_visibility/glm/glm/fwd.hpp	/^	typedef highp_i16vec3			i16vec3;$/;"	t	namespace:glm
i16vec3	mesh_visibility/glm/glm/fwd.hpp	/^	typedef lowp_i16vec3			i16vec3;$/;"	t	namespace:glm
i16vec3	mesh_visibility/glm/glm/fwd.hpp	/^	typedef mediump_i16vec3			i16vec3;$/;"	t	namespace:glm
i16vec3	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef tvec3<i16, defaultp> i16vec3;$/;"	t	namespace:glm
i16vec4	mesh_visibility/glm/glm/fwd.hpp	/^	typedef highp_i16vec4			i16vec4;$/;"	t	namespace:glm
i16vec4	mesh_visibility/glm/glm/fwd.hpp	/^	typedef lowp_i16vec4			i16vec4;$/;"	t	namespace:glm
i16vec4	mesh_visibility/glm/glm/fwd.hpp	/^	typedef mediump_i16vec4			i16vec4;$/;"	t	namespace:glm
i16vec4	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef tvec4<i16, defaultp> i16vec4;$/;"	t	namespace:glm
i32	mesh_visibility/glm/glm/fwd.hpp	/^	typedef detail::int32 i32;$/;"	t	namespace:glm
i32	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef detail::int32 i32;$/;"	t	namespace:glm
i32vec1	mesh_visibility/glm/glm/fwd.hpp	/^	typedef highp_i32vec1			i32vec1;$/;"	t	namespace:glm
i32vec1	mesh_visibility/glm/glm/fwd.hpp	/^	typedef lowp_i32vec1			i32vec1;$/;"	t	namespace:glm
i32vec1	mesh_visibility/glm/glm/fwd.hpp	/^	typedef mediump_i32vec1			i32vec1;$/;"	t	namespace:glm
i32vec1	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef tvec1<i32, defaultp> i32vec1;$/;"	t	namespace:glm
i32vec2	mesh_visibility/glm/glm/fwd.hpp	/^	typedef highp_i32vec2			i32vec2;$/;"	t	namespace:glm
i32vec2	mesh_visibility/glm/glm/fwd.hpp	/^	typedef lowp_i32vec2			i32vec2;$/;"	t	namespace:glm
i32vec2	mesh_visibility/glm/glm/fwd.hpp	/^	typedef mediump_i32vec2			i32vec2;$/;"	t	namespace:glm
i32vec2	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef tvec2<i32, defaultp> i32vec2;$/;"	t	namespace:glm
i32vec3	mesh_visibility/glm/glm/fwd.hpp	/^	typedef highp_i32vec3			i32vec3;$/;"	t	namespace:glm
i32vec3	mesh_visibility/glm/glm/fwd.hpp	/^	typedef lowp_i32vec3			i32vec3;$/;"	t	namespace:glm
i32vec3	mesh_visibility/glm/glm/fwd.hpp	/^	typedef mediump_i32vec3			i32vec3;$/;"	t	namespace:glm
i32vec3	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef tvec3<i32, defaultp> i32vec3;$/;"	t	namespace:glm
i32vec4	mesh_visibility/glm/glm/fwd.hpp	/^	typedef highp_i32vec4			i32vec4;$/;"	t	namespace:glm
i32vec4	mesh_visibility/glm/glm/fwd.hpp	/^	typedef lowp_i32vec4			i32vec4;$/;"	t	namespace:glm
i32vec4	mesh_visibility/glm/glm/fwd.hpp	/^	typedef mediump_i32vec4			i32vec4;$/;"	t	namespace:glm
i32vec4	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef tvec4<i32, defaultp> i32vec4;$/;"	t	namespace:glm
i64	mesh_visibility/glm/glm/fwd.hpp	/^	typedef detail::int64 i64;$/;"	t	namespace:glm
i64	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef detail::int64 i64;$/;"	t	namespace:glm
i64vec1	mesh_visibility/glm/glm/fwd.hpp	/^	typedef highp_i64vec1			i64vec1;$/;"	t	namespace:glm
i64vec1	mesh_visibility/glm/glm/fwd.hpp	/^	typedef lowp_i64vec1			i64vec1;$/;"	t	namespace:glm
i64vec1	mesh_visibility/glm/glm/fwd.hpp	/^	typedef mediump_i64vec1			i64vec1;$/;"	t	namespace:glm
i64vec1	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef tvec1<i64, defaultp> i64vec1;$/;"	t	namespace:glm
i64vec2	mesh_visibility/glm/glm/fwd.hpp	/^	typedef highp_i64vec2			i64vec2;$/;"	t	namespace:glm
i64vec2	mesh_visibility/glm/glm/fwd.hpp	/^	typedef lowp_i64vec2			i64vec2;$/;"	t	namespace:glm
i64vec2	mesh_visibility/glm/glm/fwd.hpp	/^	typedef mediump_i64vec2			i64vec2;$/;"	t	namespace:glm
i64vec2	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef tvec2<i64, defaultp> i64vec2;$/;"	t	namespace:glm
i64vec3	mesh_visibility/glm/glm/fwd.hpp	/^	typedef highp_i64vec3			i64vec3;$/;"	t	namespace:glm
i64vec3	mesh_visibility/glm/glm/fwd.hpp	/^	typedef lowp_i64vec3			i64vec3;$/;"	t	namespace:glm
i64vec3	mesh_visibility/glm/glm/fwd.hpp	/^	typedef mediump_i64vec3			i64vec3;$/;"	t	namespace:glm
i64vec3	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef tvec3<i64, defaultp> i64vec3;$/;"	t	namespace:glm
i64vec4	mesh_visibility/glm/glm/fwd.hpp	/^	typedef highp_i64vec4			i64vec4;$/;"	t	namespace:glm
i64vec4	mesh_visibility/glm/glm/fwd.hpp	/^	typedef lowp_i64vec4			i64vec4;$/;"	t	namespace:glm
i64vec4	mesh_visibility/glm/glm/fwd.hpp	/^	typedef mediump_i64vec4			i64vec4;$/;"	t	namespace:glm
i64vec4	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef tvec4<i64, defaultp> i64vec4;$/;"	t	namespace:glm
i8	mesh_visibility/glm/glm/fwd.hpp	/^	typedef detail::int8 i8;$/;"	t	namespace:glm
i8	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef detail::int8 i8;$/;"	t	namespace:glm
i8vec1	mesh_visibility/glm/glm/fwd.hpp	/^	typedef highp_i8vec1			i8vec1;$/;"	t	namespace:glm
i8vec1	mesh_visibility/glm/glm/fwd.hpp	/^	typedef lowp_i8vec1				i8vec1;$/;"	t	namespace:glm
i8vec1	mesh_visibility/glm/glm/fwd.hpp	/^	typedef mediump_i8vec1			i8vec1;$/;"	t	namespace:glm
i8vec1	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef tvec1<i8, defaultp> i8vec1;$/;"	t	namespace:glm
i8vec2	mesh_visibility/glm/glm/fwd.hpp	/^	typedef highp_i8vec2			i8vec2;$/;"	t	namespace:glm
i8vec2	mesh_visibility/glm/glm/fwd.hpp	/^	typedef lowp_i8vec2				i8vec2;$/;"	t	namespace:glm
i8vec2	mesh_visibility/glm/glm/fwd.hpp	/^	typedef mediump_i8vec2			i8vec2;$/;"	t	namespace:glm
i8vec2	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef tvec2<i8, defaultp> i8vec2;$/;"	t	namespace:glm
i8vec3	mesh_visibility/glm/glm/fwd.hpp	/^	typedef highp_i8vec3			i8vec3;$/;"	t	namespace:glm
i8vec3	mesh_visibility/glm/glm/fwd.hpp	/^	typedef lowp_i8vec3				i8vec3;$/;"	t	namespace:glm
i8vec3	mesh_visibility/glm/glm/fwd.hpp	/^	typedef mediump_i8vec3			i8vec3;$/;"	t	namespace:glm
i8vec3	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef tvec3<i8, defaultp> i8vec3;$/;"	t	namespace:glm
i8vec4	mesh_visibility/glm/glm/fwd.hpp	/^	typedef highp_i8vec4			i8vec4;$/;"	t	namespace:glm
i8vec4	mesh_visibility/glm/glm/fwd.hpp	/^	typedef lowp_i8vec4				i8vec4;$/;"	t	namespace:glm
i8vec4	mesh_visibility/glm/glm/fwd.hpp	/^	typedef mediump_i8vec4			i8vec4;	$/;"	t	namespace:glm
i8vec4	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef tvec4<i8, defaultp> i8vec4;$/;"	t	namespace:glm
id	mesh_visibility/glfw/glfw3native.h	/^  typedef void* id;$/;"	t
id	mesh_visibility/glm/glm/gtx/io.hpp	/^			static std::locale::id id;$/;"	m	class:glm::io::format_punct
image_blurriness_	mesh_texture_opt/mesh_opt.h	/^    unordered_map<int, double> image_blurriness_;$/;"	m	class:RGBDMeshOpt
image_buffer_	mesh_visibility/mesh_visibility.h	/^	GBuffer image_buffer_;$/;"	m	class:MeshVisibility
image_buffer_arr_	mesh_visibility/mesh_visibility.h	/^	float image_buffer_arr_[kImageHeight][kImageWidth * 3]; \/\/ rendered image buffer$/;"	m	class:MeshVisibility
image_y_bases_	mesh_visibility/mesh_visibility.h	/^	vector<int> image_y_bases_;$/;"	m	class:MeshVisibility
imat2	mesh_visibility/glm/glm/gtc/matrix_integer.hpp	/^	typedef highp_imat2								imat2;$/;"	t	namespace:glm
imat2	mesh_visibility/glm/glm/gtc/matrix_integer.hpp	/^	typedef lowp_imat2								imat2;$/;"	t	namespace:glm
imat2	mesh_visibility/glm/glm/gtc/matrix_integer.hpp	/^	typedef mediump_imat2							imat2;$/;"	t	namespace:glm
imat2x2	mesh_visibility/glm/glm/gtc/matrix_integer.hpp	/^	typedef highp_imat2x2							imat2x2;$/;"	t	namespace:glm
imat2x2	mesh_visibility/glm/glm/gtc/matrix_integer.hpp	/^	typedef lowp_imat2x2							imat2x2;$/;"	t	namespace:glm
imat2x2	mesh_visibility/glm/glm/gtc/matrix_integer.hpp	/^	typedef mediump_imat2x2							imat2x2;$/;"	t	namespace:glm
imat2x3	mesh_visibility/glm/glm/gtc/matrix_integer.hpp	/^	typedef highp_imat2x3							imat2x3;$/;"	t	namespace:glm
imat2x3	mesh_visibility/glm/glm/gtc/matrix_integer.hpp	/^	typedef lowp_imat2x3							imat2x3;$/;"	t	namespace:glm
imat2x3	mesh_visibility/glm/glm/gtc/matrix_integer.hpp	/^	typedef mediump_imat2x3							imat2x3;$/;"	t	namespace:glm
imat2x4	mesh_visibility/glm/glm/gtc/matrix_integer.hpp	/^	typedef highp_imat2x4							imat2x4;$/;"	t	namespace:glm
imat2x4	mesh_visibility/glm/glm/gtc/matrix_integer.hpp	/^	typedef lowp_imat2x4							imat2x4;$/;"	t	namespace:glm
imat2x4	mesh_visibility/glm/glm/gtc/matrix_integer.hpp	/^	typedef mediump_imat2x4							imat2x4;$/;"	t	namespace:glm
imat3	mesh_visibility/glm/glm/gtc/matrix_integer.hpp	/^	typedef highp_imat3								imat3;$/;"	t	namespace:glm
imat3	mesh_visibility/glm/glm/gtc/matrix_integer.hpp	/^	typedef lowp_imat3								imat3;$/;"	t	namespace:glm
imat3	mesh_visibility/glm/glm/gtc/matrix_integer.hpp	/^	typedef mediump_imat3							imat3;$/;"	t	namespace:glm
imat3x2	mesh_visibility/glm/glm/gtc/matrix_integer.hpp	/^	typedef highp_imat3x2							imat3x2;$/;"	t	namespace:glm
imat3x2	mesh_visibility/glm/glm/gtc/matrix_integer.hpp	/^	typedef lowp_imat3x2							imat3x2;$/;"	t	namespace:glm
imat3x2	mesh_visibility/glm/glm/gtc/matrix_integer.hpp	/^	typedef mediump_imat3x2							imat3x2;$/;"	t	namespace:glm
imat3x3	mesh_visibility/glm/glm/gtc/matrix_integer.hpp	/^	typedef highp_imat3x3							imat3x3;$/;"	t	namespace:glm
imat3x3	mesh_visibility/glm/glm/gtc/matrix_integer.hpp	/^	typedef lowp_imat3x3							imat3x3;$/;"	t	namespace:glm
imat3x3	mesh_visibility/glm/glm/gtc/matrix_integer.hpp	/^	typedef mediump_imat3x3							imat3x3;$/;"	t	namespace:glm
imat3x4	mesh_visibility/glm/glm/gtc/matrix_integer.hpp	/^	typedef highp_imat3x4							imat3x4;$/;"	t	namespace:glm
imat3x4	mesh_visibility/glm/glm/gtc/matrix_integer.hpp	/^	typedef lowp_imat3x4							imat3x4;$/;"	t	namespace:glm
imat3x4	mesh_visibility/glm/glm/gtc/matrix_integer.hpp	/^	typedef mediump_imat3x4							imat3x4;$/;"	t	namespace:glm
imat4	mesh_visibility/glm/glm/gtc/matrix_integer.hpp	/^	typedef highp_imat4								imat4;$/;"	t	namespace:glm
imat4	mesh_visibility/glm/glm/gtc/matrix_integer.hpp	/^	typedef lowp_imat4								imat4;$/;"	t	namespace:glm
imat4	mesh_visibility/glm/glm/gtc/matrix_integer.hpp	/^	typedef mediump_imat4							imat4;$/;"	t	namespace:glm
imat4x2	mesh_visibility/glm/glm/gtc/matrix_integer.hpp	/^	typedef highp_imat4x2							imat4x2;$/;"	t	namespace:glm
imat4x2	mesh_visibility/glm/glm/gtc/matrix_integer.hpp	/^	typedef lowp_imat4x2							imat4x2;$/;"	t	namespace:glm
imat4x2	mesh_visibility/glm/glm/gtc/matrix_integer.hpp	/^	typedef mediump_imat4x2							imat4x2;$/;"	t	namespace:glm
imat4x3	mesh_visibility/glm/glm/gtc/matrix_integer.hpp	/^	typedef highp_imat4x3							imat4x3;$/;"	t	namespace:glm
imat4x3	mesh_visibility/glm/glm/gtc/matrix_integer.hpp	/^	typedef lowp_imat4x3							imat4x3;$/;"	t	namespace:glm
imat4x3	mesh_visibility/glm/glm/gtc/matrix_integer.hpp	/^	typedef mediump_imat4x3							imat4x3;$/;"	t	namespace:glm
imat4x4	mesh_visibility/glm/glm/gtc/matrix_integer.hpp	/^	typedef highp_imat4x4							imat4x4;$/;"	t	namespace:glm
imat4x4	mesh_visibility/glm/glm/gtc/matrix_integer.hpp	/^	typedef lowp_imat4x4							imat4x4;$/;"	t	namespace:glm
imat4x4	mesh_visibility/glm/glm/gtc/matrix_integer.hpp	/^	typedef mediump_imat4x4							imat4x4;$/;"	t	namespace:glm
import	mesh_partition/heap/MxHeap.h	/^    double import;$/;"	m	class:MxHeapable
import	mesh_partition/myheap.h	/^    double import;  \/\/ key (sorted by this value in the heap)$/;"	m	class:MxHeapable
indices	mesh_partition/partition.h	/^        int indices[3];$/;"	m	struct:Partition::Face
indices	mesh_texture_opt/mesh_opt.h	/^        int indices[3];$/;"	m	struct:RGBDMeshOpt::Face
init	mesh_visibility/gbuffer.cpp	/^bool GBuffer::init(unsigned int WindowWidth, unsigned int WindowHeight)$/;"	f	class:GBuffer
initAll	mesh_texture_opt/mesh_opt.cpp	/^void RGBDMeshOpt::initAll()$/;"	f	class:RGBDMeshOpt
initClusters	mesh_texture_opt/mesh_opt.cpp	/^void RGBDMeshOpt::initClusters()$/;"	f	class:RGBDMeshOpt
initGLFW	mesh_visibility/main.cpp	/^bool initGLFW()$/;"	f
initInnerEdgeQuadrics	mesh_partition/partition.cpp	/^void Partition::initInnerEdgeQuadrics()$/;"	f	class:Partition
initMerging	mesh_partition/partition.cpp	/^void Partition::initMerging()$/;"	f	class:Partition
initMeshConnectivity	mesh_partition/partition.cpp	/^void Partition::initMeshConnectivity()$/;"	f	class:Partition
initMeshConnectivity	mesh_texture_opt/mesh_opt.cpp	/^void RGBDMeshOpt::initMeshConnectivity()$/;"	f	class:RGBDMeshOpt
initModelDataBuffer	mesh_visibility/mesh_visibility.cpp	/^void MeshVisibility::initModelDataBuffer()$/;"	f	class:MeshVisibility
initNew	mesh_visibility/gbuffer.cpp	/^bool GBuffer::initNew(unsigned int WindowWidth, unsigned int WindowHeight)$/;"	f	class:GBuffer
initRGBDFrames	mesh_texture_opt/mesh_opt.cpp	/^void RGBDMeshOpt::initRGBDFrames()$/;"	f	class:RGBDMeshOpt
initSimplification	mesh_partition/partition.cpp	/^void Partition::initSimplification()$/;"	f	class:Partition
initTexturePatches	mesh_texture_opt/mesh_opt.cpp	/^void RGBDMeshOpt::initTexturePatches()$/;"	f	class:RGBDMeshOpt
init_block	mesh_partition/heap/MxBlock.h	/^    void init_block(int n)$/;"	f	class:MxBlock
init_cluster_num_	mesh_partition/partition.h	/^    int init_cluster_num_, curr_cluster_num_, target_cluster_num_;$/;"	m	class:Partition
insert	mesh_partition/heap/MxHeap.cxx	/^void MxHeap::insert(MxHeapable *t, double v)$/;"	f	class:MxHeap
insert	mesh_partition/heap/MxHeap.h	/^    void insert(MxHeapable *t) { insert(t, t->heap_key()); }$/;"	f	class:MxHeap
insert	mesh_partition/myheap.h	/^    void insert(MxHeapable *t) { insert(t, t->heap_key()); }$/;"	f	class:MxHeap
insert	mesh_partition/myheap.h	/^    void insert(MxHeapable *t, double v)$/;"	f	class:MxHeap
int1	mesh_visibility/glm/glm/gtx/compatibility.hpp	/^	typedef int							int1;			\/\/!< \\brief integer vector with 1 component. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
int16	mesh_visibility/glm/glm/detail/type_int.hpp	/^		typedef std::int16_t				int16;$/;"	t	namespace:glm::detail
int16	mesh_visibility/glm/glm/detail/type_int.hpp	/^	typedef detail::int16					int16;$/;"	t	namespace:glm
int16	mesh_visibility/glm/glm/fwd.hpp	/^	typedef detail::int16 int16;$/;"	t	namespace:glm
int16	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef detail::int16 int16;$/;"	t	namespace:glm
int1x1	mesh_visibility/glm/glm/gtx/compatibility.hpp	/^	typedef int							int1x1;			\/\/!< \\brief integer matrix with 1 component. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
int2	mesh_visibility/glm/glm/gtx/compatibility.hpp	/^	typedef tvec2<int, highp>			int2;			\/\/!< \\brief integer vector with 2 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
int2x2	mesh_visibility/glm/glm/gtx/compatibility.hpp	/^	typedef tmat2x2<int, highp>		int2x2;			\/\/!< \\brief integer matrix with 2 x 2 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
int2x3	mesh_visibility/glm/glm/gtx/compatibility.hpp	/^	typedef tmat2x3<int, highp>		int2x3;			\/\/!< \\brief integer matrix with 2 x 3 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
int2x4	mesh_visibility/glm/glm/gtx/compatibility.hpp	/^	typedef tmat2x4<int, highp>		int2x4;			\/\/!< \\brief integer matrix with 2 x 4 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
int3	mesh_visibility/glm/glm/gtx/compatibility.hpp	/^	typedef tvec3<int, highp>			int3;			\/\/!< \\brief integer vector with 3 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
int32	mesh_visibility/glm/glm/detail/type_int.hpp	/^		typedef std::int32_t				int32;$/;"	t	namespace:glm::detail
int32	mesh_visibility/glm/glm/detail/type_int.hpp	/^	typedef detail::int32					int32;$/;"	t	namespace:glm
int32	mesh_visibility/glm/glm/fwd.hpp	/^	typedef detail::int32 int32;$/;"	t	namespace:glm
int32	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef detail::int32 int32;$/;"	t	namespace:glm
int3x2	mesh_visibility/glm/glm/gtx/compatibility.hpp	/^	typedef tmat3x2<int, highp>		int3x2;			\/\/!< \\brief integer matrix with 3 x 2 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
int3x3	mesh_visibility/glm/glm/gtx/compatibility.hpp	/^	typedef tmat3x3<int, highp>		int3x3;			\/\/!< \\brief integer matrix with 3 x 3 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
int3x4	mesh_visibility/glm/glm/gtx/compatibility.hpp	/^	typedef tmat3x4<int, highp>		int3x4;			\/\/!< \\brief integer matrix with 3 x 4 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
int4	mesh_visibility/glm/glm/gtx/compatibility.hpp	/^	typedef tvec4<int, highp>			int4;			\/\/!< \\brief integer vector with 4 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
int4x2	mesh_visibility/glm/glm/gtx/compatibility.hpp	/^	typedef tmat4x2<int, highp>		int4x2;			\/\/!< \\brief integer matrix with 4 x 2 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
int4x3	mesh_visibility/glm/glm/gtx/compatibility.hpp	/^	typedef tmat4x3<int, highp>		int4x3;			\/\/!< \\brief integer matrix with 4 x 3 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
int4x4	mesh_visibility/glm/glm/gtx/compatibility.hpp	/^	typedef tmat4x4<int, highp>		int4x4;			\/\/!< \\brief integer matrix with 4 x 4 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
int64	mesh_visibility/glm/glm/detail/type_int.hpp	/^		typedef std::int64_t				int64;$/;"	t	namespace:glm::detail
int64	mesh_visibility/glm/glm/detail/type_int.hpp	/^	typedef detail::int64					int64;$/;"	t	namespace:glm
int64	mesh_visibility/glm/glm/fwd.hpp	/^	typedef detail::int64 int64;$/;"	t	namespace:glm
int64	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef detail::int64 int64;$/;"	t	namespace:glm
int8	mesh_visibility/glm/glm/detail/type_int.hpp	/^		typedef std::int8_t					int8;$/;"	t	namespace:glm::detail
int8	mesh_visibility/glm/glm/detail/type_int.hpp	/^	typedef detail::int8					int8;$/;"	t	namespace:glm
int8	mesh_visibility/glm/glm/fwd.hpp	/^	typedef detail::int8 int8;$/;"	t	namespace:glm
int8	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef detail::int8 int8;$/;"	t	namespace:glm
int_t	mesh_visibility/glm/glm/detail/type_int.hpp	/^	typedef highp_int					int_t;$/;"	t	namespace:glm
int_t	mesh_visibility/glm/glm/detail/type_int.hpp	/^	typedef lowp_int					int_t;$/;"	t	namespace:glm
int_t	mesh_visibility/glm/glm/detail/type_int.hpp	/^	typedef mediump_int					int_t;$/;"	t	namespace:glm
intersection	mesh_visibility/glm/glm/detail/dummy.cpp	/^struct intersection$/;"	s	file:
intrinsic	mesh_texture_opt/mesh_opt.h	/^        Matrix4d intrinsic;$/;"	m	struct:RGBDMeshOpt::CalibrationParams
intrinsic_inv	mesh_texture_opt/mesh_opt.h	/^        Matrix4d intrinsic_inv;$/;"	m	struct:RGBDMeshOpt::CalibrationParams
inv_R	mesh_texture_opt/mesh_opt.h	/^        Matrix3d R, inv_R, opt_R, opt_inv_R;$/;"	m	struct:RGBDMeshOpt::Frame
inv_T	mesh_texture_opt/mesh_opt.h	/^        Matrix4d T, inv_T, opt_T, opt_inv_T, lastT;  \/\/ camera pose parameters$/;"	m	struct:RGBDMeshOpt::Frame
inv_t	mesh_texture_opt/mesh_opt.h	/^        Vector3d t, opt_t, inv_t, opt_inv_t;$/;"	m	struct:RGBDMeshOpt::Frame
io	mesh_visibility/glm/glm/gtx/io.hpp	/^	namespace io$/;"	n	namespace:glm
is2DPointOnImageBorder	mesh_texture_opt/mesh_opt.cpp	/^bool RGBDMeshOpt::is2DPointOnImageBorder(Vector2d& pt2, CalibrationParams& calib)$/;"	f	class:RGBDMeshOpt
isCameraPointVisibleInFrame	mesh_texture_opt/mesh_opt.cpp	/^bool RGBDMeshOpt::isCameraPointVisibleInFrame(const Vector3d& pt3, int frame_idx, Vector2d& pt2_color)$/;"	f	class:RGBDMeshOpt
isClusterValid	mesh_partition/partition.h	/^    bool isClusterValid(int cidx) { return !clusters_[cidx].faces.empty(); }$/;"	f	class:Partition
isDepthValid	mesh_texture_opt/mesh_opt.cpp	/^bool RGBDMeshOpt::isDepthValid(double depth)$/;"	f	class:RGBDMeshOpt
isPixelOnImageBorder	mesh_texture_opt/mesh_opt.cpp	/^bool RGBDMeshOpt::isPixelOnImageBorder(Vector2i& pixel, CalibrationParams& calib)$/;"	f	class:RGBDMeshOpt
isTwoPosesClose	mesh_texture_opt/mesh_opt.cpp	/^bool RGBDMeshOpt::isTwoPosesClose(const Matrix4d& T1, const Matrix4d& T2)$/;"	f	class:RGBDMeshOpt
isValid	mesh_texture_opt/mesh_opt.h	/^        bool isValid() { return fx > 0 && fy > 0 && cx > 0 && cy > 0 && width > 0 && height > 0; }$/;"	f	struct:RGBDMeshOpt::CalibrationParams
is_in_heap	mesh_partition/heap/MxHeap.h	/^    inline bool is_in_heap() { return token != -47; }$/;"	f	class:MxHeapable
is_in_heap	mesh_partition/myheap.h	/^    inline bool is_in_heap() { return token != -47; }$/;"	f	class:MxHeapable
is_leaf	mesh_texture_opt/mesh_opt.h	/^        bool is_leaf;                   \/\/ leaf node flag$/;"	m	struct:RGBDMeshOpt::TreeNode
is_optimized	mesh_texture_opt/mesh_opt.h	/^        bool is_optimized;                       \/\/ to be optimized in plane opt$/;"	m	struct:RGBDMeshOpt::Cluster
is_optimized	mesh_texture_opt/mesh_opt.h	/^        bool is_optimized;$/;"	m	struct:RGBDMeshOpt::Frame
is_valid	mesh_partition/partition.h	/^        bool is_valid;    \/\/ false if this face is removed.$/;"	m	struct:Partition::Face
is_valid	mesh_partition/partition.h	/^        bool is_valid;  \/\/ false if it is removed (all its adjacent faces are removed)$/;"	m	struct:Partition::Vertex
is_valid	mesh_texture_opt/mesh_opt.h	/^        bool is_valid;                           \/\/ is valid for projecting its faces onto images$/;"	m	struct:RGBDMeshOpt::Cluster
is_valid	mesh_texture_opt/mesh_opt.h	/^        bool is_valid;$/;"	m	struct:RGBDMeshOpt::Texel
is_vector	mesh_visibility/glm/glm/detail/type_gentype.hpp	/^	bool genType<VALTYPE, TYPE>::is_vector()$/;"	f	class:glm::detail::genType
is_visible	mesh_texture_opt/mesh_opt.h	/^        bool is_visible;                         \/\/ at least one of its faces is visible to a frame$/;"	m	struct:RGBDMeshOpt::Cluster
is_visible	mesh_texture_opt/mesh_opt.h	/^        bool is_visible;$/;"	m	struct:RGBDMeshOpt::Vertex
is_visible	mesh_texture_opt/mesh_opt.h	/^        bool is_visited, is_visible;$/;"	m	struct:RGBDMeshOpt::Face
is_visited	mesh_partition/partition.h	/^        bool is_visited;           \/\/ used in Breath-first search to remove small floating clusters$/;"	m	struct:Partition::Cluster
is_visited	mesh_partition/partition.h	/^        bool is_visited;  \/\/ used in Breath-first search to get connected components in clusters$/;"	m	struct:Partition::Face
is_visited	mesh_texture_opt/mesh_opt.h	/^        bool is_visited, is_visible;$/;"	m	struct:RGBDMeshOpt::Face
is_visited	mesh_texture_opt/mesh_opt.h	/^        bool is_visited;                     \/\/ visited or not during expanding visible vertices to neighbors by BFS$/;"	m	struct:RGBDMeshOpt::Vertex
isfinite	mesh_visibility/glm/glm/gtx/compatibility.hpp	58;"	d
isinf	mesh_visibility/glm/glm/detail/_fixes.hpp	52;"	d
isnan	mesh_visibility/glm/glm/detail/_fixes.hpp	47;"	d
item	mesh_partition/heap/MxHeap.h	/^    MxHeapable *item(uint i) { return (*this)[i]; }$/;"	f	class:MxHeap
item	mesh_partition/heap/MxHeap.h	/^    const MxHeapable *item(uint i) const { return (*this)[i]; }$/;"	f	class:MxHeap
item	mesh_partition/myheap.h	/^    MxHeapable *item(unsigned int i) { return data[i]; }$/;"	f	class:MxHeap
item	mesh_partition/myheap.h	/^    const MxHeapable *item(unsigned int i) const { return data[i]; }$/;"	f	class:MxHeap
iterator	mesh_partition/heap/MxBlock.h	/^    typedef value_type *iterator;$/;"	t	class:MxBlock
ivec1	mesh_visibility/glm/glm/gtc/vec1.hpp	/^	typedef highp_ivec1			ivec1;$/;"	t	namespace:glm
ivec1	mesh_visibility/glm/glm/gtc/vec1.hpp	/^	typedef lowp_ivec1			ivec1;$/;"	t	namespace:glm
ivec1	mesh_visibility/glm/glm/gtc/vec1.hpp	/^	typedef mediump_ivec1		ivec1;$/;"	t	namespace:glm
ivec2	mesh_visibility/glm/glm/detail/type_vec.hpp	/^	typedef highp_ivec2			ivec2;$/;"	t	namespace:glm
ivec2	mesh_visibility/glm/glm/detail/type_vec.hpp	/^	typedef lowp_ivec2			ivec2;$/;"	t	namespace:glm
ivec2	mesh_visibility/glm/glm/detail/type_vec.hpp	/^	typedef mediump_ivec2		ivec2;$/;"	t	namespace:glm
ivec3	mesh_visibility/glm/glm/detail/type_vec.hpp	/^	typedef highp_ivec3			ivec3;$/;"	t	namespace:glm
ivec3	mesh_visibility/glm/glm/detail/type_vec.hpp	/^	typedef lowp_ivec3			ivec3;$/;"	t	namespace:glm
ivec3	mesh_visibility/glm/glm/detail/type_vec.hpp	/^	typedef mediump_ivec3		ivec3;$/;"	t	namespace:glm
ivec4	mesh_visibility/glm/glm/detail/type_vec.hpp	/^	typedef highp_ivec4			ivec4;$/;"	t	namespace:glm
ivec4	mesh_visibility/glm/glm/detail/type_vec.hpp	/^	typedef lowp_ivec4			ivec4;$/;"	t	namespace:glm
ivec4	mesh_visibility/glm/glm/detail/type_vec.hpp	/^	typedef mediump_ivec4		ivec4;$/;"	t	namespace:glm
jrow	mesh_texture_opt/mesh_opt.h	/^        vector<VectorXd> jrow;                    \/\/ Jacobian row, used in pose optimization$/;"	m	struct:RGBDMeshOpt::TexturePatch
kDepthResidue	mesh_texture_opt/mesh_opt.h	/^    const double kDepthResidue = 0.05;$/;"	m	class:RGBDMeshOpt
kDigitNumInFrameName	mesh_visibility/mesh_visibility.h	/^const unsigned int kDigitNumInFrameName = 6; \/\/ used to create valid output filename$/;"	v
kFaceCoefficient	mesh_partition/partition.h	/^    const double kFaceCoefficient = 1.0, kPointCoefficient = 1.0;$/;"	m	class:Partition
kFar	mesh_visibility/mesh_visibility.h	/^const float kFar = 10.0f;$/;"	v
kImageHeight	mesh_visibility/mesh_visibility.h	/^const unsigned int kImageHeight = 480;$/;"	v
kImageWidth	mesh_visibility/mesh_visibility.h	/^const unsigned int kImageWidth = 640;$/;"	v
kLargestDepth	mesh_texture_opt/mesh_opt.h	/^    const double kLargestDepth = 6.0;$/;"	m	class:RGBDMeshOpt
kNear	mesh_visibility/mesh_visibility.h	/^const float kNear = 0.1f;$/;"	v
kPI	mesh_partition/partition.cpp	/^const double kPI = 3.1415926;$/;"	v
kPI	mesh_texture_opt/mesh_opt.h	/^    const double kPI = 3.1415926;$/;"	m	class:RGBDMeshOpt
kPixel4NeighDirs	mesh_texture_opt/mesh_opt.h	/^    const int kPixel4NeighDirs[4][2] = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};$/;"	m	class:RGBDMeshOpt
kPixel8NeighDirs	mesh_texture_opt/mesh_opt.h	/^    const int kPixel8NeighDirs[8][2] = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}, {-1, -1}, {1, -1}, {-1, 1}, {1, 1}};$/;"	m	class:RGBDMeshOpt
kPointCoefficient	mesh_partition/partition.h	/^    const double kFaceCoefficient = 1.0, kPointCoefficient = 1.0;$/;"	m	class:Partition
kScharrKernelX	mesh_texture_opt/mesh_opt.h	/^    const double kScharrKernelX[3][3] = {$/;"	m	class:RGBDMeshOpt
kScharrKernelY	mesh_texture_opt/mesh_opt.h	/^    const double kScharrKernelY[3][3] = {$/;"	m	class:RGBDMeshOpt
kSmallestDepth	mesh_texture_opt/mesh_opt.h	/^    const double kSmallestDepth = 0.5;  \/\/ in meter$/;"	m	class:RGBDMeshOpt
lambda1_	mesh_texture_opt/mesh_opt.h	/^    double lambda1_;$/;"	m	class:RGBDMeshOpt
last	mesh_partition/heap/MxDynBlock.h	/^    T& last() { return (*this)[last_id()]; }$/;"	f	class:MxDynBlock
last	mesh_partition/heap/MxDynBlock.h	/^    const T& last() const { return (*this)[last_id()]; }$/;"	f	class:MxDynBlock
lastT	mesh_texture_opt/mesh_opt.h	/^        Matrix4d T, inv_T, opt_T, opt_inv_T, lastT;  \/\/ camera pose parameters$/;"	m	struct:RGBDMeshOpt::Frame
last_clusters_in_swap_	mesh_partition/partition.h	/^    unordered_set<int> clusters_in_swap_, last_clusters_in_swap_;$/;"	m	class:Partition
last_color_energy_	mesh_texture_opt/mesh_opt.h	/^    double last_global_energy_, curr_global_energy_, last_color_energy_;$/;"	m	class:RGBDMeshOpt
last_global_energy_	mesh_texture_opt/mesh_opt.h	/^    double last_global_energy_, curr_global_energy_, last_color_energy_;$/;"	m	class:RGBDMeshOpt
last_id	mesh_partition/heap/MxDynBlock.h	/^    int last_id() const { return fill - 1; }$/;"	f	class:MxDynBlock
last_normal	mesh_texture_opt/mesh_opt.h	/^        Vector3d normal, center, opt_normal, opt_center, last_normal;$/;"	m	struct:RGBDMeshOpt::Cluster
last_w	mesh_texture_opt/mesh_opt.h	/^        double w, opt_w, last_w;$/;"	m	struct:RGBDMeshOpt::Cluster
left	mesh_partition/heap/MxHeap.h	/^    unsigned int left(unsigned int i) { return 2 * i + 1; }$/;"	f	class:MxHeap
left	mesh_partition/myheap.h	/^    unsigned int left(unsigned int i) { return 2 * i + 1; }$/;"	f	class:MxHeap
left	mesh_texture_opt/mesh_opt.h	/^        std::unique_ptr<TreeNode> left, right;$/;"	m	struct:RGBDMeshOpt::TreeNode
length	mesh_partition/heap/MxBlock.h	/^    int length() const { return N; }$/;"	f	class:MxBlock
length	mesh_partition/heap/MxDynBlock.h	/^    int length() const { return fill; }$/;"	f	class:MxDynBlock
length	mesh_partition/myheap.h	/^    unsigned int length() const {return static_cast<unsigned int>(data.size()); }$/;"	f	class:MxHeap
length_t	mesh_visibility/glm/glm/detail/setup.hpp	/^		typedef size_t length_t;$/;"	t	namespace:glm
length_type	mesh_visibility/glm/glm/detail/type_mat2x2.hpp	/^			typedef length_t length_type;$/;"	t	struct:glm::tmat2x2
length_type	mesh_visibility/glm/glm/detail/type_mat2x3.hpp	/^			typedef length_t length_type;$/;"	t	struct:glm::tmat2x3
length_type	mesh_visibility/glm/glm/detail/type_mat2x4.hpp	/^			typedef length_t length_type;$/;"	t	struct:glm::tmat2x4
length_type	mesh_visibility/glm/glm/detail/type_mat3x2.hpp	/^			typedef length_t length_type;$/;"	t	struct:glm::tmat3x2
length_type	mesh_visibility/glm/glm/detail/type_mat3x3.hpp	/^			typedef length_t length_type;$/;"	t	struct:glm::tmat3x3
length_type	mesh_visibility/glm/glm/detail/type_mat3x4.hpp	/^			typedef length_t length_type;$/;"	t	struct:glm::tmat3x4
length_type	mesh_visibility/glm/glm/detail/type_mat4x2.hpp	/^			typedef length_t length_type;$/;"	t	struct:glm::tmat4x2
length_type	mesh_visibility/glm/glm/detail/type_mat4x3.hpp	/^			typedef length_t length_type;$/;"	t	struct:glm::tmat4x3
length_type	mesh_visibility/glm/glm/detail/type_mat4x4.hpp	/^			typedef length_t length_type;$/;"	t	struct:glm::tmat4x4
length_type	mesh_visibility/glm/glm/detail/type_vec1.hpp	/^			typedef length_t length_type;$/;"	t	struct:glm::tvec1
length_type	mesh_visibility/glm/glm/gtc/quaternion.hpp	/^			typedef length_t length_type;$/;"	t	struct:glm::tquat
length_type	mesh_visibility/glm/glm/gtx/dual_quaternion.hpp	/^			typedef length_t length_type;$/;"	t	struct:glm::tdualquat
lerp	mesh_visibility/glm/glm/gtx/compatibility.hpp	/^	template <typename T, precision P> GLM_FUNC_QUALIFIER tvec2<T, P> lerp(const tvec2<T, P>& x, const tvec2<T, P>& y, T a){return mix(x, y, a);}							\/\/!< \\brief Returns x * (1.0 - a) + y * a, i.e., the linear blend of x and y using the floating-point value a. The value for a is not restricted to the range [0, 1]. (From GLM_GTX_compatibility)$/;"	f	namespace:glm
lerp	mesh_visibility/glm/glm/gtx/compatibility.hpp	/^	template <typename T, precision P> GLM_FUNC_QUALIFIER tvec2<T, P> lerp(const tvec2<T, P>& x, const tvec2<T, P>& y, const tvec2<T, P>& a){return mix(x, y, a);}	\/\/!< \\brief Returns the component-wise result of x * (1.0 - a) + y * a, i.e., the linear blend of x and y using vector a. The value for a is not restricted to the range [0, 1]. (From GLM_GTX_compatibility)$/;"	f	namespace:glm
lerp	mesh_visibility/glm/glm/gtx/compatibility.hpp	/^	template <typename T, precision P> GLM_FUNC_QUALIFIER tvec3<T, P> lerp(const tvec3<T, P>& x, const tvec3<T, P>& y, T a){return mix(x, y, a);}							\/\/!< \\brief Returns x * (1.0 - a) + y * a, i.e., the linear blend of x and y using the floating-point value a. The value for a is not restricted to the range [0, 1]. (From GLM_GTX_compatibility)$/;"	f	namespace:glm
lerp	mesh_visibility/glm/glm/gtx/compatibility.hpp	/^	template <typename T, precision P> GLM_FUNC_QUALIFIER tvec3<T, P> lerp(const tvec3<T, P>& x, const tvec3<T, P>& y, const tvec3<T, P>& a){return mix(x, y, a);}	\/\/!< \\brief Returns the component-wise result of x * (1.0 - a) + y * a, i.e., the linear blend of x and y using vector a. The value for a is not restricted to the range [0, 1]. (From GLM_GTX_compatibility)$/;"	f	namespace:glm
lerp	mesh_visibility/glm/glm/gtx/compatibility.hpp	/^	template <typename T, precision P> GLM_FUNC_QUALIFIER tvec4<T, P> lerp(const tvec4<T, P>& x, const tvec4<T, P>& y, T a){return mix(x, y, a);}							\/\/!< \\brief Returns x * (1.0 - a) + y * a, i.e., the linear blend of x and y using the floating-point value a. The value for a is not restricted to the range [0, 1]. (From GLM_GTX_compatibility)$/;"	f	namespace:glm
lerp	mesh_visibility/glm/glm/gtx/compatibility.hpp	/^	template <typename T, precision P> GLM_FUNC_QUALIFIER tvec4<T, P> lerp(const tvec4<T, P>& x, const tvec4<T, P>& y, const tvec4<T, P>& a){return mix(x, y, a);}	\/\/!< \\brief Returns the component-wise result of x * (1.0 - a) + y * a, i.e., the linear blend of x and y using vector a. The value for a is not restricted to the range [0, 1]. (From GLM_GTX_compatibility)$/;"	f	namespace:glm
lerp	mesh_visibility/glm/glm/gtx/compatibility.hpp	/^	template <typename T> GLM_FUNC_QUALIFIER T lerp(T x, T y, T a){return mix(x, y, a);}																					\/\/!< \\brief Returns x * (1.0 - a) + y * a, i.e., the linear blend of x and y using the floating-point value a. The value for a is not restricted to the range [0, 1]. (From GLM_GTX_compatibility)$/;"	f	namespace:glm
light	mesh_visibility/glm/glm/detail/dummy.cpp	/^struct light$/;"	s	file:
line	mesh_partition/heap/mixmsg.h	/^    int line;$/;"	m	class:MxMsgInfo
linearAttenuation	mesh_visibility/glm/glm/detail/dummy.cpp	/^	float linearAttenuation; \/\/ K1$/;"	m	struct:light	file:
locale_	mesh_visibility/glm/glm/gtx/io.hpp	/^			locale_type     locale_;$/;"	m	class:glm::io::basic_state_saver
locale_type	mesh_visibility/glm/glm/gtx/io.hpp	/^			typedef ::std::locale const            locale_type;$/;"	t	class:glm::io::basic_state_saver::std
log2	mesh_visibility/glm/glm/detail/_fixes.hpp	57;"	d
lowp	mesh_visibility/glm/glm/detail/precision.hpp	/^		lowp,$/;"	e	enum:glm::precision
lowp_bvec1	mesh_visibility/glm/glm/gtc/vec1.hpp	/^	typedef lowp_bvec1_t			lowp_bvec1;$/;"	t	namespace:glm
lowp_bvec1_t	mesh_visibility/glm/glm/detail/type_vec.hpp	/^	typedef tvec1<bool, lowp>		lowp_bvec1_t;$/;"	t	namespace:glm
lowp_bvec2	mesh_visibility/glm/glm/detail/type_vec.hpp	/^	typedef tvec2<bool, lowp>		lowp_bvec2;$/;"	t	namespace:glm
lowp_bvec3	mesh_visibility/glm/glm/detail/type_vec.hpp	/^	typedef tvec3<bool, lowp>		lowp_bvec3;$/;"	t	namespace:glm
lowp_bvec4	mesh_visibility/glm/glm/detail/type_vec.hpp	/^	typedef tvec4<bool, lowp>		lowp_bvec4;$/;"	t	namespace:glm
lowp_ddualquat	mesh_visibility/glm/glm/gtx/dual_quaternion.hpp	/^	typedef tdualquat<double, lowp>		lowp_ddualquat;$/;"	t	namespace:glm
lowp_dmat2	mesh_visibility/glm/glm/detail/type_mat.hpp	/^	typedef tmat2x2<double, lowp>		lowp_dmat2;$/;"	t	namespace:glm
lowp_dmat2x2	mesh_visibility/glm/glm/detail/type_mat.hpp	/^	typedef tmat2x2<double, lowp>		lowp_dmat2x2;$/;"	t	namespace:glm
lowp_dmat2x3	mesh_visibility/glm/glm/detail/type_mat.hpp	/^	typedef tmat2x3<double, lowp>		lowp_dmat2x3;$/;"	t	namespace:glm
lowp_dmat2x4	mesh_visibility/glm/glm/detail/type_mat.hpp	/^	typedef tmat2x4<double, lowp>		lowp_dmat2x4;$/;"	t	namespace:glm
lowp_dmat3	mesh_visibility/glm/glm/detail/type_mat.hpp	/^	typedef tmat3x3<float, lowp>		lowp_dmat3;$/;"	t	namespace:glm
lowp_dmat3x2	mesh_visibility/glm/glm/detail/type_mat.hpp	/^	typedef tmat3x2<double, lowp>		lowp_dmat3x2;$/;"	t	namespace:glm
lowp_dmat3x3	mesh_visibility/glm/glm/detail/type_mat.hpp	/^	typedef tmat3x3<double, lowp>		lowp_dmat3x3;$/;"	t	namespace:glm
lowp_dmat3x4	mesh_visibility/glm/glm/detail/type_mat.hpp	/^	typedef tmat3x4<double, lowp>		lowp_dmat3x4;$/;"	t	namespace:glm
lowp_dmat4	mesh_visibility/glm/glm/detail/type_mat.hpp	/^	typedef tmat4x4<double, lowp>		lowp_dmat4;$/;"	t	namespace:glm
lowp_dmat4x2	mesh_visibility/glm/glm/detail/type_mat.hpp	/^	typedef tmat4x2<double, lowp>		lowp_dmat4x2;$/;"	t	namespace:glm
lowp_dmat4x3	mesh_visibility/glm/glm/detail/type_mat.hpp	/^	typedef tmat4x3<double, lowp>		lowp_dmat4x3;$/;"	t	namespace:glm
lowp_dmat4x4	mesh_visibility/glm/glm/detail/type_mat.hpp	/^	typedef tmat4x4<double, lowp>		lowp_dmat4x4;$/;"	t	namespace:glm
lowp_dquat	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tquat<double, lowp>		lowp_dquat;$/;"	t	namespace:glm
lowp_dualquat	mesh_visibility/glm/glm/gtx/dual_quaternion.hpp	/^	typedef tdualquat<float, lowp>		lowp_dualquat;$/;"	t	namespace:glm
lowp_dvec1	mesh_visibility/glm/glm/gtc/vec1.hpp	/^	typedef lowp_dvec1_t			lowp_dvec1;$/;"	t	namespace:glm
lowp_dvec1_t	mesh_visibility/glm/glm/detail/type_vec.hpp	/^	typedef tvec1<double, lowp>		lowp_dvec1_t;$/;"	t	namespace:glm
lowp_dvec2	mesh_visibility/glm/glm/detail/type_vec.hpp	/^	typedef tvec2<double, lowp>		lowp_dvec2;$/;"	t	namespace:glm
lowp_dvec3	mesh_visibility/glm/glm/detail/type_vec.hpp	/^	typedef tvec3<double, lowp>		lowp_dvec3;$/;"	t	namespace:glm
lowp_dvec4	mesh_visibility/glm/glm/detail/type_vec.hpp	/^	typedef tvec4<double, lowp>		lowp_dvec4;$/;"	t	namespace:glm
lowp_f32	mesh_visibility/glm/glm/fwd.hpp	/^	typedef float32 lowp_f32;$/;"	t	namespace:glm
lowp_f32mat2	mesh_visibility/glm/glm/fwd.hpp	/^	typedef lowp_f32mat2x2 lowp_f32mat2;$/;"	t	namespace:glm
lowp_f32mat2x2	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tmat2x2<f32, lowp> lowp_f32mat2x2;$/;"	t	namespace:glm
lowp_f32mat2x3	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tmat2x3<f32, lowp> lowp_f32mat2x3;$/;"	t	namespace:glm
lowp_f32mat2x4	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tmat2x4<f32, lowp> lowp_f32mat2x4;$/;"	t	namespace:glm
lowp_f32mat3	mesh_visibility/glm/glm/fwd.hpp	/^	typedef lowp_f32mat3x3 lowp_f32mat3;$/;"	t	namespace:glm
lowp_f32mat3x2	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tmat3x2<f32, lowp> lowp_f32mat3x2;$/;"	t	namespace:glm
lowp_f32mat3x3	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tmat3x3<f32, lowp> lowp_f32mat3x3;$/;"	t	namespace:glm
lowp_f32mat3x4	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tmat3x4<f32, lowp> lowp_f32mat3x4;$/;"	t	namespace:glm
lowp_f32mat4	mesh_visibility/glm/glm/fwd.hpp	/^	typedef lowp_f32mat4x4 lowp_f32mat4;$/;"	t	namespace:glm
lowp_f32mat4x2	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tmat4x2<f32, lowp> lowp_f32mat4x2;$/;"	t	namespace:glm
lowp_f32mat4x3	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tmat4x3<f32, lowp> lowp_f32mat4x3;$/;"	t	namespace:glm
lowp_f32mat4x4	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tmat4x4<f32, lowp> lowp_f32mat4x4;$/;"	t	namespace:glm
lowp_f32quat	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tquat<f32, lowp> lowp_f32quat;$/;"	t	namespace:glm
lowp_f32vec1	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tvec1<f32, lowp> lowp_f32vec1;$/;"	t	namespace:glm
lowp_f32vec2	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tvec2<f32, lowp> lowp_f32vec2;$/;"	t	namespace:glm
lowp_f32vec3	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tvec3<f32, lowp> lowp_f32vec3;$/;"	t	namespace:glm
lowp_f32vec4	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tvec4<f32, lowp> lowp_f32vec4;$/;"	t	namespace:glm
lowp_f64	mesh_visibility/glm/glm/fwd.hpp	/^	typedef float64 lowp_f64;$/;"	t	namespace:glm
lowp_f64mat2	mesh_visibility/glm/glm/fwd.hpp	/^	typedef lowp_f64mat2x2 lowp_f64mat2;$/;"	t	namespace:glm
lowp_f64mat2x2	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tmat2x2<f64, lowp> lowp_f64mat2x2;$/;"	t	namespace:glm
lowp_f64mat2x3	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tmat2x3<f64, lowp> lowp_f64mat2x3;$/;"	t	namespace:glm
lowp_f64mat2x4	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tmat2x4<f64, lowp> lowp_f64mat2x4;$/;"	t	namespace:glm
lowp_f64mat3	mesh_visibility/glm/glm/fwd.hpp	/^	typedef lowp_f64mat3x3 lowp_f64mat3;$/;"	t	namespace:glm
lowp_f64mat3x2	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tmat3x2<f64, lowp> lowp_f64mat3x2;$/;"	t	namespace:glm
lowp_f64mat3x3	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tmat3x3<f64, lowp> lowp_f64mat3x3;$/;"	t	namespace:glm
lowp_f64mat3x4	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tmat3x4<f64, lowp> lowp_f64mat3x4;$/;"	t	namespace:glm
lowp_f64mat4	mesh_visibility/glm/glm/fwd.hpp	/^	typedef lowp_f64mat4x4 lowp_f64mat4;$/;"	t	namespace:glm
lowp_f64mat4x2	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tmat4x2<f64, lowp> lowp_f64mat4x2;$/;"	t	namespace:glm
lowp_f64mat4x3	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tmat4x3<f64, lowp> lowp_f64mat4x3;$/;"	t	namespace:glm
lowp_f64mat4x4	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tmat4x4<f64, lowp> lowp_f64mat4x4;$/;"	t	namespace:glm
lowp_f64quat	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tquat<f64, lowp> lowp_f64quat;$/;"	t	namespace:glm
lowp_f64vec1	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tvec1<f64, lowp> lowp_f64vec1;$/;"	t	namespace:glm
lowp_f64vec2	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tvec2<f64, lowp> lowp_f64vec2;$/;"	t	namespace:glm
lowp_f64vec3	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tvec3<f64, lowp> lowp_f64vec3;$/;"	t	namespace:glm
lowp_f64vec4	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tvec4<f64, lowp> lowp_f64vec4;$/;"	t	namespace:glm
lowp_fdualquat	mesh_visibility/glm/glm/gtx/dual_quaternion.hpp	/^	typedef tdualquat<float, lowp>		lowp_fdualquat;$/;"	t	namespace:glm
lowp_float	mesh_visibility/glm/glm/detail/type_float.hpp	/^	typedef lowp_float_t		lowp_float;$/;"	t	namespace:glm
lowp_float32	mesh_visibility/glm/glm/fwd.hpp	/^	typedef detail::float32 lowp_float32;$/;"	t	namespace:glm
lowp_float32_t	mesh_visibility/glm/glm/fwd.hpp	/^	typedef detail::float32 lowp_float32_t;$/;"	t	namespace:glm
lowp_float64	mesh_visibility/glm/glm/fwd.hpp	/^	typedef detail::float64 lowp_float64;$/;"	t	namespace:glm
lowp_float64_t	mesh_visibility/glm/glm/fwd.hpp	/^	typedef detail::float64 lowp_float64_t;$/;"	t	namespace:glm
lowp_float_t	mesh_visibility/glm/glm/detail/type_float.hpp	/^	typedef float				lowp_float_t;$/;"	t	namespace:glm
lowp_fmat2	mesh_visibility/glm/glm/fwd.hpp	/^	typedef lowp_fmat2x2 lowp_fmat2;$/;"	t	namespace:glm
lowp_fmat2x2	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tmat2x2<f32, lowp> lowp_fmat2x2;$/;"	t	namespace:glm
lowp_fmat2x3	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tmat2x3<f32, lowp> lowp_fmat2x3;$/;"	t	namespace:glm
lowp_fmat2x4	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tmat2x4<f32, lowp> lowp_fmat2x4;$/;"	t	namespace:glm
lowp_fmat3	mesh_visibility/glm/glm/fwd.hpp	/^	typedef lowp_fmat3x3 lowp_fmat3;$/;"	t	namespace:glm
lowp_fmat3x2	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tmat3x2<f32, lowp> lowp_fmat3x2;$/;"	t	namespace:glm
lowp_fmat3x3	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tmat3x3<f32, lowp> lowp_fmat3x3;$/;"	t	namespace:glm
lowp_fmat3x4	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tmat3x4<f32, lowp> lowp_fmat3x4;$/;"	t	namespace:glm
lowp_fmat4	mesh_visibility/glm/glm/fwd.hpp	/^	typedef lowp_fmat4x4 lowp_fmat4;$/;"	t	namespace:glm
lowp_fmat4x2	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tmat4x2<f32, lowp> lowp_fmat4x2;$/;"	t	namespace:glm
lowp_fmat4x3	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tmat4x3<f32, lowp> lowp_fmat4x3;$/;"	t	namespace:glm
lowp_fmat4x4	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tmat4x4<f32, lowp> lowp_fmat4x4;$/;"	t	namespace:glm
lowp_fquat	mesh_visibility/glm/glm/fwd.hpp	/^	typedef lowp_quat			lowp_fquat;$/;"	t	namespace:glm
lowp_fvec1	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tvec1<float, lowp> lowp_fvec1;$/;"	t	namespace:glm
lowp_fvec2	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tvec2<float, lowp> lowp_fvec2;$/;"	t	namespace:glm
lowp_fvec3	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tvec3<float, lowp> lowp_fvec3;$/;"	t	namespace:glm
lowp_fvec4	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tvec4<float, lowp> lowp_fvec4;$/;"	t	namespace:glm
lowp_i16	mesh_visibility/glm/glm/fwd.hpp	/^	typedef detail::int16 lowp_i16;$/;"	t	namespace:glm
lowp_i16	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef detail::int16 lowp_i16;$/;"	t	namespace:glm
lowp_i16vec1	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tvec1<i16, lowp>		lowp_i16vec1;$/;"	t	namespace:glm
lowp_i16vec2	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tvec2<i16, lowp>		lowp_i16vec2;$/;"	t	namespace:glm
lowp_i16vec3	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tvec3<i16, lowp>		lowp_i16vec3;$/;"	t	namespace:glm
lowp_i16vec4	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tvec4<i16, lowp>		lowp_i16vec4;$/;"	t	namespace:glm
lowp_i32	mesh_visibility/glm/glm/fwd.hpp	/^	typedef detail::int32 lowp_i32;$/;"	t	namespace:glm
lowp_i32	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef detail::int32 lowp_i32;$/;"	t	namespace:glm
lowp_i32vec1	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tvec1<i32, lowp>		lowp_i32vec1;$/;"	t	namespace:glm
lowp_i32vec2	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tvec2<i32, lowp>		lowp_i32vec2;$/;"	t	namespace:glm
lowp_i32vec3	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tvec3<i32, lowp>		lowp_i32vec3;$/;"	t	namespace:glm
lowp_i32vec4	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tvec4<i32, lowp>		lowp_i32vec4;$/;"	t	namespace:glm
lowp_i64	mesh_visibility/glm/glm/fwd.hpp	/^	typedef detail::int64 lowp_i64;$/;"	t	namespace:glm
lowp_i64	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef detail::int64 lowp_i64;$/;"	t	namespace:glm
lowp_i64vec1	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tvec1<i64, lowp>		lowp_i64vec1;$/;"	t	namespace:glm
lowp_i64vec2	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tvec2<i64, lowp>		lowp_i64vec2;$/;"	t	namespace:glm
lowp_i64vec3	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tvec3<i64, lowp>		lowp_i64vec3;$/;"	t	namespace:glm
lowp_i64vec4	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tvec4<i64, lowp>		lowp_i64vec4;$/;"	t	namespace:glm
lowp_i8	mesh_visibility/glm/glm/fwd.hpp	/^	typedef detail::int8 lowp_i8;$/;"	t	namespace:glm
lowp_i8	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef detail::int8 lowp_i8;$/;"	t	namespace:glm
lowp_i8vec1	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tvec1<i8, lowp> lowp_i8vec1;$/;"	t	namespace:glm
lowp_i8vec2	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tvec2<i8, lowp> lowp_i8vec2;$/;"	t	namespace:glm
lowp_i8vec3	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tvec3<i8, lowp> lowp_i8vec3;$/;"	t	namespace:glm
lowp_i8vec4	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tvec4<i8, lowp> lowp_i8vec4;$/;"	t	namespace:glm
lowp_imat2	mesh_visibility/glm/glm/gtc/matrix_integer.hpp	/^	typedef tmat2x2<int, lowp>				lowp_imat2;$/;"	t	namespace:glm
lowp_imat2x2	mesh_visibility/glm/glm/gtc/matrix_integer.hpp	/^	typedef tmat2x2<int, lowp>				lowp_imat2x2;$/;"	t	namespace:glm
lowp_imat2x3	mesh_visibility/glm/glm/gtc/matrix_integer.hpp	/^	typedef tmat2x3<int, lowp>				lowp_imat2x3;$/;"	t	namespace:glm
lowp_imat2x4	mesh_visibility/glm/glm/gtc/matrix_integer.hpp	/^	typedef tmat2x4<int, lowp>				lowp_imat2x4;$/;"	t	namespace:glm
lowp_imat3	mesh_visibility/glm/glm/gtc/matrix_integer.hpp	/^	typedef tmat3x3<int, lowp>				lowp_imat3;$/;"	t	namespace:glm
lowp_imat3x2	mesh_visibility/glm/glm/gtc/matrix_integer.hpp	/^	typedef tmat3x2<int, lowp>				lowp_imat3x2;$/;"	t	namespace:glm
lowp_imat3x3	mesh_visibility/glm/glm/gtc/matrix_integer.hpp	/^	typedef tmat3x3<int, lowp>				lowp_imat3x3;$/;"	t	namespace:glm
lowp_imat3x4	mesh_visibility/glm/glm/gtc/matrix_integer.hpp	/^	typedef tmat3x4<int, lowp>				lowp_imat3x4;$/;"	t	namespace:glm
lowp_imat4	mesh_visibility/glm/glm/gtc/matrix_integer.hpp	/^	typedef tmat4x4<int, lowp>				lowp_imat4;$/;"	t	namespace:glm
lowp_imat4x2	mesh_visibility/glm/glm/gtc/matrix_integer.hpp	/^	typedef tmat4x2<int, lowp>				lowp_imat4x2;$/;"	t	namespace:glm
lowp_imat4x3	mesh_visibility/glm/glm/gtc/matrix_integer.hpp	/^	typedef tmat4x3<int, lowp>				lowp_imat4x3;$/;"	t	namespace:glm
lowp_imat4x4	mesh_visibility/glm/glm/gtc/matrix_integer.hpp	/^	typedef tmat4x4<int, lowp>				lowp_imat4x4;$/;"	t	namespace:glm
lowp_int	mesh_visibility/glm/glm/detail/type_int.hpp	/^	typedef detail::lowp_int_t				lowp_int;$/;"	t	namespace:glm
lowp_int16	mesh_visibility/glm/glm/fwd.hpp	/^	typedef detail::int16 lowp_int16;$/;"	t	namespace:glm
lowp_int16	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef detail::int16 lowp_int16;$/;"	t	namespace:glm
lowp_int16_t	mesh_visibility/glm/glm/fwd.hpp	/^	typedef detail::int16 lowp_int16_t;$/;"	t	namespace:glm
lowp_int16_t	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef detail::int16 lowp_int16_t;$/;"	t	namespace:glm
lowp_int32	mesh_visibility/glm/glm/fwd.hpp	/^	typedef detail::int32 lowp_int32;$/;"	t	namespace:glm
lowp_int32	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef detail::int32 lowp_int32;$/;"	t	namespace:glm
lowp_int32_t	mesh_visibility/glm/glm/fwd.hpp	/^	typedef detail::int32 lowp_int32_t;$/;"	t	namespace:glm
lowp_int32_t	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef detail::int32 lowp_int32_t;$/;"	t	namespace:glm
lowp_int64	mesh_visibility/glm/glm/fwd.hpp	/^	typedef detail::int64 lowp_int64;$/;"	t	namespace:glm
lowp_int64	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef detail::int64 lowp_int64;$/;"	t	namespace:glm
lowp_int64_t	mesh_visibility/glm/glm/fwd.hpp	/^	typedef detail::int64 lowp_int64_t;$/;"	t	namespace:glm
lowp_int64_t	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef detail::int64 lowp_int64_t;$/;"	t	namespace:glm
lowp_int8	mesh_visibility/glm/glm/fwd.hpp	/^	typedef detail::int8 lowp_int8;$/;"	t	namespace:glm
lowp_int8	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef detail::int8 lowp_int8;$/;"	t	namespace:glm
lowp_int8_t	mesh_visibility/glm/glm/fwd.hpp	/^	typedef detail::int8 lowp_int8_t;$/;"	t	namespace:glm
lowp_int8_t	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef detail::int8 lowp_int8_t;$/;"	t	namespace:glm
lowp_int_t	mesh_visibility/glm/glm/detail/type_int.hpp	/^	typedef signed int						lowp_int_t;$/;"	t	namespace:glm::detail
lowp_ivec1	mesh_visibility/glm/glm/gtc/vec1.hpp	/^	typedef lowp_ivec1_t			lowp_ivec1;$/;"	t	namespace:glm
lowp_ivec1_t	mesh_visibility/glm/glm/detail/type_vec.hpp	/^	typedef tvec1<int, lowp>		lowp_ivec1_t;$/;"	t	namespace:glm
lowp_ivec2	mesh_visibility/glm/glm/detail/type_vec.hpp	/^	typedef tvec2<int, lowp>		lowp_ivec2;$/;"	t	namespace:glm
lowp_ivec3	mesh_visibility/glm/glm/detail/type_vec.hpp	/^	typedef tvec3<int, lowp>		lowp_ivec3;$/;"	t	namespace:glm
lowp_ivec4	mesh_visibility/glm/glm/detail/type_vec.hpp	/^	typedef tvec4<int, lowp>		lowp_ivec4;$/;"	t	namespace:glm
lowp_mat2	mesh_visibility/glm/glm/detail/type_mat.hpp	/^	typedef tmat2x2<float, lowp>		lowp_mat2;$/;"	t	namespace:glm
lowp_mat2	mesh_visibility/glm/glm/mat2x2.hpp	/^	typedef tmat2x2<float, lowp>		lowp_mat2;$/;"	t	namespace:glm
lowp_mat2x2	mesh_visibility/glm/glm/detail/type_mat.hpp	/^	typedef tmat2x2<float, lowp>		lowp_mat2x2;$/;"	t	namespace:glm
lowp_mat2x2	mesh_visibility/glm/glm/mat2x2.hpp	/^	typedef tmat2x2<float, lowp>		lowp_mat2x2;$/;"	t	namespace:glm
lowp_mat2x3	mesh_visibility/glm/glm/detail/type_mat.hpp	/^	typedef tmat2x3<float, lowp>		lowp_mat2x3;$/;"	t	namespace:glm
lowp_mat2x3	mesh_visibility/glm/glm/mat2x3.hpp	/^	typedef tmat2x3<float, lowp>		lowp_mat2x3;$/;"	t	namespace:glm
lowp_mat2x4	mesh_visibility/glm/glm/detail/type_mat.hpp	/^	typedef tmat2x4<float, lowp>		lowp_mat2x4;$/;"	t	namespace:glm
lowp_mat2x4	mesh_visibility/glm/glm/mat2x4.hpp	/^	typedef tmat2x4<float, lowp>		lowp_mat2x4;$/;"	t	namespace:glm
lowp_mat3	mesh_visibility/glm/glm/detail/type_mat.hpp	/^	typedef tmat3x3<float, lowp>		lowp_mat3;$/;"	t	namespace:glm
lowp_mat3	mesh_visibility/glm/glm/mat3x3.hpp	/^	typedef tmat3x3<float, lowp>		lowp_mat3;$/;"	t	namespace:glm
lowp_mat3x2	mesh_visibility/glm/glm/detail/type_mat.hpp	/^	typedef tmat3x2<float, lowp>		lowp_mat3x2;$/;"	t	namespace:glm
lowp_mat3x2	mesh_visibility/glm/glm/mat3x2.hpp	/^	typedef tmat3x2<float, lowp>		lowp_mat3x2;$/;"	t	namespace:glm
lowp_mat3x3	mesh_visibility/glm/glm/detail/type_mat.hpp	/^	typedef tmat3x3<float, lowp>		lowp_mat3x3;$/;"	t	namespace:glm
lowp_mat3x3	mesh_visibility/glm/glm/mat3x3.hpp	/^	typedef tmat3x3<float, lowp>		lowp_mat3x3;$/;"	t	namespace:glm
lowp_mat3x4	mesh_visibility/glm/glm/detail/type_mat.hpp	/^	typedef tmat3x4<float, lowp>		lowp_mat3x4;$/;"	t	namespace:glm
lowp_mat3x4	mesh_visibility/glm/glm/mat3x4.hpp	/^	typedef tmat3x4<float, lowp>		lowp_mat3x4;$/;"	t	namespace:glm
lowp_mat4	mesh_visibility/glm/glm/detail/type_mat.hpp	/^	typedef tmat4x4<float, lowp>		lowp_mat4;$/;"	t	namespace:glm
lowp_mat4	mesh_visibility/glm/glm/mat4x4.hpp	/^	typedef tmat4x4<float, lowp>		lowp_mat4;$/;"	t	namespace:glm
lowp_mat4x2	mesh_visibility/glm/glm/detail/type_mat.hpp	/^	typedef tmat4x2<float, lowp>		lowp_mat4x2;$/;"	t	namespace:glm
lowp_mat4x2	mesh_visibility/glm/glm/mat4x2.hpp	/^	typedef tmat4x2<float, lowp>		lowp_mat4x2;$/;"	t	namespace:glm
lowp_mat4x3	mesh_visibility/glm/glm/detail/type_mat.hpp	/^	typedef tmat4x3<float, lowp>		lowp_mat4x3;$/;"	t	namespace:glm
lowp_mat4x3	mesh_visibility/glm/glm/mat4x3.hpp	/^	typedef tmat4x3<float, lowp>		lowp_mat4x3;$/;"	t	namespace:glm
lowp_mat4x4	mesh_visibility/glm/glm/detail/type_mat.hpp	/^	typedef tmat4x4<float, lowp>		lowp_mat4x4;$/;"	t	namespace:glm
lowp_mat4x4	mesh_visibility/glm/glm/mat4x4.hpp	/^	typedef tmat4x4<float, lowp>		lowp_mat4x4;$/;"	t	namespace:glm
lowp_quat	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tquat<float, lowp>		lowp_quat;$/;"	t	namespace:glm
lowp_u16	mesh_visibility/glm/glm/fwd.hpp	/^	typedef detail::uint16 lowp_u16;$/;"	t	namespace:glm
lowp_u16	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef detail::uint16 lowp_u16;$/;"	t	namespace:glm
lowp_u16vec1	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tvec1<u16, lowp>		lowp_u16vec1;$/;"	t	namespace:glm
lowp_u16vec2	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tvec2<u16, lowp>		lowp_u16vec2;$/;"	t	namespace:glm
lowp_u16vec3	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tvec3<u16, lowp>		lowp_u16vec3;$/;"	t	namespace:glm
lowp_u16vec4	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tvec4<u16, lowp>		lowp_u16vec4;$/;"	t	namespace:glm
lowp_u32	mesh_visibility/glm/glm/fwd.hpp	/^	typedef detail::uint32 lowp_u32;$/;"	t	namespace:glm
lowp_u32	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef detail::uint32 lowp_u32;$/;"	t	namespace:glm
lowp_u32vec1	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tvec1<u32, lowp>		lowp_u32vec1;$/;"	t	namespace:glm
lowp_u32vec2	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tvec2<u32, lowp>		lowp_u32vec2;$/;"	t	namespace:glm
lowp_u32vec3	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tvec3<u32, lowp>		lowp_u32vec3;$/;"	t	namespace:glm
lowp_u32vec4	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tvec4<u32, lowp>		lowp_u32vec4;$/;"	t	namespace:glm
lowp_u64	mesh_visibility/glm/glm/fwd.hpp	/^	typedef detail::uint64 lowp_u64;$/;"	t	namespace:glm
lowp_u64	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef detail::uint64 lowp_u64;$/;"	t	namespace:glm
lowp_u64vec1	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tvec1<u64, lowp>		lowp_u64vec1;$/;"	t	namespace:glm
lowp_u64vec2	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tvec2<u64, lowp>		lowp_u64vec2;$/;"	t	namespace:glm
lowp_u64vec3	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tvec3<u64, lowp>		lowp_u64vec3;$/;"	t	namespace:glm
lowp_u64vec4	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tvec4<u64, lowp>		lowp_u64vec4;$/;"	t	namespace:glm
lowp_u8	mesh_visibility/glm/glm/fwd.hpp	/^	typedef detail::uint8 lowp_u8;$/;"	t	namespace:glm
lowp_u8	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef detail::uint8 lowp_u8;$/;"	t	namespace:glm
lowp_u8vec1	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tvec1<u8, lowp> lowp_u8vec1;$/;"	t	namespace:glm
lowp_u8vec2	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tvec2<u8, lowp> lowp_u8vec2;$/;"	t	namespace:glm
lowp_u8vec3	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tvec3<u8, lowp> lowp_u8vec3;$/;"	t	namespace:glm
lowp_u8vec4	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tvec4<u8, lowp> lowp_u8vec4;$/;"	t	namespace:glm
lowp_uint	mesh_visibility/glm/glm/detail/type_int.hpp	/^	typedef detail::lowp_uint_t				lowp_uint;$/;"	t	namespace:glm
lowp_uint16	mesh_visibility/glm/glm/fwd.hpp	/^	typedef detail::uint16 lowp_uint16;$/;"	t	namespace:glm
lowp_uint16	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef detail::uint16 lowp_uint16;$/;"	t	namespace:glm
lowp_uint16_t	mesh_visibility/glm/glm/fwd.hpp	/^	typedef detail::uint16 lowp_uint16_t;$/;"	t	namespace:glm
lowp_uint16_t	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef detail::uint16 lowp_uint16_t;$/;"	t	namespace:glm
lowp_uint32	mesh_visibility/glm/glm/fwd.hpp	/^	typedef detail::uint32 lowp_uint32;$/;"	t	namespace:glm
lowp_uint32	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef detail::uint32 lowp_uint32;$/;"	t	namespace:glm
lowp_uint32_t	mesh_visibility/glm/glm/fwd.hpp	/^	typedef detail::uint32 lowp_uint32_t;$/;"	t	namespace:glm
lowp_uint32_t	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef detail::uint32 lowp_uint32_t;$/;"	t	namespace:glm
lowp_uint64	mesh_visibility/glm/glm/fwd.hpp	/^	typedef detail::uint64 lowp_uint64;$/;"	t	namespace:glm
lowp_uint64	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef detail::uint64 lowp_uint64;$/;"	t	namespace:glm
lowp_uint64_t	mesh_visibility/glm/glm/fwd.hpp	/^	typedef detail::uint64 lowp_uint64_t;$/;"	t	namespace:glm
lowp_uint64_t	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef detail::uint64 lowp_uint64_t;$/;"	t	namespace:glm
lowp_uint8	mesh_visibility/glm/glm/fwd.hpp	/^	typedef detail::uint8 lowp_uint8;$/;"	t	namespace:glm
lowp_uint8	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef detail::uint8 lowp_uint8;$/;"	t	namespace:glm
lowp_uint8_t	mesh_visibility/glm/glm/fwd.hpp	/^	typedef detail::uint8 lowp_uint8_t;$/;"	t	namespace:glm
lowp_uint8_t	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef detail::uint8 lowp_uint8_t;$/;"	t	namespace:glm
lowp_uint_t	mesh_visibility/glm/glm/detail/type_int.hpp	/^	typedef unsigned int					lowp_uint_t;$/;"	t	namespace:glm::detail
lowp_umat2	mesh_visibility/glm/glm/gtc/matrix_integer.hpp	/^	typedef tmat2x2<uint, lowp>				lowp_umat2;$/;"	t	namespace:glm
lowp_umat2x2	mesh_visibility/glm/glm/gtc/matrix_integer.hpp	/^	typedef tmat2x2<uint, lowp>				lowp_umat2x2;$/;"	t	namespace:glm
lowp_umat2x3	mesh_visibility/glm/glm/gtc/matrix_integer.hpp	/^	typedef tmat2x3<uint, lowp>				lowp_umat2x3;$/;"	t	namespace:glm
lowp_umat2x4	mesh_visibility/glm/glm/gtc/matrix_integer.hpp	/^	typedef tmat2x4<uint, lowp>				lowp_umat2x4;$/;"	t	namespace:glm
lowp_umat3	mesh_visibility/glm/glm/gtc/matrix_integer.hpp	/^	typedef tmat3x3<uint, lowp>				lowp_umat3;$/;"	t	namespace:glm
lowp_umat3x2	mesh_visibility/glm/glm/gtc/matrix_integer.hpp	/^	typedef tmat3x2<uint, lowp>				lowp_umat3x2;$/;"	t	namespace:glm
lowp_umat3x3	mesh_visibility/glm/glm/gtc/matrix_integer.hpp	/^	typedef tmat3x3<uint, lowp>				lowp_umat3x3;$/;"	t	namespace:glm
lowp_umat3x4	mesh_visibility/glm/glm/gtc/matrix_integer.hpp	/^	typedef tmat3x4<uint, lowp>				lowp_umat3x4;$/;"	t	namespace:glm
lowp_umat4	mesh_visibility/glm/glm/gtc/matrix_integer.hpp	/^	typedef tmat4x4<uint, lowp>				lowp_umat4;$/;"	t	namespace:glm
lowp_umat4x2	mesh_visibility/glm/glm/gtc/matrix_integer.hpp	/^	typedef tmat4x2<uint, lowp>				lowp_umat4x2;$/;"	t	namespace:glm
lowp_umat4x3	mesh_visibility/glm/glm/gtc/matrix_integer.hpp	/^	typedef tmat4x3<uint, lowp>				lowp_umat4x3;$/;"	t	namespace:glm
lowp_umat4x4	mesh_visibility/glm/glm/gtc/matrix_integer.hpp	/^	typedef tmat4x4<uint, lowp>				lowp_umat4x4;$/;"	t	namespace:glm
lowp_uvec1	mesh_visibility/glm/glm/gtc/vec1.hpp	/^	typedef lowp_uvec1_t			lowp_uvec1;$/;"	t	namespace:glm
lowp_uvec1_t	mesh_visibility/glm/glm/detail/type_vec.hpp	/^	typedef tvec1<uint, lowp>		lowp_uvec1_t;$/;"	t	namespace:glm
lowp_uvec2	mesh_visibility/glm/glm/detail/type_vec.hpp	/^	typedef tvec2<uint, lowp>		lowp_uvec2;$/;"	t	namespace:glm
lowp_uvec3	mesh_visibility/glm/glm/detail/type_vec.hpp	/^	typedef tvec3<uint, lowp>		lowp_uvec3;$/;"	t	namespace:glm
lowp_uvec4	mesh_visibility/glm/glm/detail/type_vec.hpp	/^	typedef tvec4<uint, lowp>		lowp_uvec4;$/;"	t	namespace:glm
lowp_vec1	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tvec1<float, lowp> lowp_vec1;$/;"	t	namespace:glm
lowp_vec1	mesh_visibility/glm/glm/gtc/vec1.hpp	/^	typedef lowp_vec1_t				lowp_vec1;$/;"	t	namespace:glm
lowp_vec1_t	mesh_visibility/glm/glm/detail/type_vec.hpp	/^	typedef tvec1<float, lowp>		lowp_vec1_t;$/;"	t	namespace:glm
lowp_vec2	mesh_visibility/glm/glm/detail/type_vec.hpp	/^	typedef tvec2<float, lowp>		lowp_vec2;$/;"	t	namespace:glm
lowp_vec2	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tvec2<float, lowp> lowp_vec2;$/;"	t	namespace:glm
lowp_vec3	mesh_visibility/glm/glm/detail/type_vec.hpp	/^	typedef tvec3<float, lowp>		lowp_vec3;$/;"	t	namespace:glm
lowp_vec3	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tvec3<float, lowp> lowp_vec3;$/;"	t	namespace:glm
lowp_vec4	mesh_visibility/glm/glm/detail/type_vec.hpp	/^	typedef tvec4<float, lowp>		lowp_vec4;$/;"	t	namespace:glm
lowp_vec4	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tvec4<float, lowp> lowp_vec4;$/;"	t	namespace:glm
m_colorTexture1	mesh_visibility/gbuffer.h	/^	GLuint m_colorTexture1;$/;"	m	class:GBuffer
m_colorTexture2	mesh_visibility/gbuffer.h	/^	GLuint m_colorTexture2;$/;"	m	class:GBuffer
m_depthTexture	mesh_visibility/gbuffer.h	/^	GLuint m_depthTexture;$/;"	m	class:GBuffer
m_fbo	mesh_visibility/gbuffer.h	/^	GLuint m_fbo;$/;"	m	class:GBuffer
m_textures	mesh_visibility/gbuffer.h	/^	GLuint m_textures[GBUFFER_NUM_TEXTURES];$/;"	m	class:GBuffer
main	blur_estimation/main.cpp	/^int main(int argc, char** argv)$/;"	f
main	mesh_partition/main.cpp	/^int main(int argc, char** argv)$/;"	f
main	mesh_texture_opt/main.cpp	/^int main(int argc, char** argv)$/;"	f
main	mesh_visibility/glm/glm/detail/dummy.cpp	/^int main()$/;"	f
main	mesh_visibility/main.cpp	/^int main(int argc, char** argv)$/;"	f
mat2	mesh_visibility/glm/glm/detail/type_mat.hpp	/^	typedef mat2x2					mat2;$/;"	t	namespace:glm
mat2x2	mesh_visibility/glm/glm/detail/type_mat.hpp	/^	typedef highp_mat2x2			mat2x2;$/;"	t	namespace:glm
mat2x2	mesh_visibility/glm/glm/detail/type_mat.hpp	/^	typedef lowp_mat2x2			mat2x2;$/;"	t	namespace:glm
mat2x2	mesh_visibility/glm/glm/detail/type_mat.hpp	/^	typedef mediump_mat2x2		mat2x2;$/;"	t	namespace:glm
mat2x3	mesh_visibility/glm/glm/detail/type_mat.hpp	/^	typedef highp_mat2x3			mat2x3;$/;"	t	namespace:glm
mat2x3	mesh_visibility/glm/glm/detail/type_mat.hpp	/^	typedef lowp_mat2x3			mat2x3;$/;"	t	namespace:glm
mat2x3	mesh_visibility/glm/glm/detail/type_mat.hpp	/^	typedef mediump_mat2x3		mat2x3;$/;"	t	namespace:glm
mat2x4	mesh_visibility/glm/glm/detail/type_mat.hpp	/^	typedef highp_mat2x4			mat2x4;$/;"	t	namespace:glm
mat2x4	mesh_visibility/glm/glm/detail/type_mat.hpp	/^	typedef lowp_mat2x4			mat2x4;$/;"	t	namespace:glm
mat2x4	mesh_visibility/glm/glm/detail/type_mat.hpp	/^	typedef mediump_mat2x4		mat2x4;$/;"	t	namespace:glm
mat3	mesh_visibility/glm/glm/detail/type_mat.hpp	/^	typedef mat3x3					mat3;$/;"	t	namespace:glm
mat3x2	mesh_visibility/glm/glm/detail/type_mat.hpp	/^	typedef highp_mat3x2			mat3x2;$/;"	t	namespace:glm
mat3x2	mesh_visibility/glm/glm/detail/type_mat.hpp	/^	typedef lowp_mat3x2			mat3x2;$/;"	t	namespace:glm
mat3x2	mesh_visibility/glm/glm/detail/type_mat.hpp	/^	typedef mediump_mat3x2		mat3x2;$/;"	t	namespace:glm
mat3x3	mesh_visibility/glm/glm/detail/type_mat.hpp	/^	typedef highp_mat3x3			mat3x3;$/;"	t	namespace:glm
mat3x3	mesh_visibility/glm/glm/detail/type_mat.hpp	/^	typedef lowp_mat3x3			mat3x3;$/;"	t	namespace:glm
mat3x3	mesh_visibility/glm/glm/detail/type_mat.hpp	/^	typedef mediump_mat3x3		mat3x3;$/;"	t	namespace:glm
mat3x4	mesh_visibility/glm/glm/detail/type_mat.hpp	/^	typedef highp_mat3x4			mat3x4;$/;"	t	namespace:glm
mat3x4	mesh_visibility/glm/glm/detail/type_mat.hpp	/^	typedef lowp_mat3x4			mat3x4;$/;"	t	namespace:glm
mat3x4	mesh_visibility/glm/glm/detail/type_mat.hpp	/^	typedef mediump_mat3x4		mat3x4;$/;"	t	namespace:glm
mat4	mesh_visibility/glm/glm/detail/type_mat.hpp	/^	typedef mat4x4					mat4;$/;"	t	namespace:glm
mat4x2	mesh_visibility/glm/glm/detail/type_mat.hpp	/^	typedef highp_mat4x2			mat4x2;$/;"	t	namespace:glm
mat4x2	mesh_visibility/glm/glm/detail/type_mat.hpp	/^	typedef lowp_mat4x2			mat4x2;$/;"	t	namespace:glm
mat4x2	mesh_visibility/glm/glm/detail/type_mat.hpp	/^	typedef mediump_mat4x2		mat4x2;$/;"	t	namespace:glm
mat4x3	mesh_visibility/glm/glm/detail/type_mat.hpp	/^	typedef highp_mat4x3			mat4x3;$/;"	t	namespace:glm
mat4x3	mesh_visibility/glm/glm/detail/type_mat.hpp	/^	typedef lowp_mat4x3			mat4x3;$/;"	t	namespace:glm
mat4x3	mesh_visibility/glm/glm/detail/type_mat.hpp	/^	typedef mediump_mat4x3		mat4x3;$/;"	t	namespace:glm
mat4x4	mesh_visibility/glm/glm/detail/type_mat.hpp	/^	typedef highp_mat4x4			mat4x4;$/;"	t	namespace:glm
mat4x4	mesh_visibility/glm/glm/detail/type_mat.hpp	/^	typedef lowp_mat4x4			mat4x4;$/;"	t	namespace:glm
mat4x4	mesh_visibility/glm/glm/detail/type_mat.hpp	/^	typedef mediump_mat4x4		mat4x4;$/;"	t	namespace:glm
material	mesh_visibility/glm/glm/detail/dummy.cpp	/^struct material$/;"	s	file:
material_names_	mesh_visibility/mesh_visibility.h	/^	unordered_map<string, int> material_names_;$/;"	m	class:MeshVisibility
max	mesh_visibility/glm/glm/detail/_fixes.hpp	37;"	d
mediump	mesh_visibility/glm/glm/detail/precision.hpp	/^		mediump,$/;"	e	enum:glm::precision
mediump_bvec1	mesh_visibility/glm/glm/gtc/vec1.hpp	/^	typedef mediump_bvec1_t			mediump_bvec1;$/;"	t	namespace:glm
mediump_bvec1_t	mesh_visibility/glm/glm/detail/type_vec.hpp	/^	typedef tvec1<bool, mediump>	mediump_bvec1_t;$/;"	t	namespace:glm
mediump_bvec2	mesh_visibility/glm/glm/detail/type_vec.hpp	/^	typedef tvec2<bool, mediump>	mediump_bvec2;$/;"	t	namespace:glm
mediump_bvec3	mesh_visibility/glm/glm/detail/type_vec.hpp	/^	typedef tvec3<bool, mediump>	mediump_bvec3;$/;"	t	namespace:glm
mediump_bvec4	mesh_visibility/glm/glm/detail/type_vec.hpp	/^	typedef tvec4<bool, mediump>	mediump_bvec4;$/;"	t	namespace:glm
mediump_ddualquat	mesh_visibility/glm/glm/gtx/dual_quaternion.hpp	/^	typedef tdualquat<double, mediump>	mediump_ddualquat;$/;"	t	namespace:glm
mediump_dmat2	mesh_visibility/glm/glm/detail/type_mat.hpp	/^	typedef tmat2x2<double, mediump>	mediump_dmat2;$/;"	t	namespace:glm
mediump_dmat2x2	mesh_visibility/glm/glm/detail/type_mat.hpp	/^	typedef tmat2x2<double, mediump>	mediump_dmat2x2;$/;"	t	namespace:glm
mediump_dmat2x3	mesh_visibility/glm/glm/detail/type_mat.hpp	/^	typedef tmat2x3<double, mediump>	mediump_dmat2x3;$/;"	t	namespace:glm
mediump_dmat2x4	mesh_visibility/glm/glm/detail/type_mat.hpp	/^	typedef tmat2x4<double, mediump>	mediump_dmat2x4;$/;"	t	namespace:glm
mediump_dmat3	mesh_visibility/glm/glm/detail/type_mat.hpp	/^	typedef tmat3x3<double, mediump>	mediump_dmat3;$/;"	t	namespace:glm
mediump_dmat3x2	mesh_visibility/glm/glm/detail/type_mat.hpp	/^	typedef tmat3x2<double, mediump>	mediump_dmat3x2;$/;"	t	namespace:glm
mediump_dmat3x3	mesh_visibility/glm/glm/detail/type_mat.hpp	/^	typedef tmat3x3<double, mediump>	mediump_dmat3x3;$/;"	t	namespace:glm
mediump_dmat3x4	mesh_visibility/glm/glm/detail/type_mat.hpp	/^	typedef tmat3x4<double, mediump>	mediump_dmat3x4;$/;"	t	namespace:glm
mediump_dmat4	mesh_visibility/glm/glm/detail/type_mat.hpp	/^	typedef tmat4x4<double, mediump>	mediump_dmat4;$/;"	t	namespace:glm
mediump_dmat4x2	mesh_visibility/glm/glm/detail/type_mat.hpp	/^	typedef tmat4x2<double, mediump>	mediump_dmat4x2;$/;"	t	namespace:glm
mediump_dmat4x3	mesh_visibility/glm/glm/detail/type_mat.hpp	/^	typedef tmat4x3<double, mediump>	mediump_dmat4x3;$/;"	t	namespace:glm
mediump_dmat4x4	mesh_visibility/glm/glm/detail/type_mat.hpp	/^	typedef tmat4x4<double, mediump>	mediump_dmat4x4;$/;"	t	namespace:glm
mediump_dquat	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tquat<double, mediump>	mediump_dquat;$/;"	t	namespace:glm
mediump_dualquat	mesh_visibility/glm/glm/gtx/dual_quaternion.hpp	/^	typedef tdualquat<float, mediump>	mediump_dualquat;$/;"	t	namespace:glm
mediump_dvec1	mesh_visibility/glm/glm/gtc/vec1.hpp	/^	typedef mediump_dvec1_t			mediump_dvec1;$/;"	t	namespace:glm
mediump_dvec1_t	mesh_visibility/glm/glm/detail/type_vec.hpp	/^	typedef tvec1<double, mediump>	mediump_dvec1_t;$/;"	t	namespace:glm
mediump_dvec2	mesh_visibility/glm/glm/detail/type_vec.hpp	/^	typedef tvec2<double, mediump>	mediump_dvec2;$/;"	t	namespace:glm
mediump_dvec3	mesh_visibility/glm/glm/detail/type_vec.hpp	/^	typedef tvec3<double, mediump>	mediump_dvec3;$/;"	t	namespace:glm
mediump_dvec4	mesh_visibility/glm/glm/detail/type_vec.hpp	/^	typedef tvec4<double, mediump>	mediump_dvec4;$/;"	t	namespace:glm
mediump_f32	mesh_visibility/glm/glm/fwd.hpp	/^	typedef float32 mediump_f32;$/;"	t	namespace:glm
mediump_f32mat2	mesh_visibility/glm/glm/fwd.hpp	/^	typedef mediump_f32mat2x2 mediump_f32mat2;$/;"	t	namespace:glm
mediump_f32mat2x2	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tmat2x2<f32, mediump> mediump_f32mat2x2;$/;"	t	namespace:glm
mediump_f32mat2x3	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tmat2x3<f32, mediump> mediump_f32mat2x3;$/;"	t	namespace:glm
mediump_f32mat2x4	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tmat2x4<f32, mediump> mediump_f32mat2x4;$/;"	t	namespace:glm
mediump_f32mat3	mesh_visibility/glm/glm/fwd.hpp	/^	typedef mediump_f32mat3x3 mediump_f32mat3;$/;"	t	namespace:glm
mediump_f32mat3x2	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tmat3x2<f32, mediump> mediump_f32mat3x2;$/;"	t	namespace:glm
mediump_f32mat3x3	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tmat3x3<f32, mediump> mediump_f32mat3x3;$/;"	t	namespace:glm
mediump_f32mat3x4	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tmat3x4<f32, mediump> mediump_f32mat3x4;$/;"	t	namespace:glm
mediump_f32mat4	mesh_visibility/glm/glm/fwd.hpp	/^	typedef mediump_f32mat4x4 mediump_f32mat4;$/;"	t	namespace:glm
mediump_f32mat4x2	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tmat4x2<f32, mediump> mediump_f32mat4x2;$/;"	t	namespace:glm
mediump_f32mat4x3	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tmat4x3<f32, mediump> mediump_f32mat4x3;$/;"	t	namespace:glm
mediump_f32mat4x4	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tmat4x4<f32, mediump> mediump_f32mat4x4;$/;"	t	namespace:glm
mediump_f32quat	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tquat<f32, mediump> mediump_f32quat;$/;"	t	namespace:glm
mediump_f32vec1	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tvec1<f32, mediump> mediump_f32vec1;$/;"	t	namespace:glm
mediump_f32vec2	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tvec2<f32, mediump> mediump_f32vec2;$/;"	t	namespace:glm
mediump_f32vec3	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tvec3<f32, mediump> mediump_f32vec3;$/;"	t	namespace:glm
mediump_f32vec4	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tvec4<f32, mediump> mediump_f32vec4;$/;"	t	namespace:glm
mediump_f64	mesh_visibility/glm/glm/fwd.hpp	/^	typedef float64 mediump_f64;$/;"	t	namespace:glm
mediump_f64mat2	mesh_visibility/glm/glm/fwd.hpp	/^	typedef mediump_f64mat2x2 mediump_f64mat2;$/;"	t	namespace:glm
mediump_f64mat2x2	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tmat2x2<f64, mediump> mediump_f64mat2x2;$/;"	t	namespace:glm
mediump_f64mat2x3	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tmat2x3<f64, mediump> mediump_f64mat2x3;$/;"	t	namespace:glm
mediump_f64mat2x4	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tmat2x4<f64, mediump> mediump_f64mat2x4;$/;"	t	namespace:glm
mediump_f64mat3	mesh_visibility/glm/glm/fwd.hpp	/^	typedef mediump_f64mat3x3 mediump_f64mat3;$/;"	t	namespace:glm
mediump_f64mat3x2	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tmat3x2<f64, mediump> mediump_f64mat3x2;$/;"	t	namespace:glm
mediump_f64mat3x3	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tmat3x3<f64, mediump> mediump_f64mat3x3;$/;"	t	namespace:glm
mediump_f64mat3x4	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tmat3x4<f64, mediump> mediump_f64mat3x4;$/;"	t	namespace:glm
mediump_f64mat4	mesh_visibility/glm/glm/fwd.hpp	/^	typedef mediump_f64mat4x4 mediump_f64mat4;$/;"	t	namespace:glm
mediump_f64mat4x2	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tmat4x2<f64, mediump> mediump_f64mat4x2;$/;"	t	namespace:glm
mediump_f64mat4x3	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tmat4x3<f64, mediump> mediump_f64mat4x3;$/;"	t	namespace:glm
mediump_f64mat4x4	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tmat4x4<f64, mediump> mediump_f64mat4x4;$/;"	t	namespace:glm
mediump_f64quat	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tquat<f64, mediump> mediump_f64quat;$/;"	t	namespace:glm
mediump_f64vec1	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tvec1<f64, mediump> mediump_f64vec1;$/;"	t	namespace:glm
mediump_f64vec2	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tvec2<f64, mediump> mediump_f64vec2;$/;"	t	namespace:glm
mediump_f64vec3	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tvec3<f64, mediump> mediump_f64vec3;$/;"	t	namespace:glm
mediump_f64vec4	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tvec4<f64, mediump> mediump_f64vec4;$/;"	t	namespace:glm
mediump_fdualquat	mesh_visibility/glm/glm/gtx/dual_quaternion.hpp	/^	typedef tdualquat<float, mediump>	mediump_fdualquat;$/;"	t	namespace:glm
mediump_float	mesh_visibility/glm/glm/detail/type_float.hpp	/^	typedef mediump_float_t		mediump_float;$/;"	t	namespace:glm
mediump_float32	mesh_visibility/glm/glm/fwd.hpp	/^	typedef detail::float32 mediump_float32;$/;"	t	namespace:glm
mediump_float32_t	mesh_visibility/glm/glm/fwd.hpp	/^	typedef detail::float32 mediump_float32_t;$/;"	t	namespace:glm
mediump_float64	mesh_visibility/glm/glm/fwd.hpp	/^	typedef detail::float64 mediump_float64;$/;"	t	namespace:glm
mediump_float64_t	mesh_visibility/glm/glm/fwd.hpp	/^	typedef detail::float64 mediump_float64_t;$/;"	t	namespace:glm
mediump_float_t	mesh_visibility/glm/glm/detail/type_float.hpp	/^	typedef float				mediump_float_t;$/;"	t	namespace:glm
mediump_fmat2	mesh_visibility/glm/glm/fwd.hpp	/^	typedef mediump_fmat2x2 mediump_fmat2;$/;"	t	namespace:glm
mediump_fmat2x2	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tmat2x2<f32, mediump> mediump_fmat2x2;$/;"	t	namespace:glm
mediump_fmat2x3	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tmat2x3<f32, mediump> mediump_fmat2x3;$/;"	t	namespace:glm
mediump_fmat2x4	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tmat2x4<f32, mediump> mediump_fmat2x4;$/;"	t	namespace:glm
mediump_fmat3	mesh_visibility/glm/glm/fwd.hpp	/^	typedef mediump_fmat3x3 mediump_fmat3;$/;"	t	namespace:glm
mediump_fmat3x2	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tmat3x2<f32, mediump> mediump_fmat3x2;$/;"	t	namespace:glm
mediump_fmat3x3	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tmat3x3<f32, mediump> mediump_fmat3x3;$/;"	t	namespace:glm
mediump_fmat3x4	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tmat3x4<f32, mediump> mediump_fmat3x4;$/;"	t	namespace:glm
mediump_fmat4	mesh_visibility/glm/glm/fwd.hpp	/^	typedef mediump_fmat4x4 mediump_fmat4;$/;"	t	namespace:glm
mediump_fmat4x2	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tmat4x2<f32, mediump> mediump_fmat4x2;$/;"	t	namespace:glm
mediump_fmat4x3	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tmat4x3<f32, mediump> mediump_fmat4x3;$/;"	t	namespace:glm
mediump_fmat4x4	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tmat4x4<f32, mediump> mediump_fmat4x4;$/;"	t	namespace:glm
mediump_fquat	mesh_visibility/glm/glm/fwd.hpp	/^	typedef mediump_quat		mediump_fquat;$/;"	t	namespace:glm
mediump_fvec1	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tvec1<float, mediump> mediump_fvec1;$/;"	t	namespace:glm
mediump_fvec2	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tvec2<float, mediump> mediump_fvec2;$/;"	t	namespace:glm
mediump_fvec3	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tvec3<float, mediump> mediump_fvec3;$/;"	t	namespace:glm
mediump_fvec4	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tvec4<float, mediump> mediump_fvec4;$/;"	t	namespace:glm
mediump_i16	mesh_visibility/glm/glm/fwd.hpp	/^	typedef detail::int16 mediump_i16;$/;"	t	namespace:glm
mediump_i16	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef detail::int16 mediump_i16;$/;"	t	namespace:glm
mediump_i16vec1	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tvec1<i16, mediump>		mediump_i16vec1;$/;"	t	namespace:glm
mediump_i16vec2	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tvec2<i16, mediump>		mediump_i16vec2;$/;"	t	namespace:glm
mediump_i16vec3	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tvec3<i16, mediump>		mediump_i16vec3;$/;"	t	namespace:glm
mediump_i16vec4	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tvec4<i16, mediump>		mediump_i16vec4;$/;"	t	namespace:glm
mediump_i32	mesh_visibility/glm/glm/fwd.hpp	/^	typedef detail::int32 mediump_i32;$/;"	t	namespace:glm
mediump_i32	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef detail::int32 mediump_i32;$/;"	t	namespace:glm
mediump_i32vec1	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tvec1<i32, mediump>		mediump_i32vec1;$/;"	t	namespace:glm
mediump_i32vec2	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tvec2<i32, mediump>		mediump_i32vec2;$/;"	t	namespace:glm
mediump_i32vec3	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tvec3<i32, mediump>		mediump_i32vec3;$/;"	t	namespace:glm
mediump_i32vec4	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tvec4<i32, mediump>		mediump_i32vec4;$/;"	t	namespace:glm
mediump_i64	mesh_visibility/glm/glm/fwd.hpp	/^	typedef detail::int64 mediump_i64;$/;"	t	namespace:glm
mediump_i64	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef detail::int64 mediump_i64;$/;"	t	namespace:glm
mediump_i64vec1	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tvec1<i64, mediump>		mediump_i64vec1;$/;"	t	namespace:glm
mediump_i64vec2	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tvec2<i64, mediump>		mediump_i64vec2;$/;"	t	namespace:glm
mediump_i64vec3	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tvec3<i64, mediump>		mediump_i64vec3;$/;"	t	namespace:glm
mediump_i64vec4	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tvec4<i64, mediump>		mediump_i64vec4;$/;"	t	namespace:glm
mediump_i8	mesh_visibility/glm/glm/fwd.hpp	/^	typedef detail::int8 mediump_i8;$/;"	t	namespace:glm
mediump_i8	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef detail::int8 mediump_i8;$/;"	t	namespace:glm
mediump_i8vec1	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tvec1<i8, mediump> mediump_i8vec1;$/;"	t	namespace:glm
mediump_i8vec2	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tvec2<i8, mediump> mediump_i8vec2;$/;"	t	namespace:glm
mediump_i8vec3	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tvec3<i8, mediump> mediump_i8vec3;$/;"	t	namespace:glm
mediump_i8vec4	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tvec4<i8, mediump> mediump_i8vec4;$/;"	t	namespace:glm
mediump_imat2	mesh_visibility/glm/glm/gtc/matrix_integer.hpp	/^	typedef tmat2x2<int, mediump>			mediump_imat2;$/;"	t	namespace:glm
mediump_imat2x2	mesh_visibility/glm/glm/gtc/matrix_integer.hpp	/^	typedef tmat2x2<int, mediump>			mediump_imat2x2;$/;"	t	namespace:glm
mediump_imat2x3	mesh_visibility/glm/glm/gtc/matrix_integer.hpp	/^	typedef tmat2x3<int, mediump>			mediump_imat2x3;$/;"	t	namespace:glm
mediump_imat2x4	mesh_visibility/glm/glm/gtc/matrix_integer.hpp	/^	typedef tmat2x4<int, mediump>			mediump_imat2x4;$/;"	t	namespace:glm
mediump_imat3	mesh_visibility/glm/glm/gtc/matrix_integer.hpp	/^	typedef tmat3x3<int, mediump>			mediump_imat3;$/;"	t	namespace:glm
mediump_imat3x2	mesh_visibility/glm/glm/gtc/matrix_integer.hpp	/^	typedef tmat3x2<int, mediump>			mediump_imat3x2;$/;"	t	namespace:glm
mediump_imat3x3	mesh_visibility/glm/glm/gtc/matrix_integer.hpp	/^	typedef tmat3x3<int, mediump>			mediump_imat3x3;$/;"	t	namespace:glm
mediump_imat3x4	mesh_visibility/glm/glm/gtc/matrix_integer.hpp	/^	typedef tmat3x4<int, mediump>			mediump_imat3x4;$/;"	t	namespace:glm
mediump_imat4	mesh_visibility/glm/glm/gtc/matrix_integer.hpp	/^	typedef tmat4x4<int, mediump>			mediump_imat4;$/;"	t	namespace:glm
mediump_imat4x2	mesh_visibility/glm/glm/gtc/matrix_integer.hpp	/^	typedef tmat4x2<int, mediump>			mediump_imat4x2;$/;"	t	namespace:glm
mediump_imat4x3	mesh_visibility/glm/glm/gtc/matrix_integer.hpp	/^	typedef tmat4x3<int, mediump>			mediump_imat4x3;$/;"	t	namespace:glm
mediump_imat4x4	mesh_visibility/glm/glm/gtc/matrix_integer.hpp	/^	typedef tmat4x4<int, mediump>			mediump_imat4x4;$/;"	t	namespace:glm
mediump_int	mesh_visibility/glm/glm/detail/type_int.hpp	/^	typedef detail::mediump_int_t			mediump_int;$/;"	t	namespace:glm
mediump_int16	mesh_visibility/glm/glm/fwd.hpp	/^	typedef detail::int16 mediump_int16;$/;"	t	namespace:glm
mediump_int16	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef detail::int16 mediump_int16;$/;"	t	namespace:glm
mediump_int16_t	mesh_visibility/glm/glm/fwd.hpp	/^	typedef detail::int16 mediump_int16_t;$/;"	t	namespace:glm
mediump_int16_t	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef detail::int16 mediump_int16_t;$/;"	t	namespace:glm
mediump_int32	mesh_visibility/glm/glm/fwd.hpp	/^	typedef detail::int32 mediump_int32;$/;"	t	namespace:glm
mediump_int32	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef detail::int32 mediump_int32;$/;"	t	namespace:glm
mediump_int32_t	mesh_visibility/glm/glm/fwd.hpp	/^	typedef detail::int32 mediump_int32_t;$/;"	t	namespace:glm
mediump_int32_t	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef detail::int32 mediump_int32_t;$/;"	t	namespace:glm
mediump_int64	mesh_visibility/glm/glm/fwd.hpp	/^	typedef detail::int64 mediump_int64;$/;"	t	namespace:glm
mediump_int64	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef detail::int64 mediump_int64;$/;"	t	namespace:glm
mediump_int64_t	mesh_visibility/glm/glm/fwd.hpp	/^	typedef detail::int64 mediump_int64_t;$/;"	t	namespace:glm
mediump_int64_t	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef detail::int64 mediump_int64_t;$/;"	t	namespace:glm
mediump_int8	mesh_visibility/glm/glm/fwd.hpp	/^	typedef detail::int8 mediump_int8;$/;"	t	namespace:glm
mediump_int8	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef detail::int8 mediump_int8;$/;"	t	namespace:glm
mediump_int8_t	mesh_visibility/glm/glm/fwd.hpp	/^	typedef detail::int8 mediump_int8_t;$/;"	t	namespace:glm
mediump_int8_t	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef detail::int8 mediump_int8_t;$/;"	t	namespace:glm
mediump_int_t	mesh_visibility/glm/glm/detail/type_int.hpp	/^	typedef signed int						mediump_int_t;$/;"	t	namespace:glm::detail
mediump_ivec1	mesh_visibility/glm/glm/gtc/vec1.hpp	/^	typedef mediump_ivec1_t			mediump_ivec1;$/;"	t	namespace:glm
mediump_ivec1_t	mesh_visibility/glm/glm/detail/type_vec.hpp	/^	typedef tvec1<int, mediump>		mediump_ivec1_t;$/;"	t	namespace:glm
mediump_ivec2	mesh_visibility/glm/glm/detail/type_vec.hpp	/^	typedef tvec2<int, mediump>		mediump_ivec2;$/;"	t	namespace:glm
mediump_ivec3	mesh_visibility/glm/glm/detail/type_vec.hpp	/^	typedef tvec3<int, mediump>		mediump_ivec3;$/;"	t	namespace:glm
mediump_ivec4	mesh_visibility/glm/glm/detail/type_vec.hpp	/^	typedef tvec4<int, mediump>		mediump_ivec4;$/;"	t	namespace:glm
mediump_mat2	mesh_visibility/glm/glm/detail/type_mat.hpp	/^	typedef tmat2x2<float, mediump>		mediump_mat2;$/;"	t	namespace:glm
mediump_mat2	mesh_visibility/glm/glm/mat2x2.hpp	/^	typedef tmat2x2<float, mediump>		mediump_mat2;$/;"	t	namespace:glm
mediump_mat2x2	mesh_visibility/glm/glm/detail/type_mat.hpp	/^	typedef tmat2x2<float, mediump>		mediump_mat2x2;$/;"	t	namespace:glm
mediump_mat2x2	mesh_visibility/glm/glm/mat2x2.hpp	/^	typedef tmat2x2<float, mediump>		mediump_mat2x2;$/;"	t	namespace:glm
mediump_mat2x3	mesh_visibility/glm/glm/detail/type_mat.hpp	/^	typedef tmat2x3<float, mediump>		mediump_mat2x3;$/;"	t	namespace:glm
mediump_mat2x3	mesh_visibility/glm/glm/mat2x3.hpp	/^	typedef tmat2x3<float, mediump>		mediump_mat2x3;$/;"	t	namespace:glm
mediump_mat2x4	mesh_visibility/glm/glm/detail/type_mat.hpp	/^	typedef tmat2x4<float, mediump>		mediump_mat2x4;$/;"	t	namespace:glm
mediump_mat2x4	mesh_visibility/glm/glm/mat2x4.hpp	/^	typedef tmat2x4<float, mediump>		mediump_mat2x4;$/;"	t	namespace:glm
mediump_mat3	mesh_visibility/glm/glm/detail/type_mat.hpp	/^	typedef tmat3x3<float, mediump>		mediump_mat3;$/;"	t	namespace:glm
mediump_mat3	mesh_visibility/glm/glm/mat3x3.hpp	/^	typedef tmat3x3<float, mediump>		mediump_mat3;$/;"	t	namespace:glm
mediump_mat3x2	mesh_visibility/glm/glm/detail/type_mat.hpp	/^	typedef tmat3x2<float, mediump>		mediump_mat3x2;$/;"	t	namespace:glm
mediump_mat3x2	mesh_visibility/glm/glm/mat3x2.hpp	/^	typedef tmat3x2<float, mediump>		mediump_mat3x2;$/;"	t	namespace:glm
mediump_mat3x3	mesh_visibility/glm/glm/detail/type_mat.hpp	/^	typedef tmat3x3<float, mediump>		mediump_mat3x3;$/;"	t	namespace:glm
mediump_mat3x3	mesh_visibility/glm/glm/mat3x3.hpp	/^	typedef tmat3x3<float, mediump>		mediump_mat3x3;$/;"	t	namespace:glm
mediump_mat3x4	mesh_visibility/glm/glm/detail/type_mat.hpp	/^	typedef tmat3x4<float, mediump>		mediump_mat3x4;$/;"	t	namespace:glm
mediump_mat3x4	mesh_visibility/glm/glm/mat3x4.hpp	/^	typedef tmat3x4<float, mediump>		mediump_mat3x4;$/;"	t	namespace:glm
mediump_mat4	mesh_visibility/glm/glm/detail/type_mat.hpp	/^	typedef tmat4x4<float, mediump>		mediump_mat4;$/;"	t	namespace:glm
mediump_mat4	mesh_visibility/glm/glm/mat4x4.hpp	/^	typedef tmat4x4<float, mediump>		mediump_mat4;$/;"	t	namespace:glm
mediump_mat4x2	mesh_visibility/glm/glm/detail/type_mat.hpp	/^	typedef tmat4x2<float, mediump>		mediump_mat4x2;$/;"	t	namespace:glm
mediump_mat4x2	mesh_visibility/glm/glm/mat4x2.hpp	/^	typedef tmat4x2<float, mediump>		mediump_mat4x2;$/;"	t	namespace:glm
mediump_mat4x3	mesh_visibility/glm/glm/detail/type_mat.hpp	/^	typedef tmat4x3<float, mediump>		mediump_mat4x3;$/;"	t	namespace:glm
mediump_mat4x3	mesh_visibility/glm/glm/mat4x3.hpp	/^	typedef tmat4x3<float, mediump>		mediump_mat4x3;$/;"	t	namespace:glm
mediump_mat4x4	mesh_visibility/glm/glm/detail/type_mat.hpp	/^	typedef tmat4x4<float, mediump>		mediump_mat4x4;$/;"	t	namespace:glm
mediump_mat4x4	mesh_visibility/glm/glm/mat4x4.hpp	/^	typedef tmat4x4<float, mediump>		mediump_mat4x4;$/;"	t	namespace:glm
mediump_quat	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tquat<float, mediump>	mediump_quat;$/;"	t	namespace:glm
mediump_u16	mesh_visibility/glm/glm/fwd.hpp	/^	typedef detail::uint16 mediump_u16;$/;"	t	namespace:glm
mediump_u16	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef detail::uint16 mediump_u16;$/;"	t	namespace:glm
mediump_u16vec1	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tvec1<u16, mediump>		mediump_u16vec1;$/;"	t	namespace:glm
mediump_u16vec2	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tvec2<u16, mediump>		mediump_u16vec2;$/;"	t	namespace:glm
mediump_u16vec3	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tvec3<u16, mediump>		mediump_u16vec3;$/;"	t	namespace:glm
mediump_u16vec4	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tvec4<u16, mediump>		mediump_u16vec4;$/;"	t	namespace:glm
mediump_u32	mesh_visibility/glm/glm/fwd.hpp	/^	typedef detail::uint32 mediump_u32;$/;"	t	namespace:glm
mediump_u32	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef detail::uint32 mediump_u32;$/;"	t	namespace:glm
mediump_u32vec1	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tvec1<u32, mediump>		mediump_u32vec1;$/;"	t	namespace:glm
mediump_u32vec2	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tvec2<u32, mediump>		mediump_u32vec2;$/;"	t	namespace:glm
mediump_u32vec3	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tvec3<u32, mediump>		mediump_u32vec3;$/;"	t	namespace:glm
mediump_u32vec4	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tvec4<u32, mediump>		mediump_u32vec4;$/;"	t	namespace:glm
mediump_u64	mesh_visibility/glm/glm/fwd.hpp	/^	typedef detail::uint64 mediump_u64;$/;"	t	namespace:glm
mediump_u64	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef detail::uint64 mediump_u64;$/;"	t	namespace:glm
mediump_u64vec1	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tvec1<u64, mediump>		mediump_u64vec1;$/;"	t	namespace:glm
mediump_u64vec2	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tvec2<u64, mediump>		mediump_u64vec2;$/;"	t	namespace:glm
mediump_u64vec3	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tvec3<u64, mediump>		mediump_u64vec3;$/;"	t	namespace:glm
mediump_u64vec4	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tvec4<u64, mediump>		mediump_u64vec4;$/;"	t	namespace:glm
mediump_u8	mesh_visibility/glm/glm/fwd.hpp	/^	typedef detail::uint8 mediump_u8;$/;"	t	namespace:glm
mediump_u8	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef detail::uint8 mediump_u8;$/;"	t	namespace:glm
mediump_u8vec1	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tvec1<u8, mediump> mediump_u8vec1;$/;"	t	namespace:glm
mediump_u8vec2	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tvec2<u8, mediump> mediump_u8vec2;$/;"	t	namespace:glm
mediump_u8vec3	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tvec3<u8, mediump> mediump_u8vec3;$/;"	t	namespace:glm
mediump_u8vec4	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tvec4<u8, mediump> mediump_u8vec4;$/;"	t	namespace:glm
mediump_uint	mesh_visibility/glm/glm/detail/type_int.hpp	/^	typedef detail::mediump_uint_t			mediump_uint;$/;"	t	namespace:glm
mediump_uint16	mesh_visibility/glm/glm/fwd.hpp	/^	typedef detail::uint16 mediump_uint16;$/;"	t	namespace:glm
mediump_uint16	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef detail::uint16 mediump_uint16;$/;"	t	namespace:glm
mediump_uint16_t	mesh_visibility/glm/glm/fwd.hpp	/^	typedef detail::uint16 mediump_uint16_t;$/;"	t	namespace:glm
mediump_uint16_t	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef detail::uint16 mediump_uint16_t;$/;"	t	namespace:glm
mediump_uint32	mesh_visibility/glm/glm/fwd.hpp	/^	typedef detail::uint32 mediump_uint32;$/;"	t	namespace:glm
mediump_uint32	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef detail::uint32 mediump_uint32;$/;"	t	namespace:glm
mediump_uint32_t	mesh_visibility/glm/glm/fwd.hpp	/^	typedef detail::uint32 mediump_uint32_t;$/;"	t	namespace:glm
mediump_uint32_t	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef detail::uint32 mediump_uint32_t;$/;"	t	namespace:glm
mediump_uint64	mesh_visibility/glm/glm/fwd.hpp	/^	typedef detail::uint64 mediump_uint64;$/;"	t	namespace:glm
mediump_uint64	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef detail::uint64 mediump_uint64;$/;"	t	namespace:glm
mediump_uint64_t	mesh_visibility/glm/glm/fwd.hpp	/^	typedef detail::uint64 mediump_uint64_t;$/;"	t	namespace:glm
mediump_uint64_t	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef detail::uint64 mediump_uint64_t;$/;"	t	namespace:glm
mediump_uint8	mesh_visibility/glm/glm/fwd.hpp	/^	typedef detail::uint8 mediump_uint8;$/;"	t	namespace:glm
mediump_uint8	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef detail::uint8 mediump_uint8;$/;"	t	namespace:glm
mediump_uint8_t	mesh_visibility/glm/glm/fwd.hpp	/^	typedef detail::uint8 mediump_uint8_t;$/;"	t	namespace:glm
mediump_uint8_t	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef detail::uint8 mediump_uint8_t;$/;"	t	namespace:glm
mediump_uint_t	mesh_visibility/glm/glm/detail/type_int.hpp	/^	typedef unsigned int					mediump_uint_t;$/;"	t	namespace:glm::detail
mediump_umat2	mesh_visibility/glm/glm/gtc/matrix_integer.hpp	/^	typedef tmat2x2<uint, mediump>			mediump_umat2;$/;"	t	namespace:glm
mediump_umat2x2	mesh_visibility/glm/glm/gtc/matrix_integer.hpp	/^	typedef tmat2x2<uint, mediump>			mediump_umat2x2;$/;"	t	namespace:glm
mediump_umat2x3	mesh_visibility/glm/glm/gtc/matrix_integer.hpp	/^	typedef tmat2x3<uint, mediump>			mediump_umat2x3;$/;"	t	namespace:glm
mediump_umat2x4	mesh_visibility/glm/glm/gtc/matrix_integer.hpp	/^	typedef tmat2x4<uint, mediump>			mediump_umat2x4;$/;"	t	namespace:glm
mediump_umat3	mesh_visibility/glm/glm/gtc/matrix_integer.hpp	/^	typedef tmat3x3<uint, mediump>			mediump_umat3;$/;"	t	namespace:glm
mediump_umat3x2	mesh_visibility/glm/glm/gtc/matrix_integer.hpp	/^	typedef tmat3x2<uint, mediump>			mediump_umat3x2;$/;"	t	namespace:glm
mediump_umat3x3	mesh_visibility/glm/glm/gtc/matrix_integer.hpp	/^	typedef tmat3x3<uint, mediump>			mediump_umat3x3;$/;"	t	namespace:glm
mediump_umat3x4	mesh_visibility/glm/glm/gtc/matrix_integer.hpp	/^	typedef tmat3x4<uint, mediump>			mediump_umat3x4;$/;"	t	namespace:glm
mediump_umat4	mesh_visibility/glm/glm/gtc/matrix_integer.hpp	/^	typedef tmat4x4<uint, mediump>			mediump_umat4;$/;"	t	namespace:glm
mediump_umat4x2	mesh_visibility/glm/glm/gtc/matrix_integer.hpp	/^	typedef tmat4x2<uint, mediump>			mediump_umat4x2;$/;"	t	namespace:glm
mediump_umat4x3	mesh_visibility/glm/glm/gtc/matrix_integer.hpp	/^	typedef tmat4x3<uint, mediump>			mediump_umat4x3;$/;"	t	namespace:glm
mediump_umat4x4	mesh_visibility/glm/glm/gtc/matrix_integer.hpp	/^	typedef tmat4x4<uint, mediump>			mediump_umat4x4;$/;"	t	namespace:glm
mediump_uvec1	mesh_visibility/glm/glm/gtc/vec1.hpp	/^	typedef mediump_uvec1_t			mediump_uvec1;$/;"	t	namespace:glm
mediump_uvec1_t	mesh_visibility/glm/glm/detail/type_vec.hpp	/^	typedef tvec1<uint, mediump>	mediump_uvec1_t;$/;"	t	namespace:glm
mediump_uvec2	mesh_visibility/glm/glm/detail/type_vec.hpp	/^	typedef tvec2<uint, mediump>	mediump_uvec2;$/;"	t	namespace:glm
mediump_uvec3	mesh_visibility/glm/glm/detail/type_vec.hpp	/^	typedef tvec3<uint, mediump>	mediump_uvec3;$/;"	t	namespace:glm
mediump_uvec4	mesh_visibility/glm/glm/detail/type_vec.hpp	/^	typedef tvec4<uint, mediump>	mediump_uvec4;$/;"	t	namespace:glm
mediump_vec1	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tvec1<float, mediump> mediump_vec1;$/;"	t	namespace:glm
mediump_vec1	mesh_visibility/glm/glm/gtc/vec1.hpp	/^	typedef mediump_vec1_t			mediump_vec1;$/;"	t	namespace:glm
mediump_vec1_t	mesh_visibility/glm/glm/detail/type_vec.hpp	/^	typedef tvec1<float, mediump>	mediump_vec1_t;$/;"	t	namespace:glm
mediump_vec2	mesh_visibility/glm/glm/detail/type_vec.hpp	/^	typedef tvec2<float, mediump>	mediump_vec2;$/;"	t	namespace:glm
mediump_vec2	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tvec2<float, mediump> mediump_vec2;$/;"	t	namespace:glm
mediump_vec3	mesh_visibility/glm/glm/detail/type_vec.hpp	/^	typedef tvec3<float, mediump>	mediump_vec3;$/;"	t	namespace:glm
mediump_vec3	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tvec3<float, mediump> mediump_vec3;$/;"	t	namespace:glm
mediump_vec4	mesh_visibility/glm/glm/detail/type_vec.hpp	/^	typedef tvec4<float, mediump>	mediump_vec4;$/;"	t	namespace:glm
mediump_vec4	mesh_visibility/glm/glm/fwd.hpp	/^	typedef tvec4<float, mediump> mediump_vec4;$/;"	t	namespace:glm
mergeAdjacentPlanes	mesh_partition/partition.cpp	/^void Partition::mergeAdjacentPlanes()$/;"	f	class:Partition
mergeClusters	mesh_partition/partition.cpp	/^void Partition::mergeClusters(int c1, int c2)$/;"	f	class:Partition
mergeIslandClusters	mesh_partition/partition.cpp	/^void Partition::mergeIslandClusters()$/;"	f	class:Partition
mergeIslandComponentsInCluster	mesh_partition/partition.cpp	/^void Partition::mergeIslandComponentsInCluster(int original_cidx, vector<unordered_set<int>>& connected_components)$/;"	f	class:Partition
mergeOnce	mesh_partition/partition.cpp	/^bool Partition::mergeOnce()$/;"	f	class:Partition
mesh_suffix_	mesh_visibility/mesh_visibility.h	/^	string mesh_suffix_;$/;"	m	class:MeshVisibility
message	mesh_partition/heap/mixmsg.h	/^    const char *message;$/;"	m	class:MxMsgInfo
min	mesh_visibility/glm/glm/detail/_fixes.hpp	42;"	d
minx	mesh_texture_opt/mesh_opt.h	/^        int minx, miny, width, height;  \/\/ bounding box parameters$/;"	m	struct:RGBDMeshOpt::TreeNode
miny	mesh_texture_opt/mesh_opt.h	/^        int minx, miny, width, height;  \/\/ bounding box parameters$/;"	m	struct:RGBDMeshOpt::TreeNode
mod289	mesh_visibility/glm/glm/detail/_noise.hpp	/^	GLM_FUNC_QUALIFIER T mod289(T const & x)$/;"	f	namespace:glm::detail
mxmsg_handler	mesh_partition/heap/mixmsg.h	/^typedef bool (*mxmsg_handler)(MxMsgInfo *);$/;"	t
n_	mesh_partition/qemquadrics.h	/^    int n_;  \/\/ not-in-use currently$/;"	m	class:QEMQuadrics
nbr_clusters	mesh_partition/partition.h	/^        unordered_set<int> nbr_clusters;$/;"	m	struct:Partition::Cluster
nbr_clusters	mesh_texture_opt/mesh_opt.h	/^        unordered_set<int> faces, nbr_clusters;  \/\/ neighbor clusters$/;"	m	struct:RGBDMeshOpt::Cluster
nbr_edges	mesh_partition/partition.h	/^        vector<Edge*> nbr_edges;$/;"	m	struct:Partition::Vertex
nbr_faces	mesh_partition/partition.h	/^        unordered_set<int> nbr_faces;$/;"	m	struct:Partition::Face
nbr_faces	mesh_partition/partition.h	/^        unordered_set<int> nbr_vertices, nbr_faces;$/;"	m	struct:Partition::Vertex
nbr_faces	mesh_texture_opt/mesh_opt.h	/^        unordered_set<int> nbr_faces, visible_frames;$/;"	m	struct:RGBDMeshOpt::Face
nbr_faces	mesh_texture_opt/mesh_opt.h	/^        unordered_set<int> nbr_vertices, nbr_faces, visible_frames;$/;"	m	struct:RGBDMeshOpt::Vertex
nbr_vertices	mesh_partition/partition.h	/^        unordered_set<int> nbr_vertices, nbr_faces;$/;"	m	struct:Partition::Vertex
nbr_vertices	mesh_texture_opt/mesh_opt.h	/^        unordered_set<int> nbr_vertices, nbr_faces, visible_frames;$/;"	m	struct:RGBDMeshOpt::Vertex
new_face_num_	mesh_partition/partition.h	/^    int new_vertex_num_, new_face_num_;$/;"	m	class:Partition
new_vertex_num_	mesh_partition/partition.h	/^    int new_vertex_num_, new_face_num_;$/;"	m	class:Partition
newline	mesh_visibility/glm/glm/gtx/io.hpp	/^			char_type  newline;$/;"	m	class:glm::io::format_punct
nice	mesh_visibility/glm/glm/detail/type_gentype.hpp	/^		nice,$/;"	e	enum:glm::profile
normal	mesh_texture_opt/mesh_opt.h	/^        Vector3d normal, center, opt_normal, opt_center, last_normal;$/;"	m	struct:RGBDMeshOpt::Cluster
normal	mesh_visibility/glm/glm/detail/dummy.cpp	/^	glm::vec3 normal;$/;"	m	struct:intersection	file:
normal	mesh_visibility/mesh_visibility.h	/^	glm::vec3 normal;$/;"	m	struct:Vertex
normal_	common/covariance.h	/^    Vector3d normal_;$/;"	m	class:CovObj
normalizeDotA	mesh_visibility/glm/glm/detail/dummy.cpp	/^T normalizeDotA(vecType<T, P> const & x, vecType<T, P> const & y)$/;"	f
normalizeDotB	mesh_visibility/glm/glm/detail/dummy.cpp	/^T normalizeDotB(vecType<T, P> const & x, vecType<T, P> const & y)$/;"	f
normalizeDotC	mesh_visibility/glm/glm/detail/dummy.cpp	/^typename vecType::value_type normalizeDotC(vecType const & a, vecType const & b)$/;"	f
not_in_heap	mesh_partition/heap/MxHeap.h	/^    inline void not_in_heap() { token = -47; }$/;"	f	class:MxHeapable
not_in_heap	mesh_partition/myheap.h	/^    inline void not_in_heap() { token = -47; }$/;"	f	class:MxHeapable
null	mesh_visibility/glm/glm/detail/type_gentype.hpp	/^		enum ctor{null};$/;"	e	enum:glm::detail::genType::ctor
number_of_elements_	mesh_visibility/glm/glm/gtx/range.hpp	/^	detail::component_count_t number_of_elements_(genType const & m){$/;"	f	namespace:glm::detail
number_of_elements_	mesh_visibility/glm/glm/gtx/range.hpp	/^	detail::component_count_t number_of_elements_(tvec2<T, P> const & v){$/;"	f	namespace:glm::detail
number_of_elements_	mesh_visibility/glm/glm/gtx/range.hpp	/^	detail::component_count_t number_of_elements_(tvec3<T, P> const & v){$/;"	f	namespace:glm::detail
number_of_elements_	mesh_visibility/glm/glm/gtx/range.hpp	/^	detail::component_count_t number_of_elements_(tvec4<T, P> const & v){$/;"	f	namespace:glm::detail
obj_folder_	mesh_visibility/mesh_visibility.h	/^	string obj_folder_;$/;"	m	class:MeshVisibility
operator ()	mesh_partition/heap/MxBlock.h	/^    T &operator()(int i) { return (*this)[i]; }$/;"	f	class:MxBlock
operator ()	mesh_partition/heap/MxBlock.h	/^    const T &operator()(int i) const { return (*this)[i]; }$/;"	f	class:MxBlock
operator ()	mesh_partition/qemquadrics.h	/^    double operator()(const Vector3d& v) const { return evaluate(v); }$/;"	f	class:QEMQuadrics
operator ()	mesh_visibility/glm/glm/detail/_swizzle.hpp	/^		GLM_FUNC_QUALIFIER V operator ()()  const { return V(this->elem(E0), this->elem(E1)); }$/;"	f	struct:glm::detail::_swizzle_base1
operator ()	mesh_visibility/glm/glm/detail/_swizzle.hpp	/^		GLM_FUNC_QUALIFIER V operator ()()  const { return V(this->elem(E0), this->elem(E1), this->elem(E2)); }$/;"	f	struct:glm::detail::_swizzle_base1
operator ()	mesh_visibility/glm/glm/detail/_swizzle.hpp	/^		GLM_FUNC_QUALIFIER V operator ()()  const { return V(this->elem(E0), this->elem(E1), this->elem(E2), this->elem(E3)); }$/;"	f	struct:glm::detail::_swizzle_base1
operator *=	mesh_partition/qemquadrics.h	/^    QEMQuadrics& operator*=(const double s)$/;"	f	class:QEMQuadrics
operator *=	mesh_visibility/glm/glm/detail/_swizzle.hpp	/^		GLM_FUNC_QUALIFIER void operator *= (const VecType& that)$/;"	f	struct:glm::detail::_swizzle_base2
operator +=	common/covariance.cpp	/^CovObj &CovObj::operator+=(const CovObj &Q)$/;"	f	class:CovObj
operator +=	mesh_partition/qemquadrics.h	/^    QEMQuadrics& operator+=(const QEMQuadrics& Q)$/;"	f	class:QEMQuadrics
operator +=	mesh_visibility/glm/glm/detail/_swizzle.hpp	/^		GLM_FUNC_QUALIFIER void operator += (const VecType& that)$/;"	f	struct:glm::detail::_swizzle_base2
operator -=	common/covariance.cpp	/^CovObj &CovObj::operator-=(const CovObj &Q)$/;"	f	class:CovObj
operator -=	mesh_partition/qemquadrics.h	/^    QEMQuadrics& operator-=(const QEMQuadrics& Q)$/;"	f	class:QEMQuadrics
operator -=	mesh_visibility/glm/glm/detail/_swizzle.hpp	/^		GLM_FUNC_QUALIFIER void operator -= (const VecType& that)$/;"	f	struct:glm::detail::_swizzle_base2
operator /=	mesh_visibility/glm/glm/detail/_swizzle.hpp	/^		GLM_FUNC_QUALIFIER void operator \/= (const VecType& that)$/;"	f	struct:glm::detail::_swizzle_base2
operator =	common/covariance.cpp	/^CovObj &CovObj::operator=(const CovObj &Q)$/;"	f	class:CovObj
operator =	mesh_partition/qemquadrics.h	/^    QEMQuadrics& operator=(const QEMQuadrics& Q)$/;"	f	class:QEMQuadrics
operator =	mesh_visibility/glm/glm/detail/_swizzle.hpp	/^		GLM_FUNC_QUALIFIER _swizzle_base2& operator= (Stub const &) { return *this; }$/;"	f	struct:glm::detail::_swizzle_base2
operator =	mesh_visibility/glm/glm/detail/_swizzle.hpp	/^		GLM_FUNC_QUALIFIER _swizzle_base2& operator= (const ValueType& t)$/;"	f	struct:glm::detail::_swizzle_base2
operator =	mesh_visibility/glm/glm/detail/_swizzle.hpp	/^		GLM_FUNC_QUALIFIER _swizzle_base2& operator= (const VecType& that)$/;"	f	struct:glm::detail::_swizzle_base2
operator ==	common/covariance.cpp	/^bool CovObj::operator==(const CovObj &Q)$/;"	f	class:CovObj
operator T *	mesh_partition/heap/MxBlock.h	/^    operator T *() { return block; }$/;"	f	class:MxBlock
operator VecType	mesh_visibility/glm/glm/detail/_swizzle.hpp	/^		GLM_FUNC_QUALIFIER operator VecType () const { return (*this)(); }$/;"	f	struct:glm::detail::_swizzle
operator []	mesh_partition/heap/MxBlock.h	/^    T &operator[](int i) { return block[i]; }$/;"	f	class:MxBlock
operator []	mesh_partition/heap/MxBlock.h	/^    const T &operator[](int i) const { return block[i]; }$/;"	f	class:MxBlock
operator []	mesh_visibility/glm/glm/detail/_swizzle.hpp	/^		GLM_FUNC_QUALIFIER value_type  operator[]  (size_t i) const$/;"	f	struct:glm::detail::_swizzle_base2
operator []	mesh_visibility/glm/glm/detail/_swizzle.hpp	/^		GLM_FUNC_QUALIFIER value_type& operator[]  (size_t i)$/;"	f	struct:glm::detail::_swizzle_base2
operator const T *	mesh_partition/heap/MxBlock.h	/^    operator const T *() const { return block; }$/;"	f	class:MxBlock
operator const T *	mesh_partition/heap/MxBlock.h	/^    operator const T *() { return block; }$/;"	f	class:MxBlock
operator delete	mesh_partition/heap/MxBlock.h	/^inline void operator delete(void *mem, void *spot, _array_alloc_policy) {}$/;"	f
operator new	mesh_partition/heap/MxBlock.h	/^inline void *operator new(size_t, void *p, _array_alloc_policy)$/;"	f
opt_R	mesh_texture_opt/mesh_opt.h	/^        Matrix3d R, inv_R, opt_R, opt_inv_R;$/;"	m	struct:RGBDMeshOpt::Frame
opt_T	mesh_texture_opt/mesh_opt.h	/^        Matrix4d T, inv_T, opt_T, opt_inv_T, lastT;  \/\/ camera pose parameters$/;"	m	struct:RGBDMeshOpt::Frame
opt_center	mesh_texture_opt/mesh_opt.h	/^        Vector3d normal, center, opt_normal, opt_center, last_normal;$/;"	m	struct:RGBDMeshOpt::Cluster
opt_fidx	mesh_texture_opt/mesh_opt.h	/^        int opt_fidx;  \/\/ best frame, -1 denotes not visible to any frame$/;"	m	struct:RGBDMeshOpt::Texel
opt_graycolor	mesh_texture_opt/mesh_opt.h	/^        double opt_graycolor;$/;"	m	struct:RGBDMeshOpt::Texel
opt_inv_R	mesh_texture_opt/mesh_opt.h	/^        Matrix3d R, inv_R, opt_R, opt_inv_R;$/;"	m	struct:RGBDMeshOpt::Frame
opt_inv_T	mesh_texture_opt/mesh_opt.h	/^        Matrix4d T, inv_T, opt_T, opt_inv_T, lastT;  \/\/ camera pose parameters$/;"	m	struct:RGBDMeshOpt::Frame
opt_inv_t	mesh_texture_opt/mesh_opt.h	/^        Vector3d t, opt_t, inv_t, opt_inv_t;$/;"	m	struct:RGBDMeshOpt::Frame
opt_normal	mesh_texture_opt/mesh_opt.h	/^        Vector3d normal, center, opt_normal, opt_center, last_normal;$/;"	m	struct:RGBDMeshOpt::Cluster
opt_pt3	mesh_texture_opt/mesh_opt.h	/^        Vector3d pt3, opt_pt3;$/;"	m	struct:RGBDMeshOpt::Vertex
opt_rgb	mesh_texture_opt/mesh_opt.h	/^        Vector3f opt_rgb;$/;"	m	struct:RGBDMeshOpt::Texel
opt_t	mesh_texture_opt/mesh_opt.h	/^        Vector3d t, opt_t, inv_t, opt_inv_t;$/;"	m	struct:RGBDMeshOpt::Frame
opt_w	mesh_texture_opt/mesh_opt.h	/^        double w, opt_w, last_w;$/;"	m	struct:RGBDMeshOpt::Cluster
optimize	mesh_partition/qemquadrics.cpp	/^bool QEMQuadrics::optimize(Vector3d& v, double& energy)$/;"	f	class:QEMQuadrics
optimizePlanes	mesh_texture_opt/mesh_opt.cpp	/^void RGBDMeshOpt::optimizePlanes()$/;"	f	class:RGBDMeshOpt
optimizePoses	mesh_texture_opt/mesh_opt.cpp	/^void RGBDMeshOpt::optimizePoses()$/;"	f	class:RGBDMeshOpt
order	mesh_visibility/glm/glm/gtx/io.hpp	/^			order_type order;$/;"	m	class:glm::io::format_punct
order	mesh_visibility/glm/glm/gtx/io.hpp	/^		struct order$/;"	s	namespace:glm::io
order_type	mesh_visibility/glm/glm/gtx/io.hpp	/^		enum order_type { column_major, row_major};$/;"	g	namespace:glm::io
ori_texture_images_	mesh_visibility/mesh_visibility.h	/^	vector<cv::Mat> ori_texture_images_;$/;"	m	class:MeshVisibility
outerProduct_trait	mesh_visibility/glm/glm/detail/func_matrix.hpp	/^	struct outerProduct_trait<T, P, tvec2, tvec2>$/;"	s	namespace:glm::detail
outerProduct_trait	mesh_visibility/glm/glm/detail/func_matrix.hpp	/^	struct outerProduct_trait<T, P, tvec2, tvec3>$/;"	s	namespace:glm::detail
outerProduct_trait	mesh_visibility/glm/glm/detail/func_matrix.hpp	/^	struct outerProduct_trait<T, P, tvec2, tvec4>$/;"	s	namespace:glm::detail
outerProduct_trait	mesh_visibility/glm/glm/detail/func_matrix.hpp	/^	struct outerProduct_trait<T, P, tvec3, tvec2>$/;"	s	namespace:glm::detail
outerProduct_trait	mesh_visibility/glm/glm/detail/func_matrix.hpp	/^	struct outerProduct_trait<T, P, tvec3, tvec3>$/;"	s	namespace:glm::detail
outerProduct_trait	mesh_visibility/glm/glm/detail/func_matrix.hpp	/^	struct outerProduct_trait<T, P, tvec3, tvec4>$/;"	s	namespace:glm::detail
outerProduct_trait	mesh_visibility/glm/glm/detail/func_matrix.hpp	/^	struct outerProduct_trait<T, P, tvec4, tvec2>$/;"	s	namespace:glm::detail
outerProduct_trait	mesh_visibility/glm/glm/detail/func_matrix.hpp	/^	struct outerProduct_trait<T, P, tvec4, tvec3>$/;"	s	namespace:glm::detail
outerProduct_trait	mesh_visibility/glm/glm/detail/func_matrix.hpp	/^	struct outerProduct_trait<T, P, tvec4, tvec4>$/;"	s	namespace:glm::detail
outerProduct_trait	mesh_visibility/glm/glm/detail/type_mat.hpp	/^	struct outerProduct_trait{};$/;"	s	namespace:glm::detail
p	mesh_visibility/glm/glm/detail/type_vec3.hpp	/^				struct{ T s, t, p; };$/;"	m	struct:glm::tvec3::__anon11::__anon14
p	mesh_visibility/glm/glm/detail/type_vec3.hpp	/^			union { T z, b, p; };$/;"	m	union:glm::tvec3::__anon17
p	mesh_visibility/glm/glm/detail/type_vec4.hpp	/^				struct { T s, t, p, q; };$/;"	m	struct:glm::tvec4::__anon1::__anon4
p	mesh_visibility/glm/glm/detail/type_vec4.hpp	/^			union { T z, b, p; };$/;"	m	union:glm::tvec4::__anon7
packAllPatches	mesh_texture_opt/mesh_opt.cpp	/^void RGBDMeshOpt::packAllPatches()$/;"	f	class:RGBDMeshOpt
packPatchRecursive	mesh_texture_opt/mesh_opt.cpp	/^bool RGBDMeshOpt::packPatchRecursive(std::unique_ptr<TreeNode>& root, TexturePatch& patch)$/;"	f	class:RGBDMeshOpt
param_type	mesh_visibility/glm/glm/detail/type_gentype.hpp	/^		typedef TYPE<VALTYPE> const & param_type;$/;"	t	struct:glm::detail::genType
parent	mesh_partition/heap/MxHeap.h	/^    unsigned int parent(unsigned int i) { return (i - 1) \/ 2; }$/;"	f	class:MxHeap
parent	mesh_partition/myheap.h	/^    unsigned int parent(unsigned int i) { return (i - 1) \/ 2; }$/;"	f	class:MxHeap
part_type	mesh_visibility/glm/glm/gtx/dual_quaternion.hpp	/^		typedef glm::tquat<T, P> part_type;$/;"	t	struct:glm::tdualquat
patches_	mesh_texture_opt/mesh_opt.h	/^    vector<TexturePatch> patches_;          \/\/ for all clusters$/;"	m	class:RGBDMeshOpt
permute	mesh_visibility/glm/glm/detail/_noise.hpp	/^	GLM_FUNC_QUALIFIER T permute(T const & x)$/;"	f	namespace:glm::detail
permute	mesh_visibility/glm/glm/detail/_noise.hpp	/^	GLM_FUNC_QUALIFIER tvec2<T, P> permute(tvec2<T, P> const & x)$/;"	f	namespace:glm::detail
permute	mesh_visibility/glm/glm/detail/_noise.hpp	/^	GLM_FUNC_QUALIFIER tvec3<T, P> permute(tvec3<T, P> const & x)$/;"	f	namespace:glm::detail
permute	mesh_visibility/glm/glm/detail/_noise.hpp	/^	GLM_FUNC_QUALIFIER tvec4<T, P> permute(tvec4<T, P> const & x)$/;"	f	namespace:glm::detail
pixel_gradients	mesh_texture_opt/mesh_opt.h	/^        vector<vector<Vector2d>> pixel_gradients;  \/\/ grayscale color gradients, row-major with size color_height x color_width$/;"	m	struct:RGBDMeshOpt::Frame
pixels	mesh_visibility/glfw/glfw3.h	/^    unsigned char* pixels;$/;"	m	struct:GLFWimage
place	mesh_partition/heap/MxHeap.cxx	/^inline void MxHeap::place(MxHeapable *x, unsigned int i)$/;"	f	class:MxHeap
place	mesh_partition/myheap.h	/^    void place(MxHeapable *x, unsigned int i)$/;"	f	class:MxHeap
pointer	mesh_visibility/glm/glm/detail/type_gentype.hpp	/^		typedef TYPE<VALTYPE> * pointer;$/;"	t	struct:glm::detail::genType
pointer_const	mesh_visibility/glm/glm/detail/type_gentype.hpp	/^		typedef TYPE<VALTYPE> * const pointer_const;$/;"	t	struct:glm::detail::genType
pop	mesh_partition/myheap.h	/^    MxHeapable *pop() { return extract(); }$/;"	f	class:MxHeap
pos	mesh_visibility/mesh_visibility.h	/^	glm::vec3 pos;\/\/ position$/;"	m	struct:Vertex
position	mesh_visibility/glm/glm/detail/dummy.cpp	/^	glm::vec4 position; \/\/ Ppli$/;"	m	struct:light	file:
position	mesh_visibility/glm/glm/detail/dummy.cpp	/^	glm::vec4 position;$/;"	m	struct:intersection	file:
prec	mesh_visibility/glm/glm/detail/type_mat2x2.hpp	/^			static GLM_RELAXED_CONSTEXPR precision prec = P;$/;"	m	struct:glm::tmat2x2
prec	mesh_visibility/glm/glm/detail/type_mat2x3.hpp	/^			static GLM_RELAXED_CONSTEXPR precision prec = P;$/;"	m	struct:glm::tmat2x3
prec	mesh_visibility/glm/glm/detail/type_mat2x4.hpp	/^			static GLM_RELAXED_CONSTEXPR precision prec = P;$/;"	m	struct:glm::tmat2x4
prec	mesh_visibility/glm/glm/detail/type_mat3x2.hpp	/^			static GLM_RELAXED_CONSTEXPR precision prec = P;$/;"	m	struct:glm::tmat3x2
prec	mesh_visibility/glm/glm/detail/type_mat3x3.hpp	/^			static GLM_RELAXED_CONSTEXPR precision prec = P;$/;"	m	struct:glm::tmat3x3
prec	mesh_visibility/glm/glm/detail/type_mat3x4.hpp	/^			static GLM_RELAXED_CONSTEXPR precision prec = P;$/;"	m	struct:glm::tmat3x4
prec	mesh_visibility/glm/glm/detail/type_mat4x2.hpp	/^			static GLM_RELAXED_CONSTEXPR precision prec = P;$/;"	m	struct:glm::tmat4x2
prec	mesh_visibility/glm/glm/detail/type_mat4x3.hpp	/^			static GLM_RELAXED_CONSTEXPR precision prec = P;$/;"	m	struct:glm::tmat4x3
prec	mesh_visibility/glm/glm/detail/type_mat4x4.hpp	/^			static GLM_RELAXED_CONSTEXPR precision prec = P;$/;"	m	struct:glm::tmat4x4
prec	mesh_visibility/glm/glm/detail/type_vec1.hpp	/^			static GLM_RELAXED_CONSTEXPR precision prec = P;$/;"	m	struct:glm::tvec1
prec	mesh_visibility/glm/glm/detail/type_vec2.hpp	/^			static GLM_RELAXED_CONSTEXPR precision prec = P;$/;"	m	struct:glm::tvec2
prec	mesh_visibility/glm/glm/detail/type_vec3.hpp	/^			static GLM_RELAXED_CONSTEXPR precision prec = P;$/;"	m	struct:glm::tvec3
prec	mesh_visibility/glm/glm/detail/type_vec4.hpp	/^			static GLM_RELAXED_CONSTEXPR precision prec = P;$/;"	m	struct:glm::tvec4
prec	mesh_visibility/glm/glm/gtc/quaternion.hpp	/^			static GLM_RELAXED_CONSTEXPR precision prec = P;$/;"	m	struct:glm::tquat
prec	mesh_visibility/glm/glm/gtx/dual_quaternion.hpp	/^			static GLM_RELAXED_CONSTEXPR precision prec = P;$/;"	m	struct:glm::tdualquat
precision	mesh_visibility/glm/glm/detail/precision.hpp	/^	enum precision$/;"	g	namespace:glm
precision	mesh_visibility/glm/glm/gtx/io.hpp	/^			unsigned   precision;$/;"	m	class:glm::io::format_punct
precision	mesh_visibility/glm/glm/gtx/io.hpp	/^		struct precision$/;"	s	namespace:glm::io
precision_	mesh_visibility/glm/glm/gtx/io.hpp	/^			streamsize_type precision_;$/;"	m	class:glm::io::basic_state_saver
prepareImageBuffer	mesh_visibility/mesh_visibility.cpp	/^void MeshVisibility::prepareImageBuffer()$/;"	f	class:MeshVisibility
printMeshInfo	mesh_texture_opt/mesh_opt.h	/^    void printMeshInfo()$/;"	f	class:RGBDMeshOpt
printModelInfo	mesh_partition/partition.h	/^    void printModelInfo() { cout << "#Vertices: " << vertices_.size() << ", #Faces: " << faces_.size() << endl; }$/;"	f	class:Partition
printProgressBar	common/tools.h	/^inline void printProgressBar(float progress)$/;"	f
printUsage	mesh_visibility/main.cpp	/^void printUsage()$/;"	f
processIslandClusters	mesh_partition/partition.cpp	/^void Partition::processIslandClusters()$/;"	f	class:Partition
profile	mesh_visibility/glm/glm/detail/type_gentype.hpp	/^	enum profile$/;"	g	namespace:glm
programID_	mesh_visibility/shader.h	/^    unsigned int programID_;$/;"	m	class:Shader
program_mode_	mesh_visibility/main.cpp	/^ProgramMode program_mode_ = RENDER_MODEL;$/;"	v
proj_graycolor	mesh_texture_opt/mesh_opt.h	/^        vector<double> proj_graycolor;            \/\/ grayscale color of each 3D texel projected in 2D, used in pose opt too$/;"	m	struct:RGBDMeshOpt::TexturePatch
projectCameraPointToFrame	mesh_texture_opt/mesh_opt.cpp	/^bool RGBDMeshOpt::projectCameraPointToFrame(const Vector3d& pt3, CalibrationParams& calib)$/;"	f	class:RGBDMeshOpt
projectCameraPointToFrame	mesh_texture_opt/mesh_opt.cpp	/^bool RGBDMeshOpt::projectCameraPointToFrame(const Vector3d& pt3, CalibrationParams& calib, Vector2d& pt2)$/;"	f	class:RGBDMeshOpt
projectGlobalPointToFrame	mesh_texture_opt/mesh_opt.cpp	/^bool RGBDMeshOpt::projectGlobalPointToFrame(const Vector3d& pt3, CalibrationParams& calib, const Matrix4d& inv_T)$/;"	f	class:RGBDMeshOpt
projectGlobalPointToFrame	mesh_texture_opt/mesh_opt.cpp	/^bool RGBDMeshOpt::projectGlobalPointToFrame(const Vector3d& pt3, CalibrationParams& calib, const Matrix4d& inv_T, Vector2d& pt2)$/;"	f	class:RGBDMeshOpt
pt	mesh_partition/partition.h	/^        Vector3d pt;$/;"	m	struct:Partition::Vertex
pt2	mesh_texture_opt/mesh_opt.h	/^        Vector2d pt2;$/;"	m	struct:RGBDMeshOpt::Vertex
pt2_color	mesh_texture_opt/mesh_opt.h	/^        Vector2d pt2_color;$/;"	m	struct:RGBDMeshOpt::ImgPixel
pt3	mesh_texture_opt/mesh_opt.h	/^        Vector3d pt3, opt_pt3;$/;"	m	struct:RGBDMeshOpt::Vertex
pt3_global	mesh_texture_opt/mesh_opt.h	/^        Vector3d pt3_global, pt3_proj;$/;"	m	struct:RGBDMeshOpt::Texel
pt3_proj	mesh_texture_opt/mesh_opt.h	/^        Vector3d pt3_global, pt3_proj;$/;"	m	struct:RGBDMeshOpt::Texel
push_back	mesh_partition/heap/MxDynBlock.h	/^    void push_back(const T& t) { add(t); }$/;"	f	class:MxDynBlock
q	mesh_visibility/glm/glm/detail/type_vec4.hpp	/^				struct { T s, t, p, q; };$/;"	m	struct:glm::tvec4::__anon1::__anon4
q	mesh_visibility/glm/glm/detail/type_vec4.hpp	/^			union { T w, a, q; };$/;"	m	union:glm::tvec4::__anon8
quadraticAttenuation	mesh_visibility/glm/glm/detail/dummy.cpp	/^	float quadraticAttenuation;\/\/ K2$/;"	m	struct:light	file:
quat	mesh_visibility/glm/glm/fwd.hpp	/^	typedef highp_quat			quat;$/;"	t	namespace:glm
quat	mesh_visibility/glm/glm/fwd.hpp	/^	typedef lowp_quat			quat;$/;"	t	namespace:glm
quat	mesh_visibility/glm/glm/fwd.hpp	/^	typedef mediump_quat		quat;$/;"	t	namespace:glm
qword	mesh_visibility/glm/glm/gtx/raw_data.hpp	/^	typedef detail::uint64		qword;$/;"	t	namespace:glm
r	mesh_visibility/glm/glm/detail/type_vec1.hpp	/^				T r;$/;"	m	union:glm::tvec1::__anon9
r	mesh_visibility/glm/glm/detail/type_vec1.hpp	/^			union {T x, r, s;};$/;"	m	union:glm::tvec1::__anon10
r	mesh_visibility/glm/glm/detail/type_vec2.hpp	/^				struct{ T r, g; };$/;"	m	struct:glm::tvec2::__anon18::__anon20
r	mesh_visibility/glm/glm/detail/type_vec2.hpp	/^			union {T x, r, s;};$/;"	m	union:glm::tvec2::__anon22
r	mesh_visibility/glm/glm/detail/type_vec3.hpp	/^				struct{ T r, g, b; };$/;"	m	struct:glm::tvec3::__anon11::__anon13
r	mesh_visibility/glm/glm/detail/type_vec3.hpp	/^			union { T x, r, s; };$/;"	m	union:glm::tvec3::__anon15
r	mesh_visibility/glm/glm/detail/type_vec4.hpp	/^				struct { T r, g, b, a; };$/;"	m	struct:glm::tvec4::__anon1::__anon3
r	mesh_visibility/glm/glm/detail/type_vec4.hpp	/^			union { T x, r, s; };$/;"	m	union:glm::tvec4::__anon5
random1	mesh_partition/heap/gfx.h	/^  inline double random1() { return (double)rand() \/ (double)RAND_MAX; }$/;"	f
random1	mesh_partition/heap/gfx.h	/^  inline double random1() { return (double)random() \/ (double)LONG_MAX; }$/;"	f
random_byte	mesh_partition/heap/gfx.h	/^  inline char   random_byte() { return (char)(rand() & 0xff); }$/;"	f
random_byte	mesh_partition/heap/gfx.h	/^  inline char   random_byte() { return (char)(random() & 0xff); }$/;"	f
readCameraIntrinsicsFile	mesh_visibility/mesh_visibility.cpp	/^bool MeshVisibility::readCameraIntrinsicsFile(const string filename)$/;"	f	class:MeshVisibility
readCameraParamFile	mesh_texture_opt/mesh_opt.cpp	/^bool RGBDMeshOpt::readCameraParamFile(const string& filename)$/;"	f	class:RGBDMeshOpt
readCameraPoseFile	mesh_texture_opt/mesh_opt.cpp	/^bool RGBDMeshOpt::readCameraPoseFile(const string& filename, Matrix4d& T)$/;"	f	class:RGBDMeshOpt
readCameraPoses	mesh_visibility/mesh_visibility.cpp	/^bool MeshVisibility::readCameraPoses(const string filepath, int start_fidx, int end_fidx)$/;"	f	class:MeshVisibility
readClusterFile	mesh_partition/partition.cpp	/^bool Partition::readClusterFile(const std::string& filename)$/;"	f	class:Partition
readClusterFile	mesh_texture_opt/mesh_opt.cpp	/^bool RGBDMeshOpt::readClusterFile(const std::string& filename)$/;"	f	class:RGBDMeshOpt
readColorImg	mesh_texture_opt/mesh_opt.cpp	/^bool RGBDMeshOpt::readColorImg(const string& filename, cv::Mat& img)$/;"	f	class:RGBDMeshOpt
readDepthImg	mesh_texture_opt/mesh_opt.cpp	/^bool RGBDMeshOpt::readDepthImg(const string& filename, cv::Mat& img)$/;"	f	class:RGBDMeshOpt
readImageBlurrinessFile	mesh_texture_opt/mesh_opt.cpp	/^bool RGBDMeshOpt::readImageBlurrinessFile(const string& filename)$/;"	f	class:RGBDMeshOpt
readMTLandTextureImages	mesh_visibility/mesh_visibility.cpp	/^bool MeshVisibility::readMTLandTextureImages(const string filename)$/;"	f	class:MeshVisibility
readOBJ	mesh_visibility/mesh_visibility.cpp	/^bool MeshVisibility::readOBJ(const string filename)$/;"	f	class:MeshVisibility
readPLY	mesh_partition/partition.cpp	/^bool Partition::readPLY(const std::string& filename)$/;"	f	class:Partition
readPLY	mesh_texture_opt/mesh_opt.cpp	/^bool RGBDMeshOpt::readPLY(const std::string& filename)$/;"	f	class:RGBDMeshOpt
readPLY	mesh_visibility/mesh_visibility.cpp	/^bool MeshVisibility::readPLY(const string filename)$/;"	f	class:MeshVisibility
readRGBDFrames	mesh_texture_opt/mesh_opt.cpp	/^bool RGBDMeshOpt::readRGBDFrames($/;"	f	class:RGBDMeshOpt
readVisibilityFile	mesh_texture_opt/mesh_opt.cpp	/^bool RGBDMeshOpt::readVisibilityFile(const string& filename, vector<int>& visible_vertices)$/;"	f	class:RGBDMeshOpt
real	mesh_visibility/glm/glm/gtx/dual_quaternion.hpp	/^		glm::tquat<T, P> real, dual;$/;"	m	struct:glm::tdualquat
red	mesh_visibility/glfw/glfw3.h	/^    unsigned short* red;$/;"	m	struct:GLFWgammaramp
redBits	mesh_visibility/glfw/glfw3.h	/^    int redBits;$/;"	m	struct:GLFWvidmode
ref	mesh_partition/heap/MxHeap.cxx	14;"	d	file:
reference	mesh_visibility/glm/glm/detail/type_gentype.hpp	/^		typedef TYPE<VALTYPE> & reference;$/;"	t	struct:glm::detail::genType
refreshRate	mesh_visibility/glfw/glfw3.h	/^    int refreshRate;$/;"	m	struct:GLFWvidmode
releaseHeap	mesh_partition/partition.cpp	/^void Partition::releaseHeap()$/;"	f	class:Partition
remove	mesh_partition/heap/MxDynBlock.h	/^    void remove(int i) { (*this)[i] = (*this)[--fill]; }$/;"	f	class:MxDynBlock
remove	mesh_partition/heap/MxHeap.cxx	/^MxHeapable *MxHeap::remove(MxHeapable *t)$/;"	f	class:MxHeap
remove	mesh_partition/myheap.h	/^    MxHeapable *remove(MxHeapable *t)$/;"	f	class:MxHeap
removeEdgeFromList	mesh_partition/partition.cpp	/^bool Partition::removeEdgeFromList(Edge* edge, vector<Edge*>& edgelist)$/;"	f	class:Partition
removeSmallClusters	mesh_partition/partition.cpp	/^void Partition::removeSmallClusters()$/;"	f	class:Partition
remove_inorder	mesh_partition/heap/MxDynBlock.h	/^    void remove_inorder(int i) { memmove(&(*this)[i], &(*this)[i + 1], (--fill - i) * sizeof(T)); }$/;"	f	class:MxDynBlock
reset	mesh_partition/heap/MxDynBlock.h	/^    void reset() { fill = 0; }$/;"	f	class:MxDynBlock
reset	mesh_partition/qemquadrics.h	/^    void reset()$/;"	f	class:QEMQuadrics
resize	mesh_partition/heap/MxBlock.h	/^    void resize(int n) { resize_block(n); }$/;"	f	class:MxBlock
resize_block	mesh_partition/heap/MxBlock.h	/^    void resize_block(int n)$/;"	f	class:MxBlock
right	mesh_partition/heap/MxHeap.h	/^    unsigned int right(unsigned int i) { return 2 * i + 2; }$/;"	f	class:MxHeap
right	mesh_partition/myheap.h	/^    unsigned int right(unsigned int i) { return 2 * i + 2; }$/;"	f	class:MxHeap
right	mesh_texture_opt/mesh_opt.h	/^        std::unique_ptr<TreeNode> left, right;$/;"	m	struct:RGBDMeshOpt::TreeNode
rint	mesh_partition/heap/gfx.h	/^inline double rint(double x) { return floor(x + 0.5); }$/;"	f
room_for	mesh_partition/heap/MxDynBlock.h	/^    void room_for(int len)$/;"	f	class:MxDynBlock
row_major	mesh_visibility/glm/glm/gtx/io.hpp	/^		enum order_type { column_major, row_major};$/;"	e	enum:glm::io::order_type
row_type	mesh_visibility/glm/glm/detail/type_mat2x2.hpp	/^		typedef tvec2<T, P> row_type;$/;"	t	struct:glm::tmat2x2
row_type	mesh_visibility/glm/glm/detail/type_mat2x3.hpp	/^		typedef tvec2<T, P> row_type;$/;"	t	struct:glm::tmat2x3
row_type	mesh_visibility/glm/glm/detail/type_mat2x4.hpp	/^		typedef tvec2<T, P> row_type;$/;"	t	struct:glm::tmat2x4
row_type	mesh_visibility/glm/glm/detail/type_mat3x2.hpp	/^		typedef tvec3<T, P> row_type;$/;"	t	struct:glm::tmat3x2
row_type	mesh_visibility/glm/glm/detail/type_mat3x3.hpp	/^		typedef tvec3<T, P> row_type;$/;"	t	struct:glm::tmat3x3
row_type	mesh_visibility/glm/glm/detail/type_mat3x4.hpp	/^		typedef tvec3<T, P> row_type;$/;"	t	struct:glm::tmat3x4
row_type	mesh_visibility/glm/glm/detail/type_mat4x2.hpp	/^		typedef tvec4<T, P> row_type;$/;"	t	struct:glm::tmat4x2
row_type	mesh_visibility/glm/glm/detail/type_mat4x3.hpp	/^		typedef tvec4<T, P> row_type;$/;"	t	struct:glm::tmat4x3
row_type	mesh_visibility/glm/glm/detail/type_mat4x4.hpp	/^		typedef tvec4<T, P> row_type;$/;"	t	struct:glm::tmat4x4
rows	mesh_visibility/glm/glm/detail/type_mat2x2.hpp	/^			static GLM_RELAXED_CONSTEXPR length_t rows = 2;$/;"	m	struct:glm::tmat2x2
rows	mesh_visibility/glm/glm/detail/type_mat2x3.hpp	/^			static GLM_RELAXED_CONSTEXPR length_t rows = 3;$/;"	m	struct:glm::tmat2x3
rows	mesh_visibility/glm/glm/detail/type_mat2x4.hpp	/^			static GLM_RELAXED_CONSTEXPR length_t rows = 4;$/;"	m	struct:glm::tmat2x4
rows	mesh_visibility/glm/glm/detail/type_mat3x2.hpp	/^			static GLM_RELAXED_CONSTEXPR length_t rows = 2;$/;"	m	struct:glm::tmat3x2
rows	mesh_visibility/glm/glm/detail/type_mat3x3.hpp	/^			static GLM_RELAXED_CONSTEXPR length_t rows = 3;$/;"	m	struct:glm::tmat3x3
rows	mesh_visibility/glm/glm/detail/type_mat3x4.hpp	/^			static GLM_RELAXED_CONSTEXPR length_t rows = 4;$/;"	m	struct:glm::tmat3x4
rows	mesh_visibility/glm/glm/detail/type_mat4x2.hpp	/^			static GLM_RELAXED_CONSTEXPR length_t rows = 2;$/;"	m	struct:glm::tmat4x2
rows	mesh_visibility/glm/glm/detail/type_mat4x3.hpp	/^			static GLM_RELAXED_CONSTEXPR length_t rows = 3;$/;"	m	struct:glm::tmat4x3
rows	mesh_visibility/glm/glm/detail/type_mat4x4.hpp	/^			static GLM_RELAXED_CONSTEXPR length_t rows = 4;$/;"	m	struct:glm::tmat4x4
runMerging	mesh_partition/partition.cpp	/^bool Partition::runMerging()$/;"	f	class:Partition
runMeshGeometryOpt	mesh_texture_opt/mesh_opt.cpp	/^void RGBDMeshOpt::runMeshGeometryOpt()$/;"	f	class:RGBDMeshOpt
runOptimizationPipeline	mesh_texture_opt/mesh_opt.cpp	/^void RGBDMeshOpt::runOptimizationPipeline()$/;"	f	class:RGBDMeshOpt
runPartitionPipeline	mesh_partition/partition.cpp	/^bool Partition::runPartitionPipeline()$/;"	f	class:Partition
runPlaneAndCameraPoseOpt	mesh_texture_opt/mesh_opt.cpp	/^void RGBDMeshOpt::runPlaneAndCameraPoseOpt()$/;"	f	class:RGBDMeshOpt
runPostProcessing	mesh_partition/partition.cpp	/^void Partition::runPostProcessing()$/;"	f	class:Partition
runRenderMode	mesh_visibility/main.cpp	/^void runRenderMode(MeshVisibility* mesh, int start_fidx, int end_fidx)$/;"	f
runSaveMode	mesh_visibility/main.cpp	/^void runSaveMode(MeshVisibility* mesh, int start_fidx, int end_fidx, const string& output_path)$/;"	f
runSimplification	mesh_partition/partition.cpp	/^void Partition::runSimplification()$/;"	f	class:Partition
runSwapping	mesh_partition/partition.cpp	/^void Partition::runSwapping()$/;"	f	class:Partition
run_mesh_simplification	mesh_partition/main.cpp	/^DECLARE_bool(run_mesh_simplification);$/;"	v
run_post_processing	mesh_partition/main.cpp	/^DECLARE_bool(run_post_processing);$/;"	v
s	mesh_visibility/glm/glm/detail/type_vec1.hpp	/^				T s;$/;"	m	union:glm::tvec1::__anon9
s	mesh_visibility/glm/glm/detail/type_vec1.hpp	/^			union {T x, r, s;};$/;"	m	union:glm::tvec1::__anon10
s	mesh_visibility/glm/glm/detail/type_vec2.hpp	/^				struct{ T s, t; };$/;"	m	struct:glm::tvec2::__anon18::__anon21
s	mesh_visibility/glm/glm/detail/type_vec2.hpp	/^			union {T x, r, s;};$/;"	m	union:glm::tvec2::__anon22
s	mesh_visibility/glm/glm/detail/type_vec3.hpp	/^				struct{ T s, t, p; };$/;"	m	struct:glm::tvec3::__anon11::__anon14
s	mesh_visibility/glm/glm/detail/type_vec3.hpp	/^			union { T x, r, s; };$/;"	m	union:glm::tvec3::__anon15
s	mesh_visibility/glm/glm/detail/type_vec4.hpp	/^				struct { T s, t, p, q; };$/;"	m	struct:glm::tvec4::__anon1::__anon4
s	mesh_visibility/glm/glm/detail/type_vec4.hpp	/^			union { T x, r, s; };$/;"	m	union:glm::tvec4::__anon5
saturate	mesh_visibility/glm/glm/gtx/compatibility.hpp	/^	template <typename T, precision P> GLM_FUNC_QUALIFIER T saturate(T x){return clamp(x, T(0), T(1));}														\/\/!< \\brief Returns clamp(x, 0, 1) for each component in x. (From GLM_GTX_compatibility)$/;"	f	namespace:glm
saturate	mesh_visibility/glm/glm/gtx/compatibility.hpp	/^	template <typename T, precision P> GLM_FUNC_QUALIFIER tvec2<T, P> saturate(const tvec2<T, P>& x){return clamp(x, T(0), T(1));}					\/\/!< \\brief Returns clamp(x, 0, 1) for each component in x. (From GLM_GTX_compatibility)$/;"	f	namespace:glm
saturate	mesh_visibility/glm/glm/gtx/compatibility.hpp	/^	template <typename T, precision P> GLM_FUNC_QUALIFIER tvec3<T, P> saturate(const tvec3<T, P>& x){return clamp(x, T(0), T(1));}					\/\/!< \\brief Returns clamp(x, 0, 1) for each component in x. (From GLM_GTX_compatibility)$/;"	f	namespace:glm
saturate	mesh_visibility/glm/glm/gtx/compatibility.hpp	/^	template <typename T, precision P> GLM_FUNC_QUALIFIER tvec4<T, P> saturate(const tvec4<T, P>& x){return clamp(x, T(0), T(1));}					\/\/!< \\brief Returns clamp(x, 0, 1) for each component in x. (From GLM_GTX_compatibility)$/;"	f	namespace:glm
saveColor2PNG	mesh_visibility/mesh_visibility.cpp	/^void MeshVisibility::saveColor2PNG(const string filename)$/;"	f	class:MeshVisibility
saveDepth2PNG	mesh_visibility/mesh_visibility.cpp	/^void MeshVisibility::saveDepth2PNG(const string filename)$/;"	f	class:MeshVisibility
savePLY	mesh_texture_opt/mesh_opt.cpp	/^bool RGBDMeshOpt::savePLY(const string& filename)$/;"	f	class:RGBDMeshOpt
saveTexturedMesh	mesh_texture_opt/mesh_opt.cpp	/^void RGBDMeshOpt::saveTexturedMesh(const string& obj_fname)$/;"	f	class:RGBDMeshOpt
saveVisibilityImage2Binary	mesh_visibility/mesh_visibility.cpp	/^void MeshVisibility::saveVisibilityImage2Binary(const string filename)$/;"	f	class:MeshVisibility
saveVisibleVertices2Binary	mesh_visibility/mesh_visibility.cpp	/^void MeshVisibility::saveVisibleVertices2Binary(const string filename)$/;"	f	class:MeshVisibility
separator	mesh_visibility/glm/glm/gtx/io.hpp	/^			char_type  separator;$/;"	m	class:glm::io::format_punct
setBool	mesh_visibility/shader.h	/^    void setBool(const std::string &name, bool value) const$/;"	f	class:Shader
setCalibMatrix	mesh_texture_opt/mesh_opt.h	/^        void setCalibMatrix()$/;"	f	struct:RGBDMeshOpt::CalibrationParams
setFloat	mesh_visibility/shader.h	/^    void setFloat(const std::string &name, float value) const$/;"	f	class:Shader
setInt	mesh_visibility/shader.h	/^    void setInt(const std::string &name, int value) const$/;"	f	class:Shader
setMat2	mesh_visibility/shader.h	/^    void setMat2(const std::string &name, const glm::mat2 &mat) const$/;"	f	class:Shader
setMat3	mesh_visibility/shader.h	/^    void setMat3(const std::string &name, const glm::mat3 &mat) const$/;"	f	class:Shader
setMat4	mesh_visibility/shader.h	/^    void setMat4(const std::string &name, const glm::mat4 &mat) const$/;"	f	class:Shader
setReadBuffer	mesh_visibility/gbuffer.cpp	/^void GBuffer::setReadBuffer(GBUFFER_TEXTURE_TYPE TextureType)$/;"	f	class:GBuffer
setTargetClusterNum	mesh_partition/partition.h	/^    void setTargetClusterNum(int num) { target_cluster_num_ = num; }$/;"	f	class:Partition
setVec2	mesh_visibility/shader.h	/^    void setVec2(const std::string &name, const glm::vec2 &value) const$/;"	f	class:Shader
setVec2	mesh_visibility/shader.h	/^    void setVec2(const std::string &name, float x, float y) const$/;"	f	class:Shader
setVec3	mesh_visibility/shader.h	/^    void setVec3(const std::string &name, const glm::vec3 &value) const$/;"	f	class:Shader
setVec3	mesh_visibility/shader.h	/^    void setVec3(const std::string &name, float x, float y, float z) const$/;"	f	class:Shader
setVec4	mesh_visibility/shader.h	/^    void setVec4(const std::string &name, const glm::vec4 &value) const$/;"	f	class:Shader
setVec4	mesh_visibility/shader.h	/^    void setVec4(const std::string &name, float x, float y, float z, float w) const$/;"	f	class:Shader
set_heap_pos	mesh_partition/heap/MxHeap.h	/^    inline void set_heap_pos(int t) { token = t; }$/;"	f	class:MxHeapable
set_heap_pos	mesh_partition/myheap.h	/^    inline void set_heap_pos(int t) { token = t; }$/;"	f	class:MxHeapable
severity	mesh_partition/heap/mixmsg.h	/^    MxSeverityLevel severity;$/;"	m	class:MxMsgInfo
shininess	mesh_visibility/glm/glm/detail/dummy.cpp	/^	float shininess; \/\/ Srm$/;"	m	struct:material	file:
simd	mesh_visibility/glm/glm/detail/precision.hpp	/^		simd,$/;"	e	enum:glm::precision
simd	mesh_visibility/glm/glm/detail/type_gentype.hpp	/^		simd$/;"	e	enum:glm::profile
simdMat4	mesh_visibility/glm/glm/gtx/simd_mat4.hpp	/^	typedef detail::fmat4x4SIMD simdMat4;$/;"	t	namespace:glm
simdQuat	mesh_visibility/glm/glm/gtx/simd_quat.hpp	/^	typedef glm::detail::fquatSIMD simdQuat;$/;"	t	namespace:glm
simdVec4	mesh_visibility/glm/glm/gtx/simd_vec4.hpp	/^	typedef glm::detail::fvec4SIMD simdVec4;$/;"	t	namespace:glm
simd_data	mesh_visibility/glm/glm/detail/type_vec4.hpp	/^		struct simd_data<double, simd>$/;"	s	namespace:glm::detail
simd_data	mesh_visibility/glm/glm/detail/type_vec4.hpp	/^		struct simd_data<float, simd>$/;"	s	namespace:glm::detail
simd_data	mesh_visibility/glm/glm/detail/type_vec4.hpp	/^		struct simd_data<int, simd>$/;"	s	namespace:glm::detail
simd_data	mesh_visibility/glm/glm/detail/type_vec4.hpp	/^		struct simd_data<int64, simd>$/;"	s	namespace:glm::detail
simd_data	mesh_visibility/glm/glm/detail/type_vec4.hpp	/^		struct simd_data<uint64, simd>$/;"	s	namespace:glm::detail
simd_data	mesh_visibility/glm/glm/detail/type_vec4.hpp	/^		struct simd_data<unsigned int, simd>$/;"	s	namespace:glm::detail
simd_data	mesh_visibility/glm/glm/detail/type_vec4.hpp	/^	struct simd_data$/;"	s	namespace:glm::detail
simplifyBorderEdges	mesh_partition/partition.cpp	/^void Partition::simplifyBorderEdges()$/;"	f	class:Partition
simplifyInnerEdges	mesh_partition/partition.cpp	/^void Partition::simplifyInnerEdges()$/;"	f	class:Partition
sint	mesh_visibility/glm/glm/gtx/integer.hpp	/^	typedef signed int					sint;$/;"	t	namespace:glm
size	mesh_partition/heap/MxBlock.h	/^    int size() const { return length(); }$/;"	f	class:MxBlock
size	mesh_partition/heap/MxDynBlock.h	/^    int size() const { return length(); }$/;"	f	class:MxDynBlock
size	mesh_partition/heap/MxHeap.h	/^    unsigned int size() const { return length(); }$/;"	f	class:MxHeap
size	mesh_partition/myheap.h	/^    unsigned int size() const { return static_cast<unsigned int>(data.size()); }$/;"	f	class:MxHeap
size	mesh_visibility/glfw/glfw3.h	/^    unsigned int size;$/;"	m	struct:GLFWgammaramp
size1	mesh_visibility/glm/glm/gtx/std_based_type.hpp	/^	typedef tvec1<std::size_t, defaultp>		size1;$/;"	t	namespace:glm
size1_t	mesh_visibility/glm/glm/gtx/std_based_type.hpp	/^	typedef tvec1<std::size_t, defaultp>		size1_t;$/;"	t	namespace:glm
size2	mesh_visibility/glm/glm/gtx/std_based_type.hpp	/^	typedef tvec2<std::size_t, defaultp>		size2;$/;"	t	namespace:glm
size2_t	mesh_visibility/glm/glm/gtx/std_based_type.hpp	/^	typedef tvec2<std::size_t, defaultp>		size2_t;$/;"	t	namespace:glm
size3	mesh_visibility/glm/glm/gtx/std_based_type.hpp	/^	typedef tvec3<std::size_t, defaultp>		size3;$/;"	t	namespace:glm
size3_t	mesh_visibility/glm/glm/gtx/std_based_type.hpp	/^	typedef tvec3<std::size_t, defaultp>		size3_t;$/;"	t	namespace:glm
size4	mesh_visibility/glm/glm/gtx/std_based_type.hpp	/^	typedef tvec4<std::size_t, defaultp>		size4;$/;"	t	namespace:glm
size4_t	mesh_visibility/glm/glm/gtx/std_based_type.hpp	/^	typedef tvec4<std::size_t, defaultp>		size4_t;$/;"	t	namespace:glm
sizeType	mesh_visibility/glm/glm/detail/type_gentype.hpp	/^	typedef std::size_t sizeType;$/;"	t	namespace:glm
size_	common/covariance.h	/^    int size_;$/;"	m	class:CovObj
size_type	mesh_visibility/glm/glm/detail/type_gentype.hpp	/^		typedef sizeType size_type;$/;"	t	struct:glm::detail::genType
size_type	mesh_visibility/glm/glm/detail/type_mat2x2.hpp	/^			typedef size_t size_type;$/;"	t	struct:glm::tmat2x2
size_type	mesh_visibility/glm/glm/detail/type_mat2x3.hpp	/^			typedef size_t size_type;$/;"	t	struct:glm::tmat2x3
size_type	mesh_visibility/glm/glm/detail/type_mat2x4.hpp	/^			typedef size_t size_type;$/;"	t	struct:glm::tmat2x4
size_type	mesh_visibility/glm/glm/detail/type_mat3x2.hpp	/^			typedef size_t size_type;$/;"	t	struct:glm::tmat3x2
size_type	mesh_visibility/glm/glm/detail/type_mat3x3.hpp	/^			typedef size_t size_type;$/;"	t	struct:glm::tmat3x3
size_type	mesh_visibility/glm/glm/detail/type_mat3x4.hpp	/^			typedef size_t size_type;$/;"	t	struct:glm::tmat3x4
size_type	mesh_visibility/glm/glm/detail/type_mat4x2.hpp	/^			typedef size_t size_type;$/;"	t	struct:glm::tmat4x2
size_type	mesh_visibility/glm/glm/detail/type_mat4x3.hpp	/^			typedef size_t size_type;$/;"	t	struct:glm::tmat4x3
size_type	mesh_visibility/glm/glm/detail/type_mat4x4.hpp	/^			typedef size_t size_type;$/;"	t	struct:glm::tmat4x4
size_type	mesh_visibility/glm/glm/detail/type_vec1.hpp	/^			typedef size_t size_type;$/;"	t	struct:glm::tvec1
size_type	mesh_visibility/glm/glm/detail/type_vec2.hpp	/^			typedef size_t size_type;$/;"	t	struct:glm::tvec2
size_type	mesh_visibility/glm/glm/detail/type_vec3.hpp	/^			typedef size_t size_type;$/;"	t	struct:glm::tvec3
size_type	mesh_visibility/glm/glm/detail/type_vec4.hpp	/^			typedef size_t size_type;$/;"	t	struct:glm::tvec4
size_type	mesh_visibility/glm/glm/gtc/quaternion.hpp	/^			typedef size_t size_type;$/;"	t	struct:glm::tquat
size_type	mesh_visibility/glm/glm/gtx/dual_quaternion.hpp	/^			typedef size_t size_type;$/;"	t	struct:glm::tdualquat
space	mesh_visibility/glm/glm/gtx/io.hpp	/^			char_type  space;$/;"	m	class:glm::io::format_punct
specular	mesh_visibility/glm/glm/detail/dummy.cpp	/^	glm::vec4 specular; \/\/ Scli$/;"	m	struct:light	file:
specular	mesh_visibility/glm/glm/detail/dummy.cpp	/^	glm::vec4 specular; \/\/ Scm$/;"	m	struct:material	file:
splitCluster	mesh_partition/partition.cpp	/^int Partition::splitCluster(int cidx, vector<unordered_set<int>>& connected_components)$/;"	f	class:Partition
spotCosCutoff	mesh_visibility/glm/glm/detail/dummy.cpp	/^	float spotCosCutoff; \/\/ Derived: cos(Crli)$/;"	m	struct:light	file:
spotCutoff	mesh_visibility/glm/glm/detail/dummy.cpp	/^	float spotCutoff; \/\/ Crli$/;"	m	struct:light	file:
spotDirection	mesh_visibility/glm/glm/detail/dummy.cpp	/^	glm::vec3 spotDirection; \/\/ Sdli$/;"	m	struct:light	file:
spotExponent	mesh_visibility/glm/glm/detail/dummy.cpp	/^	float spotExponent; \/\/ Srli$/;"	m	struct:light	file:
state_	mesh_visibility/glm/glm/gtx/io.hpp	/^			state_type&     state_;$/;"	m	class:glm::io::basic_state_saver
state_saver	mesh_visibility/glm/glm/gtx/io.hpp	/^		typedef basic_state_saver<char>     state_saver;$/;"	t	namespace:glm::io
state_type	mesh_visibility/glm/glm/gtx/io.hpp	/^			typedef ::std::basic_ios<CTy,CTr>      state_type;$/;"	t	class:glm::io::basic_state_saver
std	mesh_visibility/glm/glm/gtx/hash.hpp	/^namespace std$/;"	n
streamsize_type	mesh_visibility/glm/glm/gtx/io.hpp	/^			typedef ::std::streamsize              streamsize_type;$/;"	t	class:glm::io::basic_state_saver
streq	mesh_partition/heap/stdmix.h	/^inline bool streq(const char *a, const char *b) { return !strcmp(a,b); }$/;"	f
sumofCoefficient	blur_estimation/blur_estimation.cpp	/^float BlurEstimation::sumofCoefficient(cv::Mat &d_input)$/;"	f	class:BlurEstimation
swap	mesh_partition/heap/MxHeap.cxx	/^void MxHeap::swap(unsigned int i, unsigned int j)$/;"	f	class:MxHeap
swap	mesh_partition/myheap.h	/^    void swap(unsigned int i, unsigned int j)$/;"	f	class:MxHeap
swapOnce	mesh_partition/partition.cpp	/^int Partition::swapOnce()$/;"	f	class:Partition
t	mesh_texture_opt/mesh_opt.h	/^        Vector3d t, opt_t, inv_t, opt_inv_t;$/;"	m	struct:RGBDMeshOpt::Frame
t	mesh_visibility/glm/glm/detail/type_vec2.hpp	/^				struct{ T s, t; };$/;"	m	struct:glm::tvec2::__anon18::__anon21
t	mesh_visibility/glm/glm/detail/type_vec2.hpp	/^			union {T y, g, t;};$/;"	m	union:glm::tvec2::__anon23
t	mesh_visibility/glm/glm/detail/type_vec3.hpp	/^				struct{ T s, t, p; };$/;"	m	struct:glm::tvec3::__anon11::__anon14
t	mesh_visibility/glm/glm/detail/type_vec3.hpp	/^			union { T y, g, t; };$/;"	m	union:glm::tvec3::__anon16
t	mesh_visibility/glm/glm/detail/type_vec4.hpp	/^				struct { T s, t, p, q; };$/;"	m	struct:glm::tvec4::__anon1::__anon4
t	mesh_visibility/glm/glm/detail/type_vec4.hpp	/^			union { T y, g, t; };$/;"	m	union:glm::tvec4::__anon6
target_cluster_num_	mesh_partition/partition.h	/^    int init_cluster_num_, curr_cluster_num_, target_cluster_num_;$/;"	m	class:Partition
taylorInvSqrt	mesh_visibility/glm/glm/detail/_noise.hpp	/^	GLM_FUNC_QUALIFIER T taylorInvSqrt(T const & r)$/;"	f	namespace:glm::detail
taylorInvSqrt	mesh_visibility/glm/glm/detail/_noise.hpp	/^	GLM_FUNC_QUALIFIER tvec2<T, P> taylorInvSqrt(tvec2<T, P> const & r)$/;"	f	namespace:glm::detail
taylorInvSqrt	mesh_visibility/glm/glm/detail/_noise.hpp	/^	GLM_FUNC_QUALIFIER tvec3<T, P> taylorInvSqrt(tvec3<T, P> const & r)$/;"	f	namespace:glm::detail
taylorInvSqrt	mesh_visibility/glm/glm/detail/_noise.hpp	/^	GLM_FUNC_QUALIFIER tvec4<T, P> taylorInvSqrt(tvec4<T, P> const & r)$/;"	f	namespace:glm::detail
tdualquat	mesh_visibility/glm/glm/gtx/dual_quaternion.hpp	/^	struct tdualquat$/;"	s	namespace:glm
texel_positions	mesh_texture_opt/mesh_opt.h	/^        vector<pair<int, int>> texel_positions;   \/\/ texel positions (i, j) in texture image 'texture_img_idx'$/;"	m	struct:RGBDMeshOpt::TexturePatch
texels_	mesh_texture_opt/mesh_opt.h	/^    vector<vector<vector<Texel>>> texels_;  \/\/ texels in all texture image, its 3D since each texture image is 2D$/;"	m	class:RGBDMeshOpt
texture0_	mesh_visibility/mesh_visibility.h	/^	unsigned int texture0_;$/;"	m	class:MeshVisibility
texture_image_	mesh_visibility/mesh_visibility.h	/^	cv::Mat texture_image_;$/;"	m	class:MeshVisibility
texture_image_height_	mesh_visibility/mesh_visibility.h	/^	int texture_image_width_, texture_image_height_;$/;"	m	class:MeshVisibility
texture_image_width_	mesh_visibility/mesh_visibility.h	/^	int texture_image_width_, texture_image_height_;$/;"	m	class:MeshVisibility
texture_images_	mesh_texture_opt/mesh_opt.h	/^    vector<cv::Mat> texture_images_;        \/\/ final packed texture images$/;"	m	class:RGBDMeshOpt
texture_img_blpos	mesh_texture_opt/mesh_opt.h	/^        Vector2i texture_img_blpos;               \/\/ bottom left position in the final texture image$/;"	m	struct:RGBDMeshOpt::TexturePatch
texture_img_idx	mesh_texture_opt/mesh_opt.h	/^        int texture_img_idx;                      \/\/ index of texture image that this patch is in$/;"	m	struct:RGBDMeshOpt::TexturePatch
texture_img_num_	mesh_visibility/mesh_visibility.h	/^	int texture_img_num_;$/;"	m	class:MeshVisibility
tmat2x2	mesh_visibility/glm/glm/detail/type_mat2x2.hpp	/^	struct tmat2x2$/;"	s	namespace:glm
tmat2x3	mesh_visibility/glm/glm/detail/type_mat2x3.hpp	/^	struct tmat2x3$/;"	s	namespace:glm
tmat2x4	mesh_visibility/glm/glm/detail/type_mat2x4.hpp	/^	struct tmat2x4$/;"	s	namespace:glm
tmat3x2	mesh_visibility/glm/glm/detail/type_mat3x2.hpp	/^	struct tmat3x2$/;"	s	namespace:glm
tmat3x3	mesh_visibility/glm/glm/detail/type_mat3x3.hpp	/^	struct tmat3x3$/;"	s	namespace:glm
tmat3x4	mesh_visibility/glm/glm/detail/type_mat3x4.hpp	/^	struct tmat3x4$/;"	s	namespace:glm
tmat4x2	mesh_visibility/glm/glm/detail/type_mat4x2.hpp	/^	struct tmat4x2$/;"	s	namespace:glm
tmat4x3	mesh_visibility/glm/glm/detail/type_mat4x3.hpp	/^	struct tmat4x3$/;"	s	namespace:glm
tmat4x4	mesh_visibility/glm/glm/detail/type_mat4x4.hpp	/^	struct tmat4x4$/;"	s	namespace:glm
to	mesh_partition/partition.h	/^        int face_id, from, to;$/;"	m	struct:Partition::SwapFace
toMat3	mesh_visibility/glm/glm/gtx/quaternion.hpp	/^	GLM_FUNC_DECL tmat3x3<T, P> toMat3($/;"	f	namespace:glm
toMat4	mesh_visibility/glm/glm/gtx/quaternion.hpp	/^	GLM_FUNC_DECL tmat4x4<T, P> toMat4($/;"	f	namespace:glm
toQuat	mesh_visibility/glm/glm/gtx/quaternion.hpp	/^	GLM_FUNC_DECL tquat<T, P> toQuat($/;"	f	namespace:glm
token	mesh_partition/heap/MxHeap.h	/^    int token;$/;"	m	class:MxHeapable
token	mesh_partition/myheap.h	/^    int token;      \/\/ position in the heap$/;"	m	class:MxHeapable
top	mesh_partition/heap/MxHeap.h	/^    MxHeapable *top() { return (length() < 1 ? (MxHeapable *)NULL : item(0)); }$/;"	f	class:MxHeap
top	mesh_partition/myheap.h	/^    MxHeapable *top() { return (length() < 1 ? nullptr : data[0]); }$/;"	f	class:MxHeap
total_energy_	mesh_partition/partition.h	/^    double total_energy_;$/;"	m	class:Partition
total_space	mesh_partition/heap/MxDynBlock.h	/^    int total_space() const { return MxBlock<T>::length(); }$/;"	f	class:MxDynBlock
tquat	mesh_visibility/glm/glm/gtc/quaternion.hpp	/^	struct tquat$/;"	s	namespace:glm
transform_perspective_	mesh_visibility/mesh_visibility.h	/^	glm::mat4 transform_perspective_; \/\/ perspective transformation$/;"	m	class:MeshVisibility
transforms_	mesh_visibility/mesh_visibility.h	/^	vector<glm::mat4> transforms_; \/\/ extrinsic poses$/;"	m	class:MeshVisibility
transpose_type	mesh_visibility/glm/glm/detail/type_mat2x2.hpp	/^		typedef tmat2x2<T, P> transpose_type;$/;"	t	struct:glm::tmat2x2
transpose_type	mesh_visibility/glm/glm/detail/type_mat2x3.hpp	/^		typedef tmat3x2<T, P> transpose_type;$/;"	t	struct:glm::tmat2x3
transpose_type	mesh_visibility/glm/glm/detail/type_mat2x4.hpp	/^		typedef tmat4x2<T, P> transpose_type;$/;"	t	struct:glm::tmat2x4
transpose_type	mesh_visibility/glm/glm/detail/type_mat3x2.hpp	/^		typedef tmat2x3<T, P> transpose_type;$/;"	t	struct:glm::tmat3x2
transpose_type	mesh_visibility/glm/glm/detail/type_mat3x3.hpp	/^		typedef tmat3x3<T, P> transpose_type;$/;"	t	struct:glm::tmat3x3
transpose_type	mesh_visibility/glm/glm/detail/type_mat3x4.hpp	/^		typedef tmat4x3<T, P> transpose_type;$/;"	t	struct:glm::tmat3x4
transpose_type	mesh_visibility/glm/glm/detail/type_mat4x2.hpp	/^		typedef tmat2x4<T, P> transpose_type;$/;"	t	struct:glm::tmat4x2
transpose_type	mesh_visibility/glm/glm/detail/type_mat4x3.hpp	/^		typedef tmat3x4<T, P> transpose_type;$/;"	t	struct:glm::tmat4x3
transpose_type	mesh_visibility/glm/glm/detail/type_mat4x4.hpp	/^		typedef tmat4x4<T, P> transpose_type;$/;"	t	struct:glm::tmat4x4
traverseFaceBFS	mesh_partition/partition.cpp	/^int Partition::traverseFaceBFS(int start_fidx, int start_cidx, unordered_set<int>& component)$/;"	f	class:Partition
tvec1	mesh_visibility/glm/glm/detail/type_vec1.hpp	/^			GLM_FUNC_DECL tvec1(detail::_swizzle<1, T, P, tvec1<T, P>, E0, -1,-2,-3> const & that)$/;"	f	struct:glm::tvec1
tvec1	mesh_visibility/glm/glm/detail/type_vec1.hpp	/^	struct tvec1$/;"	s	namespace:glm
tvec2	mesh_visibility/glm/glm/detail/type_vec2.hpp	/^			GLM_FUNC_DECL tvec2(detail::_swizzle<2, T, P, tvec2<T, P>, E0, E1,-1,-2> const & that)$/;"	f	struct:glm::tvec2
tvec2	mesh_visibility/glm/glm/detail/type_vec2.hpp	/^	struct tvec2$/;"	s	namespace:glm
tvec3	mesh_visibility/glm/glm/detail/type_vec3.hpp	/^			GLM_FUNC_DECL tvec3(T const & scalar, detail::_swizzle<2, T, P, tvec2<T, P>, E0, E1, -1, -2> const & v)$/;"	f	struct:glm::tvec3
tvec3	mesh_visibility/glm/glm/detail/type_vec3.hpp	/^			GLM_FUNC_DECL tvec3(detail::_swizzle<2, T, P, tvec2<T, P>, E0, E1, -1, -2> const & v, T const & scalar)$/;"	f	struct:glm::tvec3
tvec3	mesh_visibility/glm/glm/detail/type_vec3.hpp	/^			GLM_FUNC_DECL tvec3(detail::_swizzle<3, T, P, tvec3<T, P>, E0, E1, E2, -1> const & that)$/;"	f	struct:glm::tvec3
tvec3	mesh_visibility/glm/glm/detail/type_vec3.hpp	/^	struct tvec3$/;"	s	namespace:glm
tvec4	mesh_visibility/glm/glm/detail/type_vec4.hpp	/^			GLM_FUNC_DECL tvec4(T const & x, T const & y, detail::_swizzle<2, T, P, tvec2<T, P>, E0, E1, -1, -2> const & v)$/;"	f	struct:glm::tvec4
tvec4	mesh_visibility/glm/glm/detail/type_vec4.hpp	/^			GLM_FUNC_DECL tvec4(T const & x, detail::_swizzle<2, T, P, tvec2<T, P>, E0, E1, -1, -2> const & v, T const & w)$/;"	f	struct:glm::tvec4
tvec4	mesh_visibility/glm/glm/detail/type_vec4.hpp	/^			GLM_FUNC_DECL tvec4(T const & x, detail::_swizzle<3, T, P, tvec3<T, P>, E0, E1, E2, -1> const & v)$/;"	f	struct:glm::tvec4
tvec4	mesh_visibility/glm/glm/detail/type_vec4.hpp	/^			GLM_FUNC_DECL tvec4(detail::_swizzle<2, T, P, tvec2<T, P>, E0, E1, -1, -2> const & v, T const & z, T const & w)$/;"	f	struct:glm::tvec4
tvec4	mesh_visibility/glm/glm/detail/type_vec4.hpp	/^			GLM_FUNC_DECL tvec4(detail::_swizzle<2, T, P, tvec2<T, P>, E0, E1, -1, -2> const & v, detail::_swizzle<2, T, P, tvec2<T, P>, F0, F1, -1, -2> const & u)$/;"	f	struct:glm::tvec4
tvec4	mesh_visibility/glm/glm/detail/type_vec4.hpp	/^			GLM_FUNC_DECL tvec4(detail::_swizzle<3, T, P, tvec3<T, P>, E0, E1, E2, -1> const & v, T const & w)$/;"	f	struct:glm::tvec4
tvec4	mesh_visibility/glm/glm/detail/type_vec4.hpp	/^			GLM_FUNC_DECL tvec4(detail::_swizzle<4, T, P, tvec4<T, P>, E0, E1, E2, E3> const & that)$/;"	f	struct:glm::tvec4
tvec4	mesh_visibility/glm/glm/detail/type_vec4.hpp	/^	struct tvec4$/;"	s	namespace:glm
type	mesh_visibility/glm/glm/detail/func_matrix.hpp	/^		typedef tmat2x2<T, P> type;$/;"	t	struct:glm::detail::outerProduct_trait
type	mesh_visibility/glm/glm/detail/func_matrix.hpp	/^		typedef tmat2x3<T, P> type;$/;"	t	struct:glm::detail::outerProduct_trait
type	mesh_visibility/glm/glm/detail/func_matrix.hpp	/^		typedef tmat2x4<T, P> type;$/;"	t	struct:glm::detail::outerProduct_trait
type	mesh_visibility/glm/glm/detail/func_matrix.hpp	/^		typedef tmat3x2<T, P> type;$/;"	t	struct:glm::detail::outerProduct_trait
type	mesh_visibility/glm/glm/detail/func_matrix.hpp	/^		typedef tmat3x3<T, P> type;$/;"	t	struct:glm::detail::outerProduct_trait
type	mesh_visibility/glm/glm/detail/func_matrix.hpp	/^		typedef tmat3x4<T, P> type;$/;"	t	struct:glm::detail::outerProduct_trait
type	mesh_visibility/glm/glm/detail/func_matrix.hpp	/^		typedef tmat4x2<T, P> type;$/;"	t	struct:glm::detail::outerProduct_trait
type	mesh_visibility/glm/glm/detail/func_matrix.hpp	/^		typedef tmat4x3<T, P> type;$/;"	t	struct:glm::detail::outerProduct_trait
type	mesh_visibility/glm/glm/detail/func_matrix.hpp	/^		typedef tmat4x4<T, P> type;$/;"	t	struct:glm::detail::outerProduct_trait
type	mesh_visibility/glm/glm/detail/type_gentype.hpp	/^		typedef TYPE<VALTYPE> type;$/;"	t	struct:glm::detail::genType
type	mesh_visibility/glm/glm/detail/type_mat2x2.hpp	/^		typedef tmat2x2<T, P> type;$/;"	t	struct:glm::tmat2x2
type	mesh_visibility/glm/glm/detail/type_mat2x3.hpp	/^		typedef tmat2x3<T, P> type;$/;"	t	struct:glm::tmat2x3
type	mesh_visibility/glm/glm/detail/type_mat2x4.hpp	/^		typedef tmat2x4<T, P> type;$/;"	t	struct:glm::tmat2x4
type	mesh_visibility/glm/glm/detail/type_mat3x2.hpp	/^		typedef tmat3x2<T, P> type;$/;"	t	struct:glm::tmat3x2
type	mesh_visibility/glm/glm/detail/type_mat3x3.hpp	/^		typedef tmat3x3<T, P> type;$/;"	t	struct:glm::tmat3x3
type	mesh_visibility/glm/glm/detail/type_mat3x4.hpp	/^		typedef tmat3x4<T, P> type;$/;"	t	struct:glm::tmat3x4
type	mesh_visibility/glm/glm/detail/type_mat4x2.hpp	/^		typedef tmat4x2<T, P> type;$/;"	t	struct:glm::tmat4x2
type	mesh_visibility/glm/glm/detail/type_mat4x3.hpp	/^		typedef tmat4x3<T, P> type;$/;"	t	struct:glm::tmat4x3
type	mesh_visibility/glm/glm/detail/type_mat4x4.hpp	/^		typedef tmat4x4<T, P> type;$/;"	t	struct:glm::tmat4x4
type	mesh_visibility/glm/glm/detail/type_vec1.hpp	/^		typedef tvec1<T, P> type;$/;"	t	struct:glm::tvec1
type	mesh_visibility/glm/glm/detail/type_vec2.hpp	/^		typedef tvec2<T, P> type;$/;"	t	struct:glm::tvec2
type	mesh_visibility/glm/glm/detail/type_vec3.hpp	/^		typedef tvec3<T, P> type;$/;"	t	struct:glm::tvec3
type	mesh_visibility/glm/glm/detail/type_vec4.hpp	/^			typedef __m128 type;$/;"	t	struct:glm::detail::simd_data
type	mesh_visibility/glm/glm/detail/type_vec4.hpp	/^			typedef __m128i type;$/;"	t	struct:glm::detail::simd_data
type	mesh_visibility/glm/glm/detail/type_vec4.hpp	/^			typedef __m256d type;$/;"	t	struct:glm::detail::simd_data
type	mesh_visibility/glm/glm/detail/type_vec4.hpp	/^			typedef __m256i type;$/;"	t	struct:glm::detail::simd_data
type	mesh_visibility/glm/glm/detail/type_vec4.hpp	/^		typedef T type[4];$/;"	t	struct:glm::detail::simd_data
type	mesh_visibility/glm/glm/detail/type_vec4.hpp	/^		typedef tvec4<T, P> type;$/;"	t	struct:glm::tvec4
type	mesh_visibility/glm/glm/gtc/quaternion.hpp	/^		typedef tquat<T, P> type;$/;"	t	struct:glm::tquat
u16	mesh_visibility/glm/glm/fwd.hpp	/^	typedef detail::uint16 u16;$/;"	t	namespace:glm
u16	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef detail::uint16 u16;$/;"	t	namespace:glm
u16vec1	mesh_visibility/glm/glm/fwd.hpp	/^	typedef highp_u16vec1			u16vec1;$/;"	t	namespace:glm
u16vec1	mesh_visibility/glm/glm/fwd.hpp	/^	typedef lowp_u16vec1			u16vec1;$/;"	t	namespace:glm
u16vec1	mesh_visibility/glm/glm/fwd.hpp	/^	typedef mediump_u16vec1			u16vec1;$/;"	t	namespace:glm
u16vec1	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef tvec1<u16, defaultp> u16vec1;$/;"	t	namespace:glm
u16vec1	mesh_visibility/glm/glm/gtx/number_precision.hpp	/^	typedef u16			u16vec1;    \/\/!< \\brief 16bit unsigned integer scalar. (from GLM_GTX_number_precision extension)$/;"	t	namespace:glm::gtx
u16vec2	mesh_visibility/glm/glm/fwd.hpp	/^	typedef highp_u16vec2			u16vec2;$/;"	t	namespace:glm
u16vec2	mesh_visibility/glm/glm/fwd.hpp	/^	typedef lowp_u16vec2			u16vec2;$/;"	t	namespace:glm
u16vec2	mesh_visibility/glm/glm/fwd.hpp	/^	typedef mediump_u16vec2			u16vec2;$/;"	t	namespace:glm
u16vec2	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef tvec2<u16, defaultp> u16vec2;$/;"	t	namespace:glm
u16vec3	mesh_visibility/glm/glm/fwd.hpp	/^	typedef highp_u16vec3			u16vec3;$/;"	t	namespace:glm
u16vec3	mesh_visibility/glm/glm/fwd.hpp	/^	typedef lowp_u16vec3			u16vec3;$/;"	t	namespace:glm
u16vec3	mesh_visibility/glm/glm/fwd.hpp	/^	typedef mediump_u16vec3			u16vec3;$/;"	t	namespace:glm
u16vec3	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef tvec3<u16, defaultp> u16vec3;$/;"	t	namespace:glm
u16vec4	mesh_visibility/glm/glm/fwd.hpp	/^	typedef highp_u16vec4			u16vec4;$/;"	t	namespace:glm
u16vec4	mesh_visibility/glm/glm/fwd.hpp	/^	typedef lowp_u16vec4			u16vec4;$/;"	t	namespace:glm
u16vec4	mesh_visibility/glm/glm/fwd.hpp	/^	typedef mediump_u16vec4			u16vec4;$/;"	t	namespace:glm
u16vec4	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef tvec4<u16, defaultp> u16vec4;$/;"	t	namespace:glm
u32	mesh_visibility/glm/glm/fwd.hpp	/^	typedef detail::uint32 u32;$/;"	t	namespace:glm
u32	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef detail::uint32 u32;$/;"	t	namespace:glm
u32vec1	mesh_visibility/glm/glm/fwd.hpp	/^	typedef highp_u32vec1			u32vec1;$/;"	t	namespace:glm
u32vec1	mesh_visibility/glm/glm/fwd.hpp	/^	typedef lowp_u32vec1			u32vec1;$/;"	t	namespace:glm
u32vec1	mesh_visibility/glm/glm/fwd.hpp	/^	typedef mediump_u32vec1			u32vec1;$/;"	t	namespace:glm
u32vec1	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef tvec1<u32, defaultp> u32vec1;$/;"	t	namespace:glm
u32vec1	mesh_visibility/glm/glm/gtx/number_precision.hpp	/^	typedef u32			u32vec1;    \/\/!< \\brief 32bit unsigned integer scalar. (from GLM_GTX_number_precision extension)$/;"	t	namespace:glm::gtx
u32vec2	mesh_visibility/glm/glm/fwd.hpp	/^	typedef highp_u32vec2			u32vec2;$/;"	t	namespace:glm
u32vec2	mesh_visibility/glm/glm/fwd.hpp	/^	typedef lowp_u32vec2			u32vec2;$/;"	t	namespace:glm
u32vec2	mesh_visibility/glm/glm/fwd.hpp	/^	typedef mediump_u32vec2			u32vec2;$/;"	t	namespace:glm
u32vec2	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef tvec2<u32, defaultp> u32vec2;$/;"	t	namespace:glm
u32vec3	mesh_visibility/glm/glm/fwd.hpp	/^	typedef highp_u32vec3			u32vec3;$/;"	t	namespace:glm
u32vec3	mesh_visibility/glm/glm/fwd.hpp	/^	typedef lowp_u32vec3			u32vec3;$/;"	t	namespace:glm
u32vec3	mesh_visibility/glm/glm/fwd.hpp	/^	typedef mediump_u32vec3			u32vec3;$/;"	t	namespace:glm
u32vec3	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef tvec3<u32, defaultp> u32vec3;$/;"	t	namespace:glm
u32vec4	mesh_visibility/glm/glm/fwd.hpp	/^	typedef highp_u32vec4			u32vec4;$/;"	t	namespace:glm
u32vec4	mesh_visibility/glm/glm/fwd.hpp	/^	typedef lowp_u32vec4			u32vec4;$/;"	t	namespace:glm
u32vec4	mesh_visibility/glm/glm/fwd.hpp	/^	typedef mediump_u32vec4			u32vec4;$/;"	t	namespace:glm
u32vec4	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef tvec4<u32, defaultp> u32vec4;$/;"	t	namespace:glm
u64	mesh_visibility/glm/glm/fwd.hpp	/^	typedef detail::uint64 u64;$/;"	t	namespace:glm
u64	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef detail::uint64 u64;$/;"	t	namespace:glm
u64vec1	mesh_visibility/glm/glm/fwd.hpp	/^	typedef highp_u64vec1			u64vec1;$/;"	t	namespace:glm
u64vec1	mesh_visibility/glm/glm/fwd.hpp	/^	typedef lowp_u64vec1			u64vec1;$/;"	t	namespace:glm
u64vec1	mesh_visibility/glm/glm/fwd.hpp	/^	typedef mediump_u64vec1			u64vec1;$/;"	t	namespace:glm
u64vec1	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef tvec1<u64, defaultp> u64vec1;$/;"	t	namespace:glm
u64vec1	mesh_visibility/glm/glm/gtx/number_precision.hpp	/^	typedef u64			u64vec1;    \/\/!< \\brief 64bit unsigned integer scalar. (from GLM_GTX_number_precision extension)$/;"	t	namespace:glm::gtx
u64vec2	mesh_visibility/glm/glm/fwd.hpp	/^	typedef highp_u64vec2			u64vec2;$/;"	t	namespace:glm
u64vec2	mesh_visibility/glm/glm/fwd.hpp	/^	typedef lowp_u64vec2			u64vec2;$/;"	t	namespace:glm
u64vec2	mesh_visibility/glm/glm/fwd.hpp	/^	typedef mediump_u64vec2			u64vec2;$/;"	t	namespace:glm
u64vec2	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef tvec2<u64, defaultp> u64vec2;$/;"	t	namespace:glm
u64vec3	mesh_visibility/glm/glm/fwd.hpp	/^	typedef highp_u64vec3			u64vec3;$/;"	t	namespace:glm
u64vec3	mesh_visibility/glm/glm/fwd.hpp	/^	typedef lowp_u64vec3			u64vec3;$/;"	t	namespace:glm
u64vec3	mesh_visibility/glm/glm/fwd.hpp	/^	typedef mediump_u64vec3			u64vec3;$/;"	t	namespace:glm
u64vec3	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef tvec3<u64, defaultp> u64vec3;$/;"	t	namespace:glm
u64vec4	mesh_visibility/glm/glm/fwd.hpp	/^	typedef highp_u64vec4			u64vec4;$/;"	t	namespace:glm
u64vec4	mesh_visibility/glm/glm/fwd.hpp	/^	typedef lowp_u64vec4			u64vec4;$/;"	t	namespace:glm
u64vec4	mesh_visibility/glm/glm/fwd.hpp	/^	typedef mediump_u64vec4			u64vec4;$/;"	t	namespace:glm
u64vec4	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef tvec4<u64, defaultp> u64vec4;$/;"	t	namespace:glm
u8	mesh_visibility/glm/glm/fwd.hpp	/^	typedef detail::uint8 u8;$/;"	t	namespace:glm
u8	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef detail::uint8 u8;$/;"	t	namespace:glm
u8vec1	mesh_visibility/glm/glm/fwd.hpp	/^	typedef highp_u8vec1			u8vec1;$/;"	t	namespace:glm
u8vec1	mesh_visibility/glm/glm/fwd.hpp	/^	typedef lowp_u8vec1				u8vec1;$/;"	t	namespace:glm
u8vec1	mesh_visibility/glm/glm/fwd.hpp	/^	typedef mediump_u8vec1			u8vec1;$/;"	t	namespace:glm
u8vec1	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef tvec1<u8, defaultp> u8vec1;$/;"	t	namespace:glm
u8vec1	mesh_visibility/glm/glm/gtx/number_precision.hpp	/^	typedef u8			u8vec1;		\/\/!< \\brief 8bit unsigned integer scalar. (from GLM_GTX_number_precision extension)$/;"	t	namespace:glm::gtx
u8vec2	mesh_visibility/glm/glm/fwd.hpp	/^	typedef highp_u8vec2			u8vec2;$/;"	t	namespace:glm
u8vec2	mesh_visibility/glm/glm/fwd.hpp	/^	typedef lowp_u8vec2				u8vec2;$/;"	t	namespace:glm
u8vec2	mesh_visibility/glm/glm/fwd.hpp	/^	typedef mediump_u8vec2			u8vec2;$/;"	t	namespace:glm
u8vec2	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef tvec2<u8, defaultp> u8vec2;$/;"	t	namespace:glm
u8vec3	mesh_visibility/glm/glm/fwd.hpp	/^	typedef highp_u8vec3			u8vec3;$/;"	t	namespace:glm
u8vec3	mesh_visibility/glm/glm/fwd.hpp	/^	typedef lowp_u8vec3				u8vec3;$/;"	t	namespace:glm
u8vec3	mesh_visibility/glm/glm/fwd.hpp	/^	typedef mediump_u8vec3			u8vec3;$/;"	t	namespace:glm
u8vec3	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef tvec3<u8, defaultp> u8vec3;$/;"	t	namespace:glm
u8vec4	mesh_visibility/glm/glm/fwd.hpp	/^	typedef highp_u8vec4			u8vec4;$/;"	t	namespace:glm
u8vec4	mesh_visibility/glm/glm/fwd.hpp	/^	typedef lowp_u8vec4				u8vec4;$/;"	t	namespace:glm
u8vec4	mesh_visibility/glm/glm/fwd.hpp	/^	typedef mediump_u8vec4			u8vec4;	$/;"	t	namespace:glm
u8vec4	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef tvec4<u8, defaultp> u8vec4;$/;"	t	namespace:glm
uint	mesh_partition/heap/MxBlock.h	/^typedef unsigned int uint;$/;"	t
uint	mesh_partition/heap/stdmix.h	/^typedef unsigned int uint;$/;"	t
uint	mesh_visibility/glm/glm/detail/type_int.hpp	/^	typedef unsigned int				uint;$/;"	t	namespace:glm
uint16	mesh_visibility/glm/glm/detail/type_int.hpp	/^		typedef std::uint16_t				uint16;$/;"	t	namespace:glm::detail
uint16	mesh_visibility/glm/glm/detail/type_int.hpp	/^	typedef detail::uint16					uint16;$/;"	t	namespace:glm
uint16	mesh_visibility/glm/glm/fwd.hpp	/^	typedef detail::uint16 uint16;$/;"	t	namespace:glm
uint16	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef detail::uint16 uint16;$/;"	t	namespace:glm
uint32	mesh_visibility/glm/glm/detail/type_int.hpp	/^		typedef std::uint32_t				uint32;$/;"	t	namespace:glm::detail
uint32	mesh_visibility/glm/glm/detail/type_int.hpp	/^	typedef detail::uint32					uint32;$/;"	t	namespace:glm
uint32	mesh_visibility/glm/glm/fwd.hpp	/^	typedef detail::uint32 uint32;$/;"	t	namespace:glm
uint32	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef detail::uint32 uint32;$/;"	t	namespace:glm
uint64	mesh_visibility/glm/glm/detail/type_int.hpp	/^		typedef std::uint64_t				uint64;$/;"	t	namespace:glm::detail
uint64	mesh_visibility/glm/glm/detail/type_int.hpp	/^	typedef detail::uint64					uint64;$/;"	t	namespace:glm
uint64	mesh_visibility/glm/glm/fwd.hpp	/^	typedef detail::uint64 uint64;$/;"	t	namespace:glm
uint64	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef detail::uint64 uint64;$/;"	t	namespace:glm
uint8	mesh_visibility/glm/glm/detail/type_int.hpp	/^		typedef std::uint8_t				uint8;$/;"	t	namespace:glm::detail
uint8	mesh_visibility/glm/glm/detail/type_int.hpp	/^	typedef detail::uint8					uint8;$/;"	t	namespace:glm
uint8	mesh_visibility/glm/glm/fwd.hpp	/^	typedef detail::uint8 uint8;$/;"	t	namespace:glm
uint8	mesh_visibility/glm/glm/gtc/type_precision.hpp	/^	typedef detail::uint8 uint8;$/;"	t	namespace:glm
uint_t	mesh_visibility/glm/glm/detail/type_int.hpp	/^	typedef highp_uint					uint_t;$/;"	t	namespace:glm
uint_t	mesh_visibility/glm/glm/detail/type_int.hpp	/^	typedef lowp_uint					uint_t;$/;"	t	namespace:glm
uint_t	mesh_visibility/glm/glm/detail/type_int.hpp	/^	typedef mediump_uint				uint_t;$/;"	t	namespace:glm
umat2	mesh_visibility/glm/glm/gtc/matrix_integer.hpp	/^	typedef highp_umat2								umat2;$/;"	t	namespace:glm
umat2	mesh_visibility/glm/glm/gtc/matrix_integer.hpp	/^	typedef lowp_umat2								umat2;$/;"	t	namespace:glm
umat2	mesh_visibility/glm/glm/gtc/matrix_integer.hpp	/^	typedef mediump_umat2							umat2;$/;"	t	namespace:glm
umat2x2	mesh_visibility/glm/glm/gtc/matrix_integer.hpp	/^	typedef highp_umat2x2							umat2x2;$/;"	t	namespace:glm
umat2x2	mesh_visibility/glm/glm/gtc/matrix_integer.hpp	/^	typedef lowp_umat2x2							umat2x2;$/;"	t	namespace:glm
umat2x2	mesh_visibility/glm/glm/gtc/matrix_integer.hpp	/^	typedef mediump_umat2x2							umat2x2;$/;"	t	namespace:glm
umat2x3	mesh_visibility/glm/glm/gtc/matrix_integer.hpp	/^	typedef highp_umat2x3							umat2x3;$/;"	t	namespace:glm
umat2x3	mesh_visibility/glm/glm/gtc/matrix_integer.hpp	/^	typedef lowp_umat2x3							umat2x3;$/;"	t	namespace:glm
umat2x3	mesh_visibility/glm/glm/gtc/matrix_integer.hpp	/^	typedef mediump_umat2x3							umat2x3;$/;"	t	namespace:glm
umat2x4	mesh_visibility/glm/glm/gtc/matrix_integer.hpp	/^	typedef highp_umat2x4							umat2x4;$/;"	t	namespace:glm
umat2x4	mesh_visibility/glm/glm/gtc/matrix_integer.hpp	/^	typedef lowp_umat2x4							umat2x4;$/;"	t	namespace:glm
umat2x4	mesh_visibility/glm/glm/gtc/matrix_integer.hpp	/^	typedef mediump_umat2x4							umat2x4;$/;"	t	namespace:glm
umat3	mesh_visibility/glm/glm/gtc/matrix_integer.hpp	/^	typedef highp_umat3								umat3;$/;"	t	namespace:glm
umat3	mesh_visibility/glm/glm/gtc/matrix_integer.hpp	/^	typedef lowp_umat3								umat3;$/;"	t	namespace:glm
umat3	mesh_visibility/glm/glm/gtc/matrix_integer.hpp	/^	typedef mediump_umat3							umat3;$/;"	t	namespace:glm
umat3x2	mesh_visibility/glm/glm/gtc/matrix_integer.hpp	/^	typedef highp_umat3x2							umat3x2;$/;"	t	namespace:glm
umat3x2	mesh_visibility/glm/glm/gtc/matrix_integer.hpp	/^	typedef lowp_umat3x2							umat3x2;$/;"	t	namespace:glm
umat3x2	mesh_visibility/glm/glm/gtc/matrix_integer.hpp	/^	typedef mediump_umat3x2							umat3x2;$/;"	t	namespace:glm
umat3x3	mesh_visibility/glm/glm/gtc/matrix_integer.hpp	/^	typedef highp_umat3x3							umat3x3;$/;"	t	namespace:glm
umat3x3	mesh_visibility/glm/glm/gtc/matrix_integer.hpp	/^	typedef lowp_umat3x3							umat3x3;$/;"	t	namespace:glm
umat3x3	mesh_visibility/glm/glm/gtc/matrix_integer.hpp	/^	typedef mediump_umat3x3							umat3x3;$/;"	t	namespace:glm
umat3x4	mesh_visibility/glm/glm/gtc/matrix_integer.hpp	/^	typedef highp_umat3x4							umat3x4;$/;"	t	namespace:glm
umat3x4	mesh_visibility/glm/glm/gtc/matrix_integer.hpp	/^	typedef lowp_umat3x4							umat3x4;$/;"	t	namespace:glm
umat3x4	mesh_visibility/glm/glm/gtc/matrix_integer.hpp	/^	typedef mediump_umat3x4							umat3x4;$/;"	t	namespace:glm
umat4	mesh_visibility/glm/glm/gtc/matrix_integer.hpp	/^	typedef highp_umat4								umat4;$/;"	t	namespace:glm
umat4	mesh_visibility/glm/glm/gtc/matrix_integer.hpp	/^	typedef lowp_umat4								umat4;$/;"	t	namespace:glm
umat4	mesh_visibility/glm/glm/gtc/matrix_integer.hpp	/^	typedef mediump_umat4							umat4;$/;"	t	namespace:glm
umat4x2	mesh_visibility/glm/glm/gtc/matrix_integer.hpp	/^	typedef highp_umat4x2							umat4x2;$/;"	t	namespace:glm
umat4x2	mesh_visibility/glm/glm/gtc/matrix_integer.hpp	/^	typedef lowp_umat4x2							umat4x2;$/;"	t	namespace:glm
umat4x2	mesh_visibility/glm/glm/gtc/matrix_integer.hpp	/^	typedef mediump_umat4x2							umat4x2;$/;"	t	namespace:glm
umat4x3	mesh_visibility/glm/glm/gtc/matrix_integer.hpp	/^	typedef highp_umat4x3							umat4x3;$/;"	t	namespace:glm
umat4x3	mesh_visibility/glm/glm/gtc/matrix_integer.hpp	/^	typedef lowp_umat4x3							umat4x3;$/;"	t	namespace:glm
umat4x3	mesh_visibility/glm/glm/gtc/matrix_integer.hpp	/^	typedef mediump_umat4x3							umat4x3;$/;"	t	namespace:glm
umat4x4	mesh_visibility/glm/glm/gtc/matrix_integer.hpp	/^	typedef highp_umat4x4							umat4x4;$/;"	t	namespace:glm
umat4x4	mesh_visibility/glm/glm/gtc/matrix_integer.hpp	/^	typedef lowp_umat4x4							umat4x4;$/;"	t	namespace:glm
umat4x4	mesh_visibility/glm/glm/gtc/matrix_integer.hpp	/^	typedef mediump_umat4x4							umat4x4;$/;"	t	namespace:glm
uninitialize	mesh_visibility/glm/glm/detail/setup.hpp	/^	enum ctor{uninitialize};$/;"	e	enum:glm::ctor
update	mesh_partition/heap/MxHeap.cxx	/^void MxHeap::update(MxHeapable *t, double v)$/;"	f	class:MxHeap
update	mesh_partition/heap/MxHeap.h	/^    void update(MxHeapable *t) { update(t, t->heap_key()); }$/;"	f	class:MxHeap
update	mesh_partition/myheap.h	/^    bool update(MxHeapable *t) { return update(t, t->heap_key()); }$/;"	f	class:MxHeap
update	mesh_partition/myheap.h	/^    bool update(MxHeapable *t, double v)$/;"	f	class:MxHeap
updateCurrentClusterNum	mesh_partition/partition.cpp	/^void Partition::updateCurrentClusterNum()$/;"	f	class:Partition
updateNewMeshIndices	mesh_partition/partition.cpp	/^void Partition::updateNewMeshIndices()$/;"	f	class:Partition
upheap	mesh_partition/heap/MxHeap.cxx	/^void MxHeap::upheap(unsigned int i)$/;"	f	class:MxHeap
upheap	mesh_partition/myheap.h	/^    void upheap(unsigned int i)$/;"	f	class:MxHeap
useProgram	mesh_visibility/shader.h	/^    void useProgram() const { glUseProgram(programID_); }$/;"	f	class:Shader
ushort	mesh_partition/heap/stdmix.h	/^typedef unsigned short ushort;$/;"	t
uv	mesh_texture_opt/mesh_opt.h	/^        Vector2d uv[3];  \/\/ uv texture coordinates for 3 vertices in a texture image$/;"	m	struct:RGBDMeshOpt::Face
uv	mesh_visibility/mesh_visibility.h	/^	glm::vec2 uv;$/;"	m	struct:Vertex
uv_textures	mesh_texture_opt/mesh_opt.h	/^        vector<Vector2d> uv_textures;             \/\/ texture uv-coords for each vertex, same size as 'vertex_to_patch'$/;"	m	struct:RGBDMeshOpt::TexturePatch
uvec1	mesh_visibility/glm/glm/gtc/vec1.hpp	/^	typedef highp_uvec1			uvec1;$/;"	t	namespace:glm
uvec1	mesh_visibility/glm/glm/gtc/vec1.hpp	/^	typedef lowp_uvec1			uvec1;$/;"	t	namespace:glm
uvec1	mesh_visibility/glm/glm/gtc/vec1.hpp	/^	typedef mediump_uvec1		uvec1;$/;"	t	namespace:glm
uvec2	mesh_visibility/glm/glm/detail/type_vec.hpp	/^	typedef highp_uvec2			uvec2;$/;"	t	namespace:glm
uvec2	mesh_visibility/glm/glm/detail/type_vec.hpp	/^	typedef lowp_uvec2			uvec2;$/;"	t	namespace:glm
uvec2	mesh_visibility/glm/glm/detail/type_vec.hpp	/^	typedef mediump_uvec2		uvec2;$/;"	t	namespace:glm
uvec3	mesh_visibility/glm/glm/detail/type_vec.hpp	/^	typedef highp_uvec3			uvec3;$/;"	t	namespace:glm
uvec3	mesh_visibility/glm/glm/detail/type_vec.hpp	/^	typedef lowp_uvec3			uvec3;$/;"	t	namespace:glm
uvec3	mesh_visibility/glm/glm/detail/type_vec.hpp	/^	typedef mediump_uvec3		uvec3;$/;"	t	namespace:glm
uvec4	mesh_visibility/glm/glm/detail/type_vec.hpp	/^	typedef highp_uvec4			uvec4;$/;"	t	namespace:glm
uvec4	mesh_visibility/glm/glm/detail/type_vec.hpp	/^	typedef lowp_uvec4			uvec4;$/;"	t	namespace:glm
uvec4	mesh_visibility/glm/glm/detail/type_vec.hpp	/^	typedef mediump_uvec4		uvec4;$/;"	t	namespace:glm
v1	mesh_partition/partition.h	/^        int v1, v2;$/;"	m	struct:Partition::Edge
v2	mesh_partition/partition.h	/^        int v1, v2;$/;"	m	struct:Partition::Edge
value	mesh_visibility/glm/glm/detail/type_mat2x2.hpp	/^		col_type value[2];$/;"	m	struct:glm::tmat2x2
value	mesh_visibility/glm/glm/detail/type_mat2x3.hpp	/^		col_type value[2];$/;"	m	struct:glm::tmat2x3
value	mesh_visibility/glm/glm/detail/type_mat2x4.hpp	/^		col_type value[2];$/;"	m	struct:glm::tmat2x4
value	mesh_visibility/glm/glm/detail/type_mat3x2.hpp	/^		col_type value[3];$/;"	m	struct:glm::tmat3x2
value	mesh_visibility/glm/glm/detail/type_mat3x3.hpp	/^		col_type value[3];$/;"	m	struct:glm::tmat3x3
value	mesh_visibility/glm/glm/detail/type_mat3x4.hpp	/^		col_type value[3];$/;"	m	struct:glm::tmat3x4
value	mesh_visibility/glm/glm/detail/type_mat4x2.hpp	/^		col_type value[4];$/;"	m	struct:glm::tmat4x2
value	mesh_visibility/glm/glm/detail/type_mat4x3.hpp	/^		col_type value[4];$/;"	m	struct:glm::tmat4x3
value	mesh_visibility/glm/glm/detail/type_mat4x4.hpp	/^		col_type value[4];$/;"	m	struct:glm::tmat4x4
value	mesh_visibility/glm/glm/gtx/io.hpp	/^			CTy value[3];$/;"	m	struct:glm::io::delimeter
value	mesh_visibility/glm/glm/gtx/io.hpp	/^			order_type value;$/;"	m	struct:glm::io::order
value	mesh_visibility/glm/glm/gtx/io.hpp	/^			unsigned value;$/;"	m	struct:glm::io::precision
value	mesh_visibility/glm/glm/gtx/io.hpp	/^			unsigned value;$/;"	m	struct:glm::io::width
value_address	mesh_visibility/glm/glm/detail/type_gentype.hpp	/^		value_const_pointer value_address() const{return value_pointer(this);}$/;"	f	struct:glm::detail::genType
value_address	mesh_visibility/glm/glm/detail/type_gentype.hpp	/^		value_pointer value_address(){return value_pointer(this);}$/;"	f	struct:glm::detail::genType
value_const_pointer	mesh_visibility/glm/glm/detail/type_gentype.hpp	/^		typedef VALTYPE const * value_const_pointer;$/;"	t	struct:glm::detail::genType
value_pointer	mesh_visibility/glm/glm/detail/type_gentype.hpp	/^		typedef VALTYPE * value_pointer;$/;"	t	struct:glm::detail::genType
value_reference	mesh_visibility/glm/glm/detail/type_gentype.hpp	/^		typedef VALTYPE & value_reference;$/;"	t	struct:glm::detail::genType
value_type	mesh_partition/heap/MxBlock.h	/^    typedef T value_type;$/;"	t	class:MxBlock
value_type	mesh_visibility/glm/glm/detail/_swizzle.hpp	/^		typedef T       value_type;$/;"	t	struct:glm::detail::_swizzle_base0
value_type	mesh_visibility/glm/glm/detail/_swizzle.hpp	/^		typedef ValueType       value_type;$/;"	t	struct:glm::detail::_swizzle_base2
value_type	mesh_visibility/glm/glm/detail/_swizzle.hpp	/^		typedef ValueType value_type;$/;"	t	struct:glm::detail::_swizzle_base2
value_type	mesh_visibility/glm/glm/detail/type_gentype.hpp	/^		typedef VALTYPE value_type;$/;"	t	struct:glm::detail::genType
value_type	mesh_visibility/glm/glm/detail/type_mat2x2.hpp	/^		typedef T value_type;$/;"	t	struct:glm::tmat2x2
value_type	mesh_visibility/glm/glm/detail/type_mat2x3.hpp	/^		typedef T value_type;$/;"	t	struct:glm::tmat2x3
value_type	mesh_visibility/glm/glm/detail/type_mat2x4.hpp	/^		typedef T value_type;$/;"	t	struct:glm::tmat2x4
value_type	mesh_visibility/glm/glm/detail/type_mat3x2.hpp	/^		typedef T value_type;$/;"	t	struct:glm::tmat3x2
value_type	mesh_visibility/glm/glm/detail/type_mat3x3.hpp	/^		typedef T value_type;$/;"	t	struct:glm::tmat3x3
value_type	mesh_visibility/glm/glm/detail/type_mat3x4.hpp	/^		typedef T value_type;$/;"	t	struct:glm::tmat3x4
value_type	mesh_visibility/glm/glm/detail/type_mat4x2.hpp	/^		typedef T value_type;$/;"	t	struct:glm::tmat4x2
value_type	mesh_visibility/glm/glm/detail/type_mat4x3.hpp	/^		typedef T value_type;$/;"	t	struct:glm::tmat4x3
value_type	mesh_visibility/glm/glm/detail/type_mat4x4.hpp	/^		typedef T value_type;$/;"	t	struct:glm::tmat4x4
value_type	mesh_visibility/glm/glm/detail/type_vec1.hpp	/^		typedef T value_type;$/;"	t	struct:glm::tvec1
value_type	mesh_visibility/glm/glm/detail/type_vec2.hpp	/^		typedef T value_type;$/;"	t	struct:glm::tvec2
value_type	mesh_visibility/glm/glm/detail/type_vec3.hpp	/^		typedef T value_type;$/;"	t	struct:glm::tvec3
value_type	mesh_visibility/glm/glm/detail/type_vec4.hpp	/^		typedef T value_type;$/;"	t	struct:glm::tvec4
value_type	mesh_visibility/glm/glm/gtc/quaternion.hpp	/^		typedef T value_type;$/;"	t	struct:glm::tquat
value_type	mesh_visibility/glm/glm/gtx/dual_quaternion.hpp	/^		typedef T value_type;$/;"	t	struct:glm::tdualquat
varray_find	mesh_partition/heap/MxDynBlock.h	/^inline bool varray_find(const MxDynBlock<T>& A, const T& t, uint* index = NULL)$/;"	f
vec1	mesh_visibility/glm/glm/gtc/vec1.hpp	/^	typedef highp_vec1				vec1;$/;"	t	namespace:glm
vec1	mesh_visibility/glm/glm/gtc/vec1.hpp	/^	typedef lowp_vec1				vec1;$/;"	t	namespace:glm
vec1	mesh_visibility/glm/glm/gtc/vec1.hpp	/^	typedef mediump_vec1			vec1;$/;"	t	namespace:glm
vec2	mesh_visibility/glm/glm/detail/type_vec.hpp	/^	typedef highp_vec2			vec2;$/;"	t	namespace:glm
vec2	mesh_visibility/glm/glm/detail/type_vec.hpp	/^	typedef lowp_vec2			vec2;$/;"	t	namespace:glm
vec2	mesh_visibility/glm/glm/detail/type_vec.hpp	/^	typedef mediump_vec2		vec2;$/;"	t	namespace:glm
vec3	mesh_visibility/glm/glm/detail/type_vec.hpp	/^	typedef highp_vec3			vec3;$/;"	t	namespace:glm
vec3	mesh_visibility/glm/glm/detail/type_vec.hpp	/^	typedef lowp_vec3			vec3;$/;"	t	namespace:glm
vec3	mesh_visibility/glm/glm/detail/type_vec.hpp	/^	typedef mediump_vec3		vec3;$/;"	t	namespace:glm
vec4	mesh_visibility/glm/glm/detail/type_vec.hpp	/^	typedef highp_vec4			vec4;$/;"	t	namespace:glm
vec4	mesh_visibility/glm/glm/detail/type_vec.hpp	/^	typedef lowp_vec4			vec4;$/;"	t	namespace:glm
vec4	mesh_visibility/glm/glm/detail/type_vec.hpp	/^	typedef mediump_vec4		vec4;$/;"	t	namespace:glm
vec_type	mesh_visibility/glm/glm/detail/_swizzle.hpp	/^		typedef VecType         vec_type;        $/;"	t	struct:glm::detail::_swizzle_base2
vec_type	mesh_visibility/glm/glm/detail/_swizzle.hpp	/^		typedef VecType vec_type;$/;"	t	struct:glm::detail::_swizzle_base2
vertex_num_	mesh_partition/partition.h	/^    int vertex_num_, face_num_;$/;"	m	class:Partition
vertex_num_	mesh_texture_opt/mesh_opt.h	/^    int vertex_num_, face_num_, cluster_num_;$/;"	m	class:RGBDMeshOpt
vertex_num_	mesh_visibility/mesh_visibility.h	/^	int vertex_num_;$/;"	m	class:MeshVisibility
vertex_to_patch	mesh_texture_opt/mesh_opt.h	/^        unordered_map<int, int> vertex_to_patch;  \/\/ mesh vertex index -> new index in patch (start from 0)$/;"	m	struct:RGBDMeshOpt::TexturePatch
vertices_	mesh_partition/partition.h	/^    vector<Vertex> vertices_;$/;"	m	class:Partition
vertices_	mesh_texture_opt/mesh_opt.h	/^    vector<Vertex> vertices_;$/;"	m	class:RGBDMeshOpt
vertices_	mesh_visibility/mesh_visibility.h	/^	vector<Vertex> vertices_;$/;"	m	class:MeshVisibility
vidx_old2new_	mesh_partition/partition.h	/^    unordered_map<int, int> vidx_old2new_;  \/\/ original vertex indices -> new mesh indices (after removing some faces)$/;"	m	class:Partition
visible_frame_pixels	mesh_texture_opt/mesh_opt.h	/^        unordered_map<int, ImgPixel> visible_frame_pixels;  \/\/ visible frame -> projection pixel on color image in the frame$/;"	m	struct:RGBDMeshOpt::Texel
visible_frames	mesh_texture_opt/mesh_opt.h	/^        unordered_set<int> nbr_faces, visible_frames;$/;"	m	struct:RGBDMeshOpt::Face
visible_frames	mesh_texture_opt/mesh_opt.h	/^        unordered_set<int> nbr_vertices, nbr_faces, visible_frames;$/;"	m	struct:RGBDMeshOpt::Vertex
visible_vertices	mesh_texture_opt/mesh_opt.h	/^        vector<int> visible_vertices;$/;"	m	struct:RGBDMeshOpt::Frame
w	mesh_texture_opt/mesh_opt.h	/^        double w, opt_w, last_w;$/;"	m	struct:RGBDMeshOpt::Cluster
w	mesh_visibility/glm/glm/detail/type_vec4.hpp	/^				struct { T x, y, z, w;};$/;"	m	struct:glm::tvec4::__anon1::__anon2
w	mesh_visibility/glm/glm/detail/type_vec4.hpp	/^			union { T w, a, q; };$/;"	m	union:glm::tvec4::__anon8
w	mesh_visibility/glm/glm/gtc/quaternion.hpp	/^		T x, y, z, w;$/;"	m	struct:glm::tquat
wformat_saver	mesh_visibility/glm/glm/gtx/io.hpp	/^		typedef basic_format_saver<wchar_t> wformat_saver;$/;"	t	namespace:glm::io
width	mesh_texture_opt/mesh_opt.h	/^        int minx, miny, width, height;  \/\/ bounding box parameters$/;"	m	struct:RGBDMeshOpt::TreeNode
width	mesh_texture_opt/mesh_opt.h	/^        int width, height, area;                  \/\/ parameters of the patch rectangle$/;"	m	struct:RGBDMeshOpt::TexturePatch
width	mesh_texture_opt/mesh_opt.h	/^        int width, height;$/;"	m	struct:RGBDMeshOpt::CalibrationParams
width	mesh_visibility/glfw/glfw3.h	/^    int width;$/;"	m	struct:GLFWimage
width	mesh_visibility/glfw/glfw3.h	/^    int width;$/;"	m	struct:GLFWvidmode
width	mesh_visibility/glm/glm/gtx/io.hpp	/^			unsigned   width;$/;"	m	class:glm::io::format_punct
width	mesh_visibility/glm/glm/gtx/io.hpp	/^		struct width$/;"	s	namespace:glm::io
width_	mesh_visibility/glm/glm/gtx/io.hpp	/^			streamsize_type width_;$/;"	m	class:glm::io::basic_state_saver
window	mesh_visibility/main.cpp	/^GLFWwindow* window;$/;"	v
word	mesh_visibility/glm/glm/gtx/raw_data.hpp	/^	typedef detail::uint16		word;$/;"	t	namespace:glm
writeClusterFile	mesh_partition/partition.cpp	/^void Partition::writeClusterFile(const std::string& filename)$/;"	f	class:Partition
writePLY	mesh_partition/partition.cpp	/^bool Partition::writePLY(const std::string& filename)$/;"	f	class:Partition
wstate_saver	mesh_visibility/glm/glm/gtx/io.hpp	/^		typedef basic_state_saver<wchar_t> wstate_saver;$/;"	t	namespace:glm::io
x	mesh_visibility/glm/glm/detail/type_vec1.hpp	/^				T x;$/;"	m	union:glm::tvec1::__anon9
x	mesh_visibility/glm/glm/detail/type_vec1.hpp	/^			union {T x, r, s;};$/;"	m	union:glm::tvec1::__anon10
x	mesh_visibility/glm/glm/detail/type_vec2.hpp	/^				struct{ T x, y; };$/;"	m	struct:glm::tvec2::__anon18::__anon19
x	mesh_visibility/glm/glm/detail/type_vec2.hpp	/^			union {T x, r, s;};$/;"	m	union:glm::tvec2::__anon22
x	mesh_visibility/glm/glm/detail/type_vec3.hpp	/^				struct{ T x, y, z; };$/;"	m	struct:glm::tvec3::__anon11::__anon12
x	mesh_visibility/glm/glm/detail/type_vec3.hpp	/^			union { T x, r, s; };$/;"	m	union:glm::tvec3::__anon15
x	mesh_visibility/glm/glm/detail/type_vec4.hpp	/^				struct { T x, y, z, w;};$/;"	m	struct:glm::tvec4::__anon1::__anon2
x	mesh_visibility/glm/glm/detail/type_vec4.hpp	/^			union { T x, r, s; };$/;"	m	union:glm::tvec4::__anon5
x	mesh_visibility/glm/glm/gtc/quaternion.hpp	/^		T x, y, z, w;$/;"	m	struct:glm::tquat
y	mesh_visibility/glm/glm/detail/type_vec2.hpp	/^				struct{ T x, y; };$/;"	m	struct:glm::tvec2::__anon18::__anon19
y	mesh_visibility/glm/glm/detail/type_vec2.hpp	/^			union {T y, g, t;};$/;"	m	union:glm::tvec2::__anon23
y	mesh_visibility/glm/glm/detail/type_vec3.hpp	/^				struct{ T x, y, z; };$/;"	m	struct:glm::tvec3::__anon11::__anon12
y	mesh_visibility/glm/glm/detail/type_vec3.hpp	/^			union { T y, g, t; };$/;"	m	union:glm::tvec3::__anon16
y	mesh_visibility/glm/glm/detail/type_vec4.hpp	/^				struct { T x, y, z, w;};$/;"	m	struct:glm::tvec4::__anon1::__anon2
y	mesh_visibility/glm/glm/detail/type_vec4.hpp	/^			union { T y, g, t; };$/;"	m	union:glm::tvec4::__anon6
y	mesh_visibility/glm/glm/gtc/quaternion.hpp	/^		T x, y, z, w;$/;"	m	struct:glm::tquat
z	mesh_visibility/glm/glm/detail/type_vec3.hpp	/^				struct{ T x, y, z; };$/;"	m	struct:glm::tvec3::__anon11::__anon12
z	mesh_visibility/glm/glm/detail/type_vec3.hpp	/^			union { T z, b, p; };$/;"	m	union:glm::tvec3::__anon17
z	mesh_visibility/glm/glm/detail/type_vec4.hpp	/^				struct { T x, y, z, w;};$/;"	m	struct:glm::tvec4::__anon1::__anon2
z	mesh_visibility/glm/glm/detail/type_vec4.hpp	/^			union { T z, b, p; };$/;"	m	union:glm::tvec4::__anon7
z	mesh_visibility/glm/glm/gtc/quaternion.hpp	/^		T x, y, z, w;$/;"	m	struct:glm::tquat
~BlurEstimation	blur_estimation/blur_estimation.h	/^    ~BlurEstimation() {}$/;"	f	class:BlurEstimation
~GBuffer	mesh_visibility/gbuffer.cpp	/^GBuffer::~GBuffer()$/;"	f	class:GBuffer
~MeshVisibility	mesh_visibility/mesh_visibility.cpp	/^MeshVisibility::~MeshVisibility()$/;"	f	class:MeshVisibility
~MxBlock	mesh_partition/heap/MxBlock.h	/^    ~MxBlock() { free_block(); }$/;"	f	class:MxBlock
~Partition	mesh_partition/partition.cpp	/^Partition::~Partition()$/;"	f	class:Partition
~RGBDMeshOpt	mesh_texture_opt/mesh_opt.cpp	/^RGBDMeshOpt::~RGBDMeshOpt() {}$/;"	f	class:RGBDMeshOpt
